{
    "version": "https://jsonfeed.org/version/1",
    "title": "bradgarropy.com",
    "home_page_url": "https://bradgarropy.com",
    "feed_url": "https://bradgarropy.com/feed.json",
    "icon": "https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto/bradgarropy.com/social/facebook.png",
    "author": {
        "name": "Brad Garropy",
        "url": "https://twitter.com/bradgarropy"
    },
    "items": [
        {
            "id": "2019-in-review",
            "content_html": "<p>As <strong>2019</strong> was the first year I've ever written down any <a href=\"https://bradgarropy.com/blog/new-years-resolutions\" rel=\"noopener noreferrer\" target=\"_blank\">resolutions</a>, it would be prudent to review how I did. Some of these resolutions didn't come with a measurable goal. So I'll summarize how I did in that area over the course of the year.</p>\n<h2>💏 marriage</h2>\n<p>Early on in the year I established a habit where I would give my wife compliments at the end of the day. I'd tell her what she did that made me proud of her, what she did that made me happy, or how I felt about her. I didn't have a perfect track record with this habit. But I found that I was much more open in telling Gaby how I felt about her. This led to her feeling more loved by me.</p>\n<h2>🏋🏼 fitness</h2>\n<p>I was lucky enough to travel to Mexico twice in 2019 (<a href=\"https://goo.gl/maps/evjauLQy7fiPq9Lg7\" rel=\"noopener noreferrer\" target=\"_blank\">Cancun</a> and <a href=\"https://goo.gl/maps/62vzDUBkbwfyvEZx8\" rel=\"noopener noreferrer\" target=\"_blank\">Isla Mujeres</a>). I worked hard in the gym to prepare for the beach and bathing suits. Shortly after the second trip in September, I began to burn out of my healthy routines. I started to be more flexible with my diet. I took a break from the gym in December, but I'm already back at it in 2020. I'd say it was a balanced year for my fitness, and I was very happy with my physique in the summer!</p>\n<h2>👨🏼‍💻 career</h2>\n<p>I spent most of the past decade working at <a href=\"https://delltechnologies.com\" rel=\"noopener noreferrer\" target=\"_blank\">Dell</a>, but 2019 brought big changes in my career. I finally made the jump to web development at <a href=\"https://adobe.com\" rel=\"noopener noreferrer\" target=\"_blank\">Adobe</a>! This career shift has reinvigorated me, and I love my new team and company.</p>\n<h2>💻 coding</h2>\n<p>I bit off more than I could chew here, but that doesn't mean I didn't make progress. I accomplished a lot and upgraded my skills throughout 2019.</p>\n<h3>learning</h3>\n<p>I completed <a href=\"https://advancedreact.com\" rel=\"noopener noreferrer\" target=\"_blank\">Advanced React</a> by <a href=\"https://wesbos.com\" rel=\"noopener noreferrer\" target=\"_blank\">Wes Bos</a>, which was absolutely huge. I also finished a ton of <a href=\"https://leveluptutorials.com\" rel=\"noopener noreferrer\" target=\"_blank\">Level Up Tutorials</a> courses by <a href=\"https://scotttolinski.com\" rel=\"noopener noreferrer\" target=\"_blank\">Scott Tolinski</a>. I definitely accomplished my resolution to become more comfortable in <a href=\"https://graphql.org\" rel=\"noopener noreferrer\" target=\"_blank\">GraphQL</a> and <a href=\"https://styled-components.com\" rel=\"noopener noreferrer\" target=\"_blank\">styled-components</a>.</p>\n<p>My work at <a href=\"https://adobe.com\" rel=\"noopener noreferrer\" target=\"_blank\">Adobe</a> gave me more experience with <a href=\"https://docker.com\" rel=\"noopener noreferrer\" target=\"_blank\">Docker</a>, <a href=\"https://jestjs.io\" rel=\"noopener noreferrer\" target=\"_blank\">Jest</a>, <a href=\"https://jenkins.io/solutions/pipeline\" rel=\"noopener noreferrer\" target=\"_blank\">Jenkins pipelines</a>, <a href=\"https://aws.amazon.com\" rel=\"noopener noreferrer\" target=\"_blank\">Amazon Web Services</a>, and <a href=\"https://developer.chrome.com/extensions\" rel=\"noopener noreferrer\" target=\"_blank\">Chrome extensions</a>. This breadth of build, test, and deployment technologies helped me become a more well rounded developer. And as icing on the cake, I also attended <a href=\"https://artifactconf.com\" rel=\"noopener noreferrer\" target=\"_blank\">Artifact Conf</a> here in Austin, which was my first conference.</p>\n<p>My last goal was to learn how to make an authenticated, multi-user application. I attempted this with <a href=\"https://github.com/bradgarropy/giftex\" rel=\"noopener noreferrer\" target=\"_blank\">giftex</a>, but fell short after having difficulty integrating <a href=\"https://firebase.google.com\" rel=\"noopener noreferrer\" target=\"_blank\">Firebase</a> with <a href=\"https://nextjs.org\" rel=\"noopener noreferrer\" target=\"_blank\">Next.js</a>.</p>\n<h3>freelancing</h3>\n<p>The <a href=\"https://ironjimmy.com\" rel=\"noopener noreferrer\" target=\"_blank\">Iron Jimmy</a> project definitely exposed some growing pains in my freelancing career. After that experience, I did not pursue any other clients. While I'm not counting it out for the future, right now I'm happy building things for myself.</p>\n<h3>open source</h3>\n<p>My goal was to contribute to three other open source repositories. I crushed that number with 13 <a href=\"https://github.com/pulls\" rel=\"noopener noreferrer\" target=\"_blank\">pull requests</a>, 11 of which got merged!</p>\n<h2>🌱 marketing</h2>\n<p>My <a href=\"https://youtube.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">YouTube</a> channel has grown significantly over the year. I'm at almost 100 subscribers thanks to my coding <a href=\"https://youtube.com/playlist?list=PL6Mu1AMmTL-uMkwOvZ5_Ytbu9qQ5SQSrc\" rel=\"noopener noreferrer\" target=\"_blank\">livestreams</a>. <a href=\"https://twitter.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">Twitter</a> has been my prominent platform this past year. It allows me to interact directly with the web development community. My <a href=\"https://instagram.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">Instagram</a> has gained a few followers here and there. I'm definitely putting more work into showing a developer/fitness lifestyle. And <a href=\"https://facebook.com/profile.php?id=7933107\" rel=\"noopener noreferrer\" target=\"_blank\">Facebook</a>? The platform is pretty much useless to me now that I'm no longer pursuing freelance clients.</p>\n<h2>📝 blogging</h2>\n<p>I did a great job posting once per month (and twice in April!) for a while, but by the time summer hit I fell off the wagon. I still believe blogging is very valuable, but I find it much easier to produce content via <a href=\"https://youtube.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">YouTube</a> livestreams and <a href=\"https://twitter.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">Twitter</a>.</p>\n<p>What's your opinion, where would you prefer to hear from me? Let me know!</p>",
            "url": "https://bradgarropy.com/blog/2019-in-review",
            "title": "📅 2019 in review",
            "date_modified": "2020-01-07T00:00:00.000Z",
            "date_published": "2020-01-07T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "2020-in-review",
            "content_html": "<p>It's that time of year again! Time to reflect on the past year and see how I measured up to my goals. This is the second year I've posted my <a href=\"https://bradgarropy.com/blog/goals-for-2020\" rel=\"noopener noreferrer\" target=\"_blank\">resolutions</a>, and I feel it really helps me stay on track throughout the year. Let's see how I did.</p>\n<h2>💏 marriage</h2>\n<p>I think a few months into the year my wife <em>hated</em> hearing the same question every morning! But starting each day with a nice conversation with my wife instead of wandering around groggy helped us start each day feeling more connected and aligned.</p>\n<h2>🐶 roman</h2>\n<p>Unfortunately, I did not do well at this particular resolution. We did cut his nails at home a few times and bathed him a few times. But I didn't keep this up at the cadence I intended.</p>\n<p>His old age really started to show this year, as his hearing and eyesight are much worse. He's also been a bit more anxious. Honestly quality time with him on the couch is probably what he'd enjoy the most.</p>\n<h2>🤠 daily texas country</h2>\n<p>Over the course of 2020, <a href=\"https://dailytexascountry.com\" rel=\"noopener noreferrer\" target=\"_blank\">Daily Texas Country</a> grew immensely. Starting as just a <a href=\"https://dailytexascountry.com/twitter\" rel=\"noopener noreferrer\" target=\"_blank\">Twitter</a> bot, DTXC now has a <a href=\"https://dailytexascountry.com\" rel=\"noopener noreferrer\" target=\"_blank\">website</a>, a <a href=\"https://dailytexascountry.com/youtube\" rel=\"noopener noreferrer\" target=\"_blank\">YouTube</a> channel, a <a href=\"https://dailytexascountry.com/spotify\" rel=\"noopener noreferrer\" target=\"_blank\">Spotify</a> account, an <a href=\"https://dailytexascountry.com/instagram\" rel=\"noopener noreferrer\" target=\"_blank\">Instagram</a> profile, and a <a href=\"https://dailytexascountry.com/facebook\" rel=\"noopener noreferrer\" target=\"_blank\">Facebook</a> page.</p>\n<p>I produce lots of different types of content for the brand. I've got blog posts, playlists, weekly <a href=\"https://youtube.com/playlist?list=PLxHXw07TDx4ve5Cl9i1fiwjK7_-3cOA1U\" rel=\"noopener noreferrer\" target=\"_blank\">Whiskey Wednesday</a> videos, and even an <a href=\"https://dailytexascountry.com/store\" rel=\"noopener noreferrer\" target=\"_blank\">apparel store</a>!</p>\n<p>Some quick stats about Daily Texas Country. I've written 22 blog posts and created 46 videos. The website gets an average of 20 views a day, videos get an average of 15 views, I wrote an <a href=\"https://dailytexascountry.com/posts/koe-wetzel-sells-out\" rel=\"noopener noreferrer\" target=\"_blank\">article</a> that got 2400 views, and I've made $16 from apparel sales so far.</p>\n<p>While there's nothing particularly impressive about these numbers, it's a great starting point for growth in the next year!</p>\n<h2>📺 youtube growth</h2>\n<p>This year was huge for me as far as content creation goes. I published 21 new videos and grew my <a href=\"https://youtube.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">YouTube</a> channel to 300 subscribers! The majority of my videos were pre-recorded and covered specific tutorial topics, like <a href=\"https://youtube.com/playlist?list=PL6Mu1AMmTL-vR7eK-1EqewignxemucVo2\" rel=\"noopener noreferrer\" target=\"_blank\">plop</a> or <a href=\"https://youtube.com/playlist?list=PL6Mu1AMmTL-sbySI5prQ6O6t79leQLUcb\" rel=\"noopener noreferrer\" target=\"_blank\">npm packages</a>.</p>\n<p>I transitioned to <a href=\"https://twitch.tv/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">Twitch</a> and continued to stream, a lot actually. I'm now a <em>Twitch Affiliate</em> with 165 followers and 6 subscribers, which has made me about $50 so far.</p>\n<h2>🎨 adobe</h2>\n<p>I was very upfront with my <a href=\"https://twitter.com/nicolecornelson\" rel=\"noopener noreferrer\" target=\"_blank\">manager</a> about wanting a promotion, and she delivered! I got promoted to <em>Senior Software Engineer</em> at <a href=\"https://www.adobe.com\" rel=\"noopener noreferrer\" target=\"_blank\">Adobe</a>! The promotion came with a great raise, but no shift in priorities or role, just an increased expectation of accountability and leadership.</p>\n<h2>🏋🏼‍♂️ fitness</h2>\n<p>Due to COVID, my summer cut was actually more of a fall cut. But it <a href=\"https://twitter.com/bradgarropy/status/1320939407118139395\" rel=\"noopener noreferrer\" target=\"_blank\">went great</a> nonetheless, I lost 13 pounds in 8 weeks. I backed out of it a little faster than I would have liked, but I kept my workouts consistent and habitualized my water intake goals.</p>\n<h2>💵 finances</h2>\n<p>With the promotion at work, we easily paid off the new family vehicle. We're also depositing more into our retirement and savings accounts by default, as they're based on a percentage of my salary.</p>\n<p>Despite the difficult circumstances in 2020, I did exceedingly well with nearly all of my resolutions. I'll be writing down my goals for 2021 in the next few days, so keep an eye out for those!</p>\n<p><em>What did you accomplish in 2020? What are your goals in 2021?</em><br>\n<em>Share them with me on <a href=\"https://twitter.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">Twitter</a>!</em></p>",
            "url": "https://bradgarropy.com/blog/2020-in-review",
            "title": "📅 2020 in review",
            "date_modified": "2020-12-16T00:00:00.000Z",
            "date_published": "2020-12-16T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "2021-in-review",
            "content_html": "<p>Settings goals is pointless if you don't look back and reflect on how you did. It seems like 2021 was a shit show in so many ways, but I was also <em>very</em> productive at the beginning and end of the year. Let's break down each of my <a href=\"https://bradgarropy.com/blog/goals-for-2021\" rel=\"noopener noreferrer\" target=\"_blank\">2021 goals</a> and see how I did.</p>\n<h2>💏 marriage</h2>\n<p>I wanted to improve on communication and appreciation this year, and I think I've come a long way! My wife and I grew a lot this year as a couple, and we had some very intentional conversations about how to have the best marriage. Communication is at an all time high, and we're feeling very connected to one another.</p>\n<p>Also, we just celebrated our <a href=\"https://www.instagram.com/p/CXJhi3qFE_j\" rel=\"noopener noreferrer\" target=\"_blank\">seven year anniversary</a> with an awesome day in downtown Austin!</p>\n<h2>😁 positivity</h2>\n<p>I'm not sure how I did it, but throughout the achilles injury I was mentally tough and stayed positive throughout my recovery process. I truly believe that without a good attitude, my recovery would not have gone as well as it did. I finished physical therapy in the summer and have been pushing myself to get back to where I was in the gym before the injury.</p>\n<h2>🦶 recovery</h2>\n<p>In regards to training, the first half of the year was focused stricly on recovering from my achilles injury. It was a lot of very focused exercises, and didn't really leave room for training any other body parts.</p>\n<p>In the second half of the year I started training upper body again, and slowly introduced running. By October I ran a <a href=\"https://www.instagram.com/p/CVLcJ-UlihU\" rel=\"noopener noreferrer\" target=\"_blank\">5k at a 7:40 / mile pace</a>, not bad. When I started feeling more comfortable I reintroduced lower body days. Starting from just the bar, I've been able to work up to <code>225</code> on squat at <code>315</code> on deadlift so far without form breakdown or pain.</p>\n<p>I've been alternating lifting and running to ensure I don't bulk up too much this winter, and to keep my heart in good shape. The only thing I'm still avoiding is sprints, which is what caused the injury in the first place. I think my mental barriers are finally coming down, and I'll bring back sprints in 2022.</p>\n<h2>🎙 podcast</h2>\n<p>I definitely surpassed everything I dreamed of for this goal. I started <a href=\"https://webdevweekly.captivate.fm\" rel=\"noopener noreferrer\" target=\"_blank\">Web Dev Weekly</a> with <a href=\"https://twitter.com/RGottleber\" rel=\"noopener noreferrer\" target=\"_blank\">Richard Gottleber</a> and released <code>31</code> episodes which averaged over <code>100</code> listens per episode! We are currently taking a break for the month of December, but I'm working on a new <a href=\"https://webdevweekly.netlify.app\" rel=\"noopener noreferrer\" target=\"_blank\">custom website</a> for the show and we've got a backlog full of ideas for next year.</p>\n<h2>🎥 twitch</h2>\n<p>While I didn't release any merch, I completely overhauled my <a href=\"https://www.twitch.tv/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">Twitch</a> overlays with a completely <a href=\"https://bg-codes.netlify.app\" rel=\"noopener noreferrer\" target=\"_blank\">custom site</a>. I also built a <a href=\"https://github.com/bradgarropy/twitch-bot\" rel=\"noopener noreferrer\" target=\"_blank\">chat bot</a> that responds to <code>!commands</code> and has rewards for redeeming channel points, like changing my <a href=\"https://code.visualstudio.com\" rel=\"noopener noreferrer\" target=\"_blank\">VS Code</a> theme or the color of my <a href=\"https://www.philips-hue.com/en-us\" rel=\"noopener noreferrer\" target=\"_blank\">Hue</a> lights. I even added a notification to this site when I'm live.</p>\n<p>I got the chance to stream during work hours to support <a href=\"https://www.extra-life.org\" rel=\"noopener noreferrer\" target=\"_blank\">Extra Life</a>, a great charity organization benefitting children's hospitals.</p>\n<p>Although my streaming slowed down quite a bit during my job transition, I've been picking it back up lately. Now I'm streaming video games like <a href=\"https://www.halowaypoint.com/halo-infinite\" rel=\"noopener noreferrer\" target=\"_blank\">Halo Infinite</a> in addition to web development.</p>\n<h2>📺 youtube</h2>\n<p>I did very well on <a href=\"https://youtube.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">YouTube</a> this year! I created <code>24</code> videos and gained <code>273</code> subscribers, nearly doubling my subscriber count from last year. I released two tutorial series, one covering <a href=\"https://youtube.com/playlist?list=PL6Mu1AMmTL-vGQdj1-auEc12KM14OmjXH\" rel=\"noopener noreferrer\" target=\"_blank\">webpack</a> and another covering <a href=\"https://youtube.com/playlist?list=PL6Mu1AMmTL-sSswsqShJ5fbIr9XjYHGFm\" rel=\"noopener noreferrer\" target=\"_blank\">firebase</a>, along with some other one off videos.</p>\n<p>Lately I've been experimenting with more <a href=\"https://youtu.be/9zcU6oUOHVc\" rel=\"noopener noreferrer\" target=\"_blank\">eye catching thumbnails</a>. I feel a little weird doing them, but we'll see if it attracts more viewers in the long run.</p>\n<h2>🏡 bradgarropy.com</h2>\n<p>This site got a lot of love over the last year, with a total redesign of the home page, a lot of behind the scenes rework, and a <a href=\"https://bradgarropy.com/newsletter\" rel=\"noopener noreferrer\" target=\"_blank\">newsletter</a> signup form.</p>\n<p>I've attempted to convert the site to <a href=\"https://nextjs.org\" rel=\"noopener noreferrer\" target=\"_blank\">Next.js</a> three different times now, and each time I've convinced myself not to halfway though the project. The first half of the migration goes very smoothly, but it's the <code>markdown</code> rendering chain that trips me up every time. Despite the advice of other developers, I'm still not ready to let go of the idea just yet.</p>\n<p>As far as content goes, I published <code>14</code> blog posts this year, and my very first <a href=\"https://www.getrevue.co/profile/bradgarropy/issues/so-i-started-a-newsletter-436283\" rel=\"noopener noreferrer\" target=\"_blank\">newsletter issue</a>! It's definitely tough choosing where to create content, but I find the blog better for technical deep dives.</p>\n<h2>🤠 daily texas country</h2>\n<p>After I started the podcast, committing to both <a href=\"https://youtube.com/playlist?list=PLxHXw07TDx4ve5Cl9i1fiwjK7_-3cOA1U\" rel=\"noopener noreferrer\" target=\"_blank\">Whiskey Wednesday</a> and the <a href=\"https://webdevweekly.captivate.fm\" rel=\"noopener noreferrer\" target=\"_blank\">podcast</a> on a weekly cadence became a bit stressful. So I decided to stop content creation for <a href=\"https://www.dailytexascountry.com\" rel=\"noopener noreferrer\" target=\"_blank\">Daily Texas Country</a>. That doesn't mean I'll never pick it up again, I really enjoyed making the videos and keeping up with Texas country music! So it's not dead, just on hiatus.</p>\n<h2>⏱ murphy</h2>\n<p>After my achilles injury, I found it very difficult to create marketing material for a workout app when I could barely walk. Although I did want to convert it to <a href=\"https://nextjs.org\" rel=\"noopener noreferrer\" target=\"_blank\">Next.js</a>, it seemed pointless if I couldn't produce any new marketing material to gain traction.</p>\n<h2>🎬 conclusion</h2>\n<p>As planned, I focused on lot on strengthening my foundations in 2021. Things like my <a href=\"https://bradgarropy.com\" rel=\"noopener noreferrer\" target=\"_blank\">website</a>, my <a href=\"https://webdevweekly.captivate.fm\" rel=\"noopener noreferrer\" target=\"_blank\">podcast</a>, my <a href=\"https://youtube.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">YouTube</a> channel, my fitness, and of course my marriage. Next year I plan to take calculated steps to building real products online, and sharing my progress through my social platforms. It will be my first steps towards solo entrepreneurship.</p>",
            "url": "https://bradgarropy.com/blog/2021-in-review",
            "title": "📅 2021 in review",
            "date_modified": "2021-12-10T00:00:00.000Z",
            "date_published": "2021-12-10T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "2022-in-review",
            "content_html": "<p>As the year winds down, it's the perfect time to reflect on everything I've accomplished. It's also a good time to see if I lived up to my <a href=\"https://bradgarropy.com/blog/goals-for-2022\" rel=\"noopener noreferrer\" target=\"_blank\">goals for 2022</a>, so let's get into it!</p>\n<h2>👩‍❤️‍💋‍👨 marriage</h2>\n<p>My wife and I are always striving for the best marriage, and this year was no exception. We spent a lot of time at the beginning of the year playing games together. Even though we bought plenty of <a href=\"https://www.amazon.com/Exploding-Kittens-LLC-EKG-ORG1-1-Card/dp/B010TQY7A8?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">adult games</a>, the one that turned out to be the most fun for us was <a href=\"https://www.amazon.com/Trouble-Shield-Players-Amazon-Exclusive/dp/B08CZXWKPX?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">Trouble</a>! It was just the right amount of skill, luck, and competition to keep us on the edge of our seats.</p>\n<p>They say that year seven is the hardest year of marriage, and I would say that proved true for us. I traveled more than normal for conferences and work, and it was a big adjustment for us. Our monthly marriage checkups always helped us share how we felt and they turned into great conversations about how we could improve.</p>\n<h2>👨🏼‍💻 products</h2>\n<p>I had a goal to build two SaaS products this year to earn some passive income. I started by building a <a href=\"https://github.com/bradgarropy/next-saas\" rel=\"noopener noreferrer\" target=\"_blank\">SaaS application template</a> with <code>Next.js</code>. Then I tried to find some product ideas on Twitter and got nowhere.</p>\n<div class=\"grid justify-center\">\n            <blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">What SaaS product could I build that would make your life easier?</p>— Brad Garropy (@bradgarropy) <a href=\"https://twitter.com/bradgarropy/status/1527694177785585671?ref_src=twsrc%5Etfw\" rel=\"noopener noreferrer\" target=\"_blank\">May 20, 2022</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n\n        </div>\n<p>After researching a few of my own ideas and hitting brick walls, I lost interest in this goal. I think this process burned me out a little, and caused me to <a href=\"https://bradgarropy.com/blog/disconnecting\" rel=\"noopener noreferrer\" target=\"_blank\">disconnect</a> for the summer. I am still interested in building some kind of SaaS application, but this time with my <a href=\"https://github.com/bradgarropy/remix-app\" rel=\"noopener noreferrer\" target=\"_blank\">Remix starter</a>. I plan to pick up on this goal again in 2023.</p>\n<h2>📚 books</h2>\n<p>I had planned to read six books this year, one every other month. But I went above and beyond this goal and wound up reading nine books this year!</p>\n<ul>\n<li><a href=\"https://www.amazon.com/Atomic-Habits-Proven-Build-Break/dp/0735211299?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">Atomic Habits</a></li>\n<li><a href=\"https://www.amazon.com/Getting-Things-Done-Stress-free-Productivity/dp/0349408947?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">Getting Things Done</a></li>\n<li><a href=\"https://www.amazon.com/Deep-Work-Focused-Success-Distracted/dp/1455586692?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">Deep Work</a></li>\n<li><a href=\"https://www.amazon.com/Digital-Minimalism-Choosing-Focused-Noisy/dp/0525536515?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">Digital Minimalism</a></li>\n<li><a href=\"https://www.amazon.com/Steal-Like-Artist-Things-Creative/dp/0761169253?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">Steal Like An Artist</a></li>\n<li><a href=\"https://www.amazon.com/Show-Your-Work-Austin-Kleon/dp/076117897X?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">Show Your Work</a></li>\n<li><a href=\"https://www.amazon.com/Keep-Going-Ways-Creative-Times/dp/1523506644?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">Keep Going</a></li>\n<li><a href=\"https://sive.rs/n\" rel=\"noopener noreferrer\" target=\"_blank\">Hell Yeah Or No</a></li>\n<li><a href=\"https://www.amazon.com/Subtle-Art-Not-Giving-Counterintuitive/dp/0062457713?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">The Subtle Art Of Not Giving A Fuck</a></li>\n</ul>\n<p>Not only that, I got super into it and ordered five more books that I'm planning to get through next year. But I did feel like the every other month schedule was a little constricting, so I'll be more free with starting new books.</p>\n<h2>🏡 bradgarropy.com</h2>\n<p>I successfully completed a major overhaul of this website in February. I <a href=\"https://bradgarropy.com/blog/migrating-to-nextjs\" rel=\"noopener noreferrer\" target=\"_blank\">migrated to Next.js</a> and switched hosting over to Vercel. This resulted in faster builds, better web vitals insights, improved TypeScript support, and an awesome developer experience.</p>\n<p>However, I was captivated by <a href=\"https://remix.run\" rel=\"noopener noreferrer\" target=\"_blank\">Remix</a> and <a href=\"https://tailwindcss.com\" rel=\"noopener noreferrer\" target=\"_blank\">Tailwind</a> this year and I've already got branches in progress to migrate to those tools. So who knows, maybe we'll see another rewrite of my website in 2023!</p>\n<h2>📺 youtube</h2>\n<p>Although I only produced three videos in 2022, my channel crossed 1000 subscribers and reached almost 3000 watch hours. It turns out that getting monetized was harder than I thought, but I'm sure if I release a few more videos next year I'll get there.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/youtube-monetization.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/youtube-monetization.png\" alt=\"youtube monetization\" width=\"659\" height=\"291\"></a>\n<h2>💰 side income</h2>\n<p>I set a goal to reach $1000 of side income, and completely smashed it by earning $3400.40 last year! I earned money from multiple different sources such as:</p>\n<ul>\n<li><a href=\"https://bradgarropy.com/hire-me\" rel=\"noopener noreferrer\" target=\"_blank\">consulting</a></li>\n<li><a href=\"https://cottonbureau.com/people/brad-garropy\" rel=\"noopener noreferrer\" target=\"_blank\">t-shirt sales</a></li>\n<li><a href=\"https://github.com/sponsors/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">github sponsors</a></li>\n<li><a href=\"https://www.twitch.tv/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">live streaming</a></li>\n<li><a href=\"https://www.leveluptutorials.com/?ref=bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">affiliate links</a></li>\n</ul>\n<p>Creating multiple streams of side income will continue to be a major goal of mine in 2023, and I'd like to see the number of income streams and the total income grow year over year.</p>\n<h2>✅ productivity</h2>\n<p>This goal changed quite a bit through the year. I completely transitioned my productivity system to <a href=\"https://todoist.com\" rel=\"noopener noreferrer\" target=\"_blank\">Todoist</a> in early 2022, and even paid for the <em>Pro</em> plan. I was happy with Todoist, but then I moved from a <a href=\"https://store.google.com/product/pixel_6a\" rel=\"noopener noreferrer\" target=\"_blank\">Google Pixel 6</a> to an <a href=\"https://www.apple.com/iphone-14-pro\" rel=\"noopener noreferrer\" target=\"_blank\">iPhone 14 Pro</a> in December.</p>\n<p>I realized that the default <em>Reminders</em> application could cover all of my use cases for free. Now I've got a great productivity system in place with the <em>Reminders</em> app that syncs across all of my Apple devices.</p>\n<h2>🦉 duolingo (bonus)</h2>\n<p>Before our trip to <a href=\"https://bradgarropy.com/blog/disconnecting#trips\" rel=\"noopener noreferrer\" target=\"_blank\">Sayulita</a> I wanted to brush up on my Spanish, so I downloaded <a href=\"https://www.duolingo.com\" rel=\"noopener noreferrer\" target=\"_blank\">Duolingo</a>. Needless to say, I got super into it. Now almost a year later, I've practiced Spanish nearly every day, and I can have fluent conversations with my Mexican in-laws!</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/duolingo-stats.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/duolingo-stats.png\" alt=\"duolingo stats\" width=\"580\" height=\"188\"></a>\n<p>Because my children are bilingual, my ability to speak Spanish is becoming more and more important. That being said, this is a habit I want to continue for many years to come.</p>\n<h2>🎤 compressed.fm (bonus)</h2>\n<p>This year I was fortunate enough to be invited to co-host multiple episodes of <a href=\"https://www.compressed.fm\" rel=\"noopener noreferrer\" target=\"_blank\">Compressed.fm</a> with <a href=\"https://twitter.com/jamesqquick\" rel=\"noopener noreferrer\" target=\"_blank\">James Quick</a> and <a href=\"https://twitter.com/selfteachme\" rel=\"noopener noreferrer\" target=\"_blank\">Amy Dutton</a>. I absolutely loved being back on a podcast as a host, and valued the opportunity to work more closely with James and Amy.</p>\n<h2>🎬 conclusion</h2>\n<p>Although I failed to create any real <a href=\"#products\">products</a>, I felt like 2022 turned out to be a super successful year not only monetarily, but also because of the relationships I strengthened. I also loved how a few things popped up that really stuck with me through the year, like my dedication to Spanish.</p>\n<p>I feel like 2023 will cement my ability to generate income from side projects, and cement my ability to speak Spanish fluently. I also hope that 2023 is a year of redemption for me when it comes to building and selling web applications.</p>",
            "url": "https://bradgarropy.com/blog/2022-in-review",
            "title": "📅 2022 in review",
            "date_modified": "2023-01-11T00:00:00.000Z",
            "date_published": "2023-01-11T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "2023-in-review",
            "content_html": "<p>Every year I love to look back at the <a href=\"https://bradgarropy.com/blog/goals-for-2023\" rel=\"noopener noreferrer\" target=\"_blank\">goals</a> I set and see how I performed. It's that time of year again, so here we go.</p>\n<h2>👩‍❤️‍💋‍👨 marriage</h2>\n<p>Our goal of reading <a href=\"https://www.amazon.com/Seven-Principles-Making-Marriage-Work/dp/0553447718?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">two</a> <a href=\"https://www.amazon.com/Eight-Dates-Essential-Conversations-Lifetime/dp/1523504463?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">books</a> didn't work out very well, as we only got through half of the first one. But it did spark a lot of great conversation.</p>\n<p>I feel like <em>conversation</em> was a big theme this year. We spent so much time just talking, connecting, and sharing how we feel in a very honest way. It brought us closer, and I think we're a better couple for it!</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/gaby.jpg\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/gaby.jpg\" alt=\"gaby\" width=\"2316\" height=\"3088\"></a>\n<p>We did go to both <a href=\"https://www.suerteatx.com\" rel=\"noopener noreferrer\" target=\"_blank\">Suerte</a> and <a href=\"https://electricshuffleusa.com/austin\" rel=\"noopener noreferrer\" target=\"_blank\">Electric Shuffle</a>, as well as a ton of other great dates. We did day dates like working at a <a href=\"https://www.instagram.com/p/CwBoU9UNf4q\" rel=\"noopener noreferrer\" target=\"_blank\">coffee shop</a>, <a href=\"https://www.instagram.com/p/CwBpCoDtDae\" rel=\"noopener noreferrer\" target=\"_blank\">day drinking</a> downtown, and shopping at <a href=\"https://magnolia.com/visit\" rel=\"noopener noreferrer\" target=\"_blank\">Magnolia</a>. We also went out <a href=\"https://www.instagram.com/p/CzjazUQOxqcAMm0OSG_ZjQmCp9k30FDxoxIOiA0\" rel=\"noopener noreferrer\" target=\"_blank\">dancing</a> a lot this year, and really got back to our roots on the dance floor.</p>\n<p>Next year is our ten year anniversary, and we're hoping to do something <strong>big</strong> to celebrate.</p>\n<h2>🤝 relationships</h2>\n<p>I did a great job on this goal, as I definitely spent lots of time building relationships this year. I went out with old <a href=\"https://www.adobe.com\" rel=\"noopener noreferrer\" target=\"_blank\">Adobe</a> co-workers, played online games with friends that no longer live in Austin, and even started some new friendships that are turning out better than expected!</p>\n<p>I also started going to <a href=\"https://www.meetup.com/austin-js\" rel=\"noopener noreferrer\" target=\"_blank\">local</a> <a href=\"https://www.meetup.com/react-atx\" rel=\"noopener noreferrer\" target=\"_blank\">web</a> <a href=\"https://www.meetup.com/next-js-atx\" rel=\"noopener noreferrer\" target=\"_blank\">development</a> <a href=\"https://www.meetup.com/remix-austin\" rel=\"noopener noreferrer\" target=\"_blank\">meetups</a>. Getting involved in the community has introduced me to some new people, and made me feel more connected to other developers and companies around town.</p>\n<h2>🏡 bradgarropy.com</h2>\n<p>I successfully completed the migration of my website to <a href=\"https://remix.run\" rel=\"noopener noreferrer\" target=\"_blank\">Remix</a> and <a href=\"https://tailwindcss.com\" rel=\"noopener noreferrer\" target=\"_blank\">Tailwind</a>! It went very smooth except for one issue with caching on <a href=\"https://vercel.com\" rel=\"noopener noreferrer\" target=\"_blank\">Vercel</a>, but I got that all ironed out. I added post tags and related articles, and I've got a <a href=\"https://github.com/bradgarropy/bradgarropy.com/pull/290\" rel=\"noopener noreferrer\" target=\"_blank\">pull request</a> up for implementing an RSS feed. All of these features should increase discoverability of my posts from within and outside of my site.</p>\n<p>I leaned hard into <a href=\"https://remix.run\" rel=\"noopener noreferrer\" target=\"_blank\">Remix</a> this year. At work I used it to create the application my team is developing, and I made an internal template that can be quickly cloned as a starting point for new applications. So far it's been a great developer experience for everyone who's used it.</p>\n<h2>💰 side income</h2>\n<p>I'm very happy to say that with my sights set high at <code>$5,000</code> of side income, I just squeaked by that goal! I earned a total of <code>$5,172.15</code> of side income over the course of the past year. Here is how it breaks down.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th align=\"left\">Source</th><th align=\"right\">Amount</th></tr></thead><tbody><tr><td align=\"left\">Consulting</td><td align=\"right\">$5,017.07</td></tr><tr><td align=\"left\">T-Shirts</td><td align=\"right\">$107.97</td></tr><tr><td align=\"left\">Affiliate Links</td><td align=\"right\">$25.27</td></tr><tr><td align=\"left\">GitHub Sponsors</td><td align=\"right\">$11.00</td></tr><tr><td align=\"left\">Apps</td><td align=\"right\">$5.84</td></tr><tr><td align=\"left\">Twitch</td><td align=\"right\">$5.00</td></tr><tr><td align=\"left\"><strong>Total</strong></td><td align=\"right\"><strong>$5,172.15</strong></td></tr></tbody></table>\n<p>I'm surprised and humbled that the <a href=\"https://cottonbureau.com/people/brad-garropy\" rel=\"noopener noreferrer\" target=\"_blank\">curly bois</a> shirts are still selling. If you purchased one, <em>thank you</em>! I was also surprised that the <a href=\"https://play.google.com/store/apps/details?id=com.bradgarropy.murphy.twa\" rel=\"noopener noreferrer\" target=\"_blank\">Murphy</a> app earned some money on the Google Play Store.</p>\n<p>But unsurprisingly, the majority of my earnings came from consulting. Huge shoutout to <a href=\"https://www.jamesqquick.com\" rel=\"noopener noreferrer\" target=\"_blank\">James Quick</a> for providing me multiple opportunities to help him out! I'm already setup for a few consulting jobs next year with <a href=\"https://cloudinary.com\" rel=\"noopener noreferrer\" target=\"_blank\">Cloudinary</a>, which will get the ball rolling nicely.</p>\n<h2>👨🏼‍💻 saas</h2>\n<p>I'll be honest here. I just didn't have the energy, drive, or passion to make it happen this year. While I didn't meet my goal, I also don't consider this a total failure. Despite not making a SaaS application, I surpassed my <a href=\"https://bradgarropy/blog/2023-in-review#side-income\" rel=\"noopener noreferrer\" target=\"_blank\">side income</a> goal!</p>\n<h2>📺 youtube</h2>\n<p>I didn't publish any <a href=\"https://youtube.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">YouTube</a> videos this year, yet somehow my subscriber count grew to <code>1,471</code>, that's about a 50% increase! But my watch time actually decreased from last year down to <code>2,195</code> watch hours.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/monetization.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/monetization.png\" alt=\"monetization\" width=\"715\" height=\"361\"></a>\n<p>If I want to get monetized I really need to get going here. Full on tutorials felt daunting to me. Instead I might pivot and try something like <a href=\"https://www.youtube.com/@WebDevCody\" rel=\"noopener noreferrer\" target=\"_blank\">Web Dev Cody</a> does, where he just goes over code that he's already written, rather than rehearsing and giving a tutorial.</p>\n<h2>🦉 duolingo</h2>\n<p>Not even a question, I kept my <a href=\"https://www.duolingo.com\" rel=\"noopener noreferrer\" target=\"_blank\">Duolingo</a> streak going strong! As of today I've got a 680 day streak. I've been learning a ton of new vocabulary, and really drilling past and future tense. I've been feeling so much more confident talking to others lately, like my wife's family who is visiting from Mexico.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/duolingo.jpg\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/duolingo.jpg\" alt=\"streak\" width=\"1500\" height=\"1500\"></a>\n<h2>📚 books and games</h2>\n<p>I didn't read a single book this year, mostly because I felt a little burnt out from reading last year. I did, however, pick up a <a href=\"https://www.amazon.com/Nintendo-Switch-OLED-Model-White-Joy/dp/B098RKWHHZ?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">Nintendo Switch OLED</a> in May and got super sucked into gaming. I explored a bunch of different games, as it was my first time owning a Nintendo system.</p>\n<ul>\n<li><a href=\"https://www.amazon.com/Mario-Kart-Deluxe-Nintendo-Digital/dp/B01N1037CV?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">Mario Kart 8</a></li>\n<li><a href=\"https://www.amazon.com/Super-Mario-Bros-TM-Wonder-Nintendo-Version/dp/B0C8VHZR14?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">Super Mario Wonder</a></li>\n<li><a href=\"https://www.amazon.com/Super-Smash-Bros-Ultimate-Nintendo/dp/B01N5OKGLH?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">Super Smash Bros Ultimate</a></li>\n<li><a href=\"https://www.amazon.com/Legend-Zelda-Breath-Wild-Nintendo-Switch/dp/B097B2YWFX?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">Zelda: Tears of the Kingom</a></li>\n<li><a href=\"https://www.amazon.com/Takes-Two-Nintendo-Switch/dp/B0BDTF3NK4?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">It Takes Two</a></li>\n<li><a href=\"https://www.amazon.com/Hades-Limited-Nintendo-Switch/dp/B08X2K6B1Z?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">Hades</a></li>\n</ul>\n<p>Mostly I just loved how flexible the Switch was. It could play my favorite indie games, or I could play with the kids. It worked beautifully on an airplane, or on the couch. Not to mention, all of the games felt so easy to pick up and play.</p>\n<h2>🎬 conclusion</h2>\n<p>More than anything, this year taught me balance. It taught me that it was okay not to grind too hard, and things still worked out for the best. Sustainability in making continued progress towards my goals is more important than how fast I reach them.</p>\n<p>What about y'all? Did you accomplish your goals for 2023? Let me know on <a href=\"https://twitter.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">Twitter</a>!</p>",
            "url": "https://bradgarropy.com/blog/2023-in-review",
            "title": "📅 2023 in review",
            "date_modified": "2023-12-18T00:00:00.000Z",
            "date_published": "2023-12-18T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "adobe-lunch",
            "content_html": "<p>You're sitting at your desk around 11:45AM when a coworker strolls by. He tells you that some of the team is going to lunch and asks if you want to join. Of course! Everyone is walking out the door when someone asks the dreaded question.</p>\n<blockquote>\n<p>So what do ya'll want to eat?</p>\n</blockquote>\n<p>That's where <a href=\"https://adobe-lunch.netlify.com\" rel=\"noopener noreferrer\" target=\"_blank\">Adobe Lunch</a> comes in! This <em>\"Tinder for restaurants\"</em> app randomly suggests places to eat within walking distance of the office. Based on the price, rating, and menu options you can reject suggestions until you find what you like. Once you accept, you're presented with walking directions to your restaurant of choice.</p>\n<iframe class=\"aspect-video w-full rounded my-8\" title=\"ZL4NA9mXns8\" src=\"https://www.youtube-nocookie.com/embed/ZL4NA9mXns8\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen>\n        </iframe>\n<p><a href=\"https://adobe-lunch.netlify.com\" rel=\"noopener noreferrer\" target=\"_blank\">Adobe Lunch</a> is the first side project that I really drove to the finish line. I took a <a href=\"https://jamstack.org\" rel=\"noopener noreferrer\" target=\"_blank\">Jamstack</a> approach to building the site, so I chose technologies that I'm very comfortable with.</p>\n<ul>\n<li><a href=\"https://gatsbyjs.org\" rel=\"noopener noreferrer\" target=\"_blank\">Gatsby</a></li>\n<li><a href=\"https://reactjs.org\" rel=\"noopener noreferrer\" target=\"_blank\">React</a></li>\n<li><a href=\"https://styled-components.com\" rel=\"noopener noreferrer\" target=\"_blank\">styled-components</a></li>\n<li><a href=\"https://cloud.google.com/maps-platform\" rel=\"noopener noreferrer\" target=\"_blank\">Google Maps</a></li>\n<li><a href=\"https://developer.foursquare.com\" rel=\"noopener noreferrer\" target=\"_blank\">Foursquare</a></li>\n<li><a href=\"https://airtable.com\" rel=\"noopener noreferrer\" target=\"_blank\">Airtable</a></li>\n<li><a href=\"https://netlify.com\" rel=\"noopener noreferrer\" target=\"_blank\">Netlify</a></li>\n<li><a href=\"https://cloud.google.com/scheduler\" rel=\"noopener noreferrer\" target=\"_blank\">Google Cloud Scheduler</a></li>\n</ul>\n<p>I focused on speed and simplicity for the first release to get user feedback as early as possible. This feedback will guide the project road map. I already have plenty of ideas of my own which I'll share in another post soon.</p>\n<p>So please give <a href=\"https://adobe-lunch.netlify.com\" rel=\"noopener noreferrer\" target=\"_blank\">Adobe Lunch</a> a try and <a href=\"https://twitter.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">let me know</a> what you think! I'm eagerly awaiting any <a href=\"https://github.com/bradgarropy/adobe-lunch/issues\" rel=\"noopener noreferrer\" target=\"_blank\">issues</a> or <a href=\"https://github.com/bradgarropy/adobe-lunch/pulls\" rel=\"noopener noreferrer\" target=\"_blank\">pull requests</a>!</p>",
            "url": "https://bradgarropy.com/blog/adobe-lunch",
            "title": "🥪 adobe lunch",
            "date_modified": "2020-01-14T00:00:00.000Z",
            "date_published": "2020-01-14T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "amorty-morty-powered-loan-amortization-calculator",
            "content_html": "<p>A few weeks ago my wife and I bought a new family car, a grey Ford Expedition, which I call <em>the tank</em>. Buying a car is always super stressful, and the financial negotiations are high pressure and go by way too fast.</p>\n<h2>origin story</h2>\n<p>After it was all over with, I wished I had a tool help make faster financial decisions during the negotiations. So with my newfound web development skills I sat down at the computer and made my own loan amortization calculator called <a href=\"https://amorty.netlify.com/\" rel=\"noopener noreferrer\" target=\"_blank\">Amorty</a>. I knew I had to come up with a catchy name, and I was cracking myself up with the Rick &#x26; Morty reference, so I stuck with it.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/amorty.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/amorty.png\" alt=\"Amorty\" width=\"1613\" height=\"887\"></a>\n<h2>technologies</h2>\n<p>It was an easy decision to use <a href=\"https://www.gatsbyjs.org/\" rel=\"noopener noreferrer\" target=\"_blank\">Gatsby</a> and <a href=\"https://reactjs.org/\" rel=\"noopener noreferrer\" target=\"_blank\">React</a> to create this static site. But my hardest choice was deciding if I was going to do the loan amortization calculations myself, or use a library. Ultimately, I went with a library called <a href=\"https://github.com/eithanshavit/amortization\" rel=\"noopener noreferrer\" target=\"_blank\">amortization</a> which did basically everything I needed it to. I wish it had an option to enter the duration in months, but that's something I can add to Amorty myself, <em>or maybe even create a PR for amortization!</em></p>\n<p>I also decided to use a different library for date manipulation. Usually I would reach for <a href=\"http://momentjs.com/\" rel=\"noopener noreferrer\" target=\"_blank\">Moment.js</a> but instead I used the <a href=\"https://date-fns.org/\" rel=\"noopener noreferrer\" target=\"_blank\">date-fns</a> library which is much smaller than Moment.js and it's immutable. I highly recommend using it next time you are working with dates.</p>\n<blockquote>\n<p>There is a new library from the folks who created Moment called <a href=\"https://moment.github.io/luxon/\" rel=\"noopener noreferrer\" target=\"_blank\">Luxon</a> which works much like date-fns. It's also worth a look.</p>\n</blockquote>\n<h2>more features</h2>\n<p>While I'm happy with the basic functionality at this point and time, there's lots that could be done.</p>\n<ul>\n<li><a href=\"https://github.com/bradgarropy/amorty/issues/6\" rel=\"noopener noreferrer\" target=\"_blank\">#6 remove calculate button</a></li>\n<li><a href=\"https://github.com/bradgarropy/amorty/issues/11\" rel=\"noopener noreferrer\" target=\"_blank\">#11 duration in months or years</a></li>\n<li><a href=\"https://github.com/bradgarropy/amorty/issues/12\" rel=\"noopener noreferrer\" target=\"_blank\">#12 additional payments</a></li>\n<li><a href=\"https://github.com/bradgarropy/amorty/issues/13\" rel=\"noopener noreferrer\" target=\"_blank\">#13 add graphs</a></li>\n</ul>\n<p>If you've got any other ideas you should <a href=\"https://github.com/bradgarropy/amorty/issues\" rel=\"noopener noreferrer\" target=\"_blank\">create an issue</a>!</p>",
            "url": "https://bradgarropy.com/blog/amorty-morty-powered-loan-amortization-calculator",
            "title": "💳 amorty - morty powered loan amortization calculator",
            "date_modified": "2018-09-14T00:00:00.000Z",
            "date_published": "2018-09-14T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "ask-me-anything",
            "content_html": "<p>I've been inspired by <a href=\"https://kentcdodds.com\" rel=\"noopener noreferrer\" target=\"_blank\">Kent C. Dodds</a> lately to grow my online presence as a developer. My favorite thing about him is how he makes himself available to folks who are looking for advice or help.</p>\n<p>So I created an AMA platform on <a href=\"https://github.com\" rel=\"noopener noreferrer\" target=\"_blank\">Github</a> similar to his to answer your questions. This idea originated from <a href=\"https://sindresorhus.com\" rel=\"noopener noreferrer\" target=\"_blank\">Sindre Sorhus</a> (whose website I love 💜), who also curates an <a href=\"https://github.com/sindresorhus/awesome#readme\" rel=\"noopener noreferrer\" target=\"_blank\">awesome</a> list of <a href=\"https://github.com/sindresorhus/amas#readme\" rel=\"noopener noreferrer\" target=\"_blank\">AMAs</a>.</p>\n<p>So what are you waiting for, <a href=\"https://github.com/bradgarropy/ama#readme\" rel=\"noopener noreferrer\" target=\"_blank\">ask me anything</a>!</p>",
            "url": "https://bradgarropy.com/blog/ask-me-anything",
            "title": "❔ ask me anything",
            "date_modified": "2019-02-13T00:00:00.000Z",
            "date_published": "2019-02-13T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "bg-codes",
            "content_html": "<p>After doing a detailed comparison of <a href=\"https://bradgarropy.com/blog/youtube-vs-twitch\" rel=\"noopener noreferrer\" target=\"_blank\">youtube vs twitch</a> for streaming, I decided that <a href=\"https://twitch.tv\" rel=\"noopener noreferrer\" target=\"_blank\">Twitch</a> was the right place for a developer like myself to set up shop. So here it is, my shiny new <a href=\"https://twitch.tv/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">Twitch channel</a>!</p>\n<iframe class=\"aspect-video w-full rounded my-8\" src=\"https://player.twitch.tv?channel=bradgarropy&#x26;parent=bradgarropy.com\" frameborder=\"0\" scrolling=\"no\" allowfullscreen>\n        </iframe>\n<p>I put a lot of work into the branding, and even <a href=\"https://twitch.tv/videos/603427759\" rel=\"noopener noreferrer\" target=\"_blank\">streamed about it</a>. I'm very happy with the way it turned out, and dare I say there's a chance I could be getting better at design.</p>\n<p>Now as some of you know I have a wife and kids, and I'm also dedicated to my fitness. This makes setting a streaming schedule difficult, but here are my <em>available</em> times. This does not mean I will guaranteed be online at each one of these times, but I am typically hitting at least four of these sessions per week.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th align=\"left\">Day</th><th align=\"right\">Time</th></tr></thead><tbody><tr><td align=\"left\">Monday</td><td align=\"right\"><code>10:00PM</code></td></tr><tr><td align=\"left\">Tuesday</td><td align=\"right\"><code>10:00PM</code></td></tr><tr><td align=\"left\">Wednesday</td><td align=\"right\"><code>OFF</code></td></tr><tr><td align=\"left\">Thursday</td><td align=\"right\"><code>10:00PM</code></td></tr><tr><td align=\"left\">Friday</td><td align=\"right\"><code>10:00PM</code></td></tr><tr><td align=\"left\">Saturday</td><td align=\"right\"><code>1:00PM</code></td></tr><tr><td align=\"left\">Sunday</td><td align=\"right\"><code>1:00PM</code></td></tr></tbody></table>\n<p>That being said, be sure to follow and turn on notifications so you know when I'm hopping on! I'll see y'all in my <a href=\"https://twitch.tv/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">Twitch chat</a>!</p>",
            "url": "https://bradgarropy.com/blog/bg-codes",
            "title": "👨🏼‍💻 bg codes",
            "date_modified": "2020-05-04T00:00:00.000Z",
            "date_published": "2020-05-04T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "call-webhooks-from-github-actions",
            "content_html": "<p>Often I need to <em>make things to happen</em> in a GitHub Action by calling out to an external service. For example, I want to rebuild a website with a <a href=\"https://docs.netlify.com/configure-builds/build-hooks\" rel=\"noopener noreferrer\" target=\"_blank\">Netlify build hook</a> or a <a href=\"https://vercel.com/docs/concepts/git/deploy-hooks\" rel=\"noopener noreferrer\" target=\"_blank\">Vercel deploy hook</a>.</p>\n<p>While you could write a bash script that executes a <code>curl</code> command, I find it much easier to use the <a href=\"https://github.com/joelwmale/webhook-action\" rel=\"noopener noreferrer\" target=\"_blank\">webhook-action</a> by <a href=\"https://github.com/joelwmale\" rel=\"noopener noreferrer\" target=\"_blank\">Joel Male</a>. Include it in a workflow step with the <code>uses</code> key, and add inputs under the <code>with</code> key to specify details about the HTTP request.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"yaml\" data-theme=\"Shades of Purple\"><code data-language=\"yaml\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FAD000\">jobs</span><span style=\"color:#E1EFFF\">:</span></span>\n<span data-line=\"\"><span style=\"color:#FAD000\">    webhook</span><span style=\"color:#E1EFFF\">:</span></span>\n<span data-line=\"\"><span style=\"color:#FAD000\">        name</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">☎️ call webhook</span><span style=\"color:#92FC79\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#FAD000\">        runs-on</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#A5FF90\"> ubuntu-latest</span></span>\n<span data-line=\"\"><span style=\"color:#FAD000\">        steps</span><span style=\"color:#E1EFFF\">:</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">            -</span><span style=\"color:#FAD000\"> name</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">🎣 webhook</span><span style=\"color:#92FC79\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#FAD000\">              uses</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#A5FF90\"> joelwmale/webhook-action@2.1.0</span></span>\n<span data-line=\"\"><span style=\"color:#FAD000\">              with</span><span style=\"color:#E1EFFF\">:</span></span>\n<span data-line=\"\"><span style=\"color:#FAD000\">                  url</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#A5FF90\"> https://example.com/api/webhook</span></span>\n<span data-line=\"\"><span style=\"color:#FAD000\">                  body</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#92FC79\"> '</span><span style=\"color:#A5FF90\">{\"name\": \"Brad\"}</span><span style=\"color:#92FC79\">'</span></span>\n<span data-line=\"\"><span style=\"color:#FAD000\">                  headers</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#92FC79\"> '</span><span style=\"color:#A5FF90\">{\"authorization\": \"abc123\"}</span><span style=\"color:#92FC79\">'</span></span></code></pre></figure>\n<p>I did run into one snag though. The <code>body</code> and <code>headers</code> fields have to be proper <code>json</code>, which means the keys and values should be wrapped in double quotes. If you're trying to <a href=\"https://docs.github.com/en/actions/security-guides/encrypted-secrets#using-encrypted-secrets-in-a-workflow\" rel=\"noopener noreferrer\" target=\"_blank\">use a secret</a> in your workflow, they cannot be inside of single quotes. That's because <code>bash</code> preserves the literal values of characters within <a href=\"https://www.gnu.org/software/bash/manual/html_node/Single-Quotes.html\" rel=\"noopener noreferrer\" target=\"_blank\">single quotes</a>. In order to get this working, I had to disable <a href=\"https://prettier.io/\" rel=\"noopener noreferrer\" target=\"_blank\">prettier</a> and escape the double quotes.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"yaml\" data-theme=\"Shades of Purple\"><code data-language=\"yaml\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#B362FF;font-style:italic\"># prettier-ignore</span></span>\n<span data-line=\"\"><span style=\"color:#FAD000\">headers</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">{</span><span style=\"color:#FF628C\">\\\"</span><span style=\"color:#A5FF90\">authorization</span><span style=\"color:#FF628C\">\\\"</span><span style=\"color:#A5FF90\">: </span><span style=\"color:#FF628C\">\\\"</span><span style=\"color:#A5FF90\">${{secrets.TOKEN}}</span><span style=\"color:#FF628C\">\\\"</span><span style=\"color:#A5FF90\">}</span><span style=\"color:#92FC79\">\"</span></span></code></pre></figure>",
            "url": "https://bradgarropy.com/blog/call-webhooks-from-github-actions",
            "title": "🪝 call webhooks from github actions",
            "date_modified": "2022-10-06T00:00:00.000Z",
            "date_published": "2022-10-06T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "chau-codes-podcast",
            "content_html": "<p>I'd been seeing a lot of <a href=\"https://twitter.com/Chau_codes\" rel=\"noopener noreferrer\" target=\"_blank\">Justin Chau</a> around the internet and really liked the what he was sharing. It's rare to see developers producing content early in their career, but Justin knows what's up.</p>\n<p>I noticed he was into some of the same things as me, like working out, gaming, and of course web development. So I took a long shot and sent him a video suggesting we do a podcast together to discuss my self-taught background and my latest project, <a href=\"https://play.google.com/store/apps/details?id=com.bradgarropy.murphy.twa\" rel=\"noopener noreferrer\" target=\"_blank\">MURPHY</a>.</p>\n<p>And what do you know, it worked! After only a few interactions on Twitter and Discord, he agreed to have me as a guest on his <a href=\"https://anchor.fm/justinchau/episodes/18-this-dev--Brad-Garropy---Self-Taught--New-Technologies-and-Side-Projects-em8785\" rel=\"noopener noreferrer\" target=\"_blank\">podcast</a>.</p>\n<iframe class=\"aspect-video w-full rounded my-8\" title=\"A85MnRidA2A\" src=\"https://www.youtube-nocookie.com/embed/A85MnRidA2A\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen>\n        </iframe>\n<p>He was a great host, and the conversation felt natural and free flowing. We covered my transition into web development, job hunting tips, the benefits of streaming, the reality of coding, and the rise in popularity of <a href=\"https://nextjs.org\" rel=\"noopener noreferrer\" target=\"_blank\">Next.js</a>.</p>\n<p>Even after an hour of talking, I felt like there was so much more we didn't have time to explore. So many thanks to Justin for having me on! Go checkout his <a href=\"https://anchor.fm/justinchau\" rel=\"noopener noreferrer\" target=\"_blank\">podcast</a>, <a href=\"https://instagram.com/chau_codes\" rel=\"noopener noreferrer\" target=\"_blank\">Instagram</a>, and <a href=\"https://youtube.com/channel/UCBCMR6JnwHua6NfN5UhAsfg\" rel=\"noopener noreferrer\" target=\"_blank\">YouTube</a>. And maybe in the future he'll have me on again, or if I ever get my own podcast going, I'll have him on.</p>",
            "url": "https://bradgarropy.com/blog/chau-codes-podcast",
            "title": "🎤 chau codes podcast",
            "date_modified": "2020-11-09T00:00:00.000Z",
            "date_published": "2020-11-09T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "cleaning-up-jest-mocks",
            "content_html": "<p>In <a href=\"https://jestjs.io\" rel=\"noopener noreferrer\" target=\"_blank\">jest</a>, there are three different ways to clean up a <a href=\"https://jestjs.io/docs/mock-function-api\" rel=\"noopener noreferrer\" target=\"_blank\">mock function</a>.</p>\n<ul>\n<li><a href=\"https://jestjs.io/docs/mock-function-api#mockfnmockclear\" rel=\"noopener noreferrer\" target=\"_blank\">mockClear</a></li>\n<li><a href=\"https://jestjs.io/docs/mock-function-api#mockfnmockreset\" rel=\"noopener noreferrer\" target=\"_blank\">mockReset</a></li>\n<li><a href=\"https://jestjs.io/docs/mock-function-api#mockfnmockrestore\" rel=\"noopener noreferrer\" target=\"_blank\">mockRestore</a></li>\n</ul>\n<p>Each different method cleans up a different subset of functionality, with <code>mockClear</code> being the least destructive and <code>mockReset</code> being the most destructive.</p>\n<h2>mock clear</h2>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"javascript\" data-theme=\"Shades of Purple\"><code data-language=\"javascript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#9EFFFF\">mockFn</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">mockClear</span><span style=\"color:#E1EFFF\">()</span></span></code></pre></figure>\n<p>Running this function removes all the statistics about invocations of the mock function. It sets all of the properties to their default value of <code>[]</code>.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"javascript\" data-theme=\"Shades of Purple\"><code data-language=\"javascript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#B362FF;font-style:italic\">// invocation statistics</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">mockFn</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FFEE80\">mock</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">calls</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#E1EFFF\"> []</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">mockFn</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FFEE80\">mock</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">results</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#E1EFFF\"> []</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">mockFn</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FFEE80\">mock</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">instances</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#E1EFFF\"> []</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">mockFn</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FFEE80\">mock</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">contexts</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#E1EFFF\"> []</span></span></code></pre></figure>\n<p>Typically you would want to run <code>mockClear</code> between tests that all require the same mock functionality. This allows you to start each test with a clean slate when it comes to invocations so you can make accurate assertions on how many times functions were called with what data.</p>\n<h2>mock reset</h2>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"javascript\" data-theme=\"Shades of Purple\"><code data-language=\"javascript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#9EFFFF\">mockFn</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">mockReset</span><span style=\"color:#E1EFFF\">()</span></span></code></pre></figure>\n<p>Executing this method resets all of the invocation statistics, and also gets rid of any mocked functionality, like return values or implementations.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"javascript\" data-theme=\"Shades of Purple\"><code data-language=\"javascript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#B362FF;font-style:italic\">// invocation statistics</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">mockFn</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FFEE80\">mock</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">calls</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#E1EFFF\"> []</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">mockFn</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FFEE80\">mock</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">results</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#E1EFFF\"> []</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">mockFn</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FFEE80\">mock</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">instances</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#E1EFFF\"> []</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">mockFn</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FFEE80\">mock</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">contexts</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#E1EFFF\"> []</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B362FF;font-style:italic\">// mock functionality</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">mockFn</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">mockReturnValue</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#FF628C\">undefined</span><span style=\"color:#E1EFFF\">)</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">mockFn</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">mockResolvedValue</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#FF628C\">undefined</span><span style=\"color:#E1EFFF\">)</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">mockFn</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">mockRejectedValue</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#FF628C\">undefined</span><span style=\"color:#E1EFFF\">)</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">mockFn</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">mockImplementation</span><span style=\"color:#E1EFFF\">(()</span><span style=\"color:#FAD000\"> =></span><span style=\"color:#FF628C\"> undefined</span><span style=\"color:#E1EFFF\">)</span></span></code></pre></figure>\n<p>You could use <code>mockReset</code> in between tests that require different data returned from a mock function. Each test would then declare what data it expects from the mock to make assertions later on.</p>\n<h2>mock restore</h2>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"javascript\" data-theme=\"Shades of Purple\"><code data-language=\"javascript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#9EFFFF\">mockFn</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">mockRestore</span><span style=\"color:#E1EFFF\">()</span></span></code></pre></figure>\n<p>Executing this function acts like you never called <code>jest.mock()</code> in the first place. It <em>restores</em> the original functionality of the method, wipes any mock functionality, and removes all invocation statistics.</p>\n<p>Restoring mocks can be helpful when some tests require mock functionality and others do not.</p>",
            "url": "https://bradgarropy.com/blog/cleaning-up-jest-mocks",
            "title": "🧼 cleaning up jest mocks",
            "date_modified": "2022-05-15T00:00:00.000Z",
            "date_published": "2022-05-15T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "cloudflare-worker-link-tree",
            "content_html": "<p>I've heard a lot about <a href=\"https://workers.cloudflare.com\" rel=\"noopener noreferrer\" target=\"_blank\">Cloudflare Workers</a>, but until recently I've never created one. Today I built and deployed my first worker, so I'd like to teach you how to do the same thing!</p>\n<h2>🤔 what are cloudflare workers?</h2>\n<p><a href=\"https://workers.cloudflare.com\" rel=\"noopener noreferrer\" target=\"_blank\">Cloudflare Workers</a> is a globally distributed, auto-scaling severless application platform where you can execute your application code in many different languages. It comes with a <a href=\"https://dash.cloudflare.com\" rel=\"noopener noreferrer\" target=\"_blank\">web dashboard</a> and a <a href=\"https://developers.cloudflare.com/workers/cli-wrangler\" rel=\"noopener noreferrer\" target=\"_blank\">cli tool</a> for easy management of your workers.</p>\n<h2>👨🏼‍💻 building a link tree</h2>\n<p>The first worker I built was a clone of <a href=\"https://linktr.ee\" rel=\"noopener noreferrer\" target=\"_blank\">linktree</a>, but with a little added flare. I'll walk you through how to build a simpler version of this link tree.</p>\n<p>All of the code is located on <a href=\"https://github.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">GitHub</a> in the <a href=\"https://github.com/bradgarropy/cloudflare-link-tree\" rel=\"noopener noreferrer\" target=\"_blank\">cloudflare-link-tree</a> repository.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/link-tree.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/link-tree.png\" alt=\"link tree\" width=\"927\" height=\"1190\"></a>\n<p>Our application will have two endpoints. <code>/links</code> will return raw <code>json</code> data for all of our links, and any other route will return a rendered HTML version of the link tree.</p>\n<h3>create a cloudflare account</h3>\n<p>Before we get started, you'll have to <a href=\"https://dash.cloudflare.com/sign-up\" rel=\"noopener noreferrer\" target=\"_blank\">sign up</a> for a Cloudflare account. Don't worry, there's a great <a href=\"https://workers.cloudflare.com/#plans\" rel=\"noopener noreferrer\" target=\"_blank\">free tier</a> and you don't have to hand over a credit card to get started.</p>\n<h3>install the workers cli</h3>\n<p>Cloudflare made it easy to manage your workers and test them locally with a cli tool called <a href=\"https://developers.cloudflare.com/workers/cli-wrangler\" rel=\"noopener noreferrer\" target=\"_blank\">wrangler</a>. Install it globally as shown below.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"zsh\" data-theme=\"Shades of Purple\"><code data-language=\"zsh\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FAD000\">npm</span><span style=\"color:#A5FF90\"> install</span><span style=\"color:#FF628C\"> --global</span><span style=\"color:#A5FF90\"> @cloudflare/wrangler</span></span></code></pre></figure>\n<p>Then, login to Cloudflare from <code>wrangler</code>.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"zsh\" data-theme=\"Shades of Purple\"><code data-language=\"zsh\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FAD000\">wrangler</span><span style=\"color:#A5FF90\"> login</span></span></code></pre></figure>\n<p>Now you're ready to start building!</p>\n<h3>generate a worker</h3>\n<p>While you can start from scratch, Cloudflare provides lots of <a href=\"https://developers.cloudflare.com/workers/get-started/quickstarts\" rel=\"noopener noreferrer\" target=\"_blank\">starter templates</a> to get a worker up and running quickly. These templates are simply GitHub repositories, so you can even create your own.</p>\n<p>To begin our link tree, let's use <code>wrangler</code> to generate a basic <a href=\"https://github.com/cloudflare/worker-template\" rel=\"noopener noreferrer\" target=\"_blank\">worker template</a>.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"zsh\" data-theme=\"Shades of Purple\"><code data-language=\"zsh\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FAD000\">wrangler</span><span style=\"color:#A5FF90\"> generate</span><span style=\"color:#A5FF90\"> link-tree</span><span style=\"color:#A5FF90\"> https://github.com/cloudflare/worker-template</span></span></code></pre></figure>\n<p>Then, head over to the directory and install the dependencies.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"zsh\" data-theme=\"Shades of Purple\"><code data-language=\"zsh\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FF9D00\">cd</span><span style=\"color:#A5FF90\"> link-tree</span></span>\n<span data-line=\"\"><span style=\"color:#FAD000\">npm</span><span style=\"color:#A5FF90\"> install</span></span></code></pre></figure>\n<p>Finally, we'll modify the <code>wrangler.toml</code> file to use <code>webpack</code> as a build tool, as well as add our account id to connect the worker with Cloudflare. If you can't find your account id, run <code>wrangler whoami</code> to see it.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"toml\" data-theme=\"Shades of Purple\"><code data-language=\"toml\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#E1EFFF\">name</span><span style=\"color:#E1EFFF\"> =</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">link-tree</span><span style=\"color:#92FC79\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">type</span><span style=\"color:#E1EFFF\"> =</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">webpack</span><span style=\"color:#92FC79\">\"</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">account_id</span><span style=\"color:#E1EFFF\"> =</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">&#x3C;ACCOUNT_ID></span><span style=\"color:#92FC79\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">workers_dev</span><span style=\"color:#E1EFFF\"> =</span><span style=\"color:#FF628C\"> true</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">route</span><span style=\"color:#E1EFFF\"> =</span><span style=\"color:#92FC79\"> \"\"</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">zone_id</span><span style=\"color:#E1EFFF\"> =</span><span style=\"color:#92FC79\"> \"\"</span></span></code></pre></figure>\n<p>We're all set for local development and ready for deployments to Cloudflare Workers.</p>\n<h3>link tree data</h3>\n<p>Before we can get to implenting the link tree, we need some data to work with. Create a <code>links.js</code> file and add some links to share. I've included an example of mine below.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"javascript\" data-theme=\"Shades of Purple\"><code data-language=\"javascript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FF9D00\">const</span><span style=\"color:#9EFFFF\"> links </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#E1EFFF\"> [</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    {</span><span style=\"color:#80FFBB\">name</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">Website</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">,</span><span style=\"color:#80FFBB\"> url</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">bradgarropy.com</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">},</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    {</span><span style=\"color:#80FFBB\">name</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">GitHub</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">,</span><span style=\"color:#80FFBB\"> url</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">https://github.com/bradgarropy</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">},</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    {</span><span style=\"color:#80FFBB\">name</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">YouTube</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">,</span><span style=\"color:#80FFBB\"> url</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">https://youtube.com/bradgarropy</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">},</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">]</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">export</span><span style=\"color:#FF9D00\"> default</span><span style=\"color:#9EFFFF\"> links</span></span></code></pre></figure>\n<h3>routing requests</h3>\n<p>You can think of workers like a miniature web application that lives on a CDN. Web applications typically handle many different kinds of requests across many different endpoints. So let's include a router to lay out the infrastructure of our worker.</p>\n<p>I chose <a href=\"https://github.com/kwhitley/itty-router\" rel=\"noopener noreferrer\" target=\"_blank\">itty-router</a> because it was specifically designed for use with Cloudflare Workers. Install it by using the command below.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"zsh\" data-theme=\"Shades of Purple\"><code data-language=\"zsh\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FAD000\">npm</span><span style=\"color:#A5FF90\"> install</span><span style=\"color:#A5FF90\"> itty-router</span></span></code></pre></figure>\n<p>Now we can define our two application routes. The first will be <code>/links</code>, which will serve the raw link data we defined in <code>links.js</code>. The second will be <code>*</code>, which means any other endpoint, and will return our rendered link tree.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"javascript\" data-theme=\"Shades of Purple\"><code data-language=\"javascript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FF9D00\">import</span><span style=\"color:#E1EFFF\"> {</span><span style=\"color:#9EFFFF\">Router</span><span style=\"color:#E1EFFF\">}</span><span style=\"color:#FF9D00;font-style:italic\"> from</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">itty-router</span><span style=\"color:#92FC79\">\"</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">const</span><span style=\"color:#9EFFFF\"> router </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#FAD000\"> Router</span><span style=\"color:#E1EFFF\">()</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">router</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">get</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">/links</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">,</span><span style=\"color:#E1EFFF\"> ()</span><span style=\"color:#FAD000\"> =></span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    return</span><span style=\"color:#FF9D00\"> new</span><span style=\"color:#FAD000\"> Response</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">GET /links</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">)</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">})</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">router</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">get</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">*</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">,</span><span style=\"color:#E1EFFF\"> ()</span><span style=\"color:#FAD000\"> =></span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    return</span><span style=\"color:#FF9D00\"> new</span><span style=\"color:#FAD000\"> Response</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">GET *</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">)</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">})</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FAD000\">addEventListener</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">fetch</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">,</span><span style=\"color:#9EFFFF\"> event </span><span style=\"color:#FAD000\">=></span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">    event</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">respondWith</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#9EFFFF\">router</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">handle</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#9EFFFF\">event</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">request</span><span style=\"color:#E1EFFF\">))</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">})</span></span></code></pre></figure>\n<p>The call to <code>addEventListener</code> is standard boilerplate for listening to events in a worker. You can see that we're responding with the result from our router's handler method.</p>\n<h3>spin up a development environment</h3>\n<p>Let's take a minute here to ensure our two routes are working and learn how to start our development server. Run the following command to start a local instance of our worker.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"zsh\" data-theme=\"Shades of Purple\"><code data-language=\"zsh\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FAD000\">wrangler</span><span style=\"color:#A5FF90\"> dev</span></span></code></pre></figure>\n<p>Now we've got a server running our application at <code>127.0.0.1:8787</code>. Try the following endpoints and double check that the correct test responses are coming back.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>url</th><th>response</th></tr></thead><tbody><tr><td><code>127.0.0.1:8787</code></td><td><code>GET *</code></td></tr><tr><td><code>127.0.0.1:8787/links</code></td><td><code>GET /links</code></td></tr></tbody></table>\n<p>You can do this in a browser or with an API tool like <a href=\"https://insomnia.rest\" rel=\"noopener noreferrer\" target=\"_blank\">Insomnia</a> or <a href=\"https://postman.com\" rel=\"noopener noreferrer\" target=\"_blank\">Postman</a>.</p>\n<h3>link json api</h3>\n<p>The <code>/links</code> endpoint should return our links as raw <code>json</code> data. We can use the router to handle this endpoint with the <code>router.get()</code> method. Inside of the route handler, we create a new response, where we stringify the <code>links</code> data and send it back as <code>json</code> in the body.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"javascript\" data-theme=\"Shades of Purple\"><code data-language=\"javascript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FF9D00\">import</span><span style=\"color:#9EFFFF\"> links </span><span style=\"color:#FF9D00;font-style:italic\">from</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">./links</span><span style=\"color:#92FC79\">\"</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">router</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">get</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">/links</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">,</span><span style=\"color:#E1EFFF\"> ()</span><span style=\"color:#FAD000\"> =></span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    const</span><span style=\"color:#9EFFFF\"> response </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#FF9D00\"> new</span><span style=\"color:#FAD000\"> Response</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#9EFFFF\">JSON</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">stringify</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#9EFFFF\">links</span><span style=\"color:#E1EFFF\">),</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#80FFBB\">        headers</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#E1EFFF\"> {</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">content-type</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">application/json</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">},</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    })</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    return</span><span style=\"color:#9EFFFF\"> response</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">})</span></span></code></pre></figure>\n<p>Open a browser and check that <code>127.0.0.1:8787/links</code> is returning the <code>json</code> data as expected.</p>\n<h3>link tree template</h3>\n<p>All other routes should render our link tree to HTML. I've placed a static HTML template <a href=\"https://static-links-page.signalnerve.workers.dev\" rel=\"noopener noreferrer\" target=\"_blank\">here</a>, which we can fetch from our worker, and then modify the response to include our <code>links</code>. Let's start by returning the template from all other routes.</p>\n<p>Again we use the <code>router.get()</code> method, but specify <code>*</code> to indicate all routes. Then we can use the <code>fetch</code> API to grab the static HTML template. In addition to <code>fetch</code>, Cloudflare Workers provide many other <a href=\"https://developers.cloudflare.com/workers/runtime-apis\" rel=\"noopener noreferrer\" target=\"_blank\">Runtime APIs</a> for you to leverage.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"javascript\" data-theme=\"Shades of Purple\"><code data-language=\"javascript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#9EFFFF\">router</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">get</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">*</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">,</span><span style=\"color:#FF9D00;font-style:italic\"> async</span><span style=\"color:#E1EFFF\"> ()</span><span style=\"color:#FAD000\"> =></span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    const</span><span style=\"color:#9EFFFF\"> response </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#FF9D00\"> await</span><span style=\"color:#FAD000\"> fetch</span><span style=\"color:#E1EFFF\">(</span></span>\n<span data-line=\"\"><span style=\"color:#92FC79\">        \"</span><span style=\"color:#A5FF90\">https://static-links-page.signalnerve.workers.dev</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    )</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    return</span><span style=\"color:#9EFFFF\"> response</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">})</span></span></code></pre></figure>\n<p>Now is a good time to open a browser and check that <code>127.0.0.1:8787</code> is returning the static HTML template.</p>\n<h3>modify the link tree template</h3>\n<p>Another powerful feature of Cloudflare Workers is the ability to modify a request or response as needed based on your application logic. In our case, we'll be using our worker to change the static HTML template in a few different ways.</p>\n<ul>\n<li>Add a profile image</li>\n<li>Include our name</li>\n<li>Insert our links</li>\n</ul>\n<p>This can be accomplished using the <a href=\"https://developers.cloudflare.com/workers/runtime-apis/html-rewriter\" rel=\"noopener noreferrer\" target=\"_blank\">HTMLRewriter API</a>. Based on the template, we'll need four rewriters to handle modifying different HTML elements. The <code>HTMLRewriter</code> API maps a document query selector to a rewriter class which commits the necessary changes.</p>\n<p>Let's start by importing our four rewriters (we'll implement these in the next steps), and map them to the appropriate query selectors. Note how this acts on the response from the HTML template. Feel free to inspect the <a href=\"https://static-links-page.signalnerve.workers.dev\" rel=\"noopener noreferrer\" target=\"_blank\">HTML template</a> to understand the DOM structure and the relevant element ids.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"javascript\" data-theme=\"Shades of Purple\"><code data-language=\"javascript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FF9D00\">import</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">    AvatarRewriter</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">    LinkRewriter</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">    NameRewriter</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">    ProfileRewriter</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span><span style=\"color:#FF9D00;font-style:italic\"> from</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">./rewriters</span><span style=\"color:#92FC79\">\"</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">router</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">get</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">*</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">,</span><span style=\"color:#FF9D00;font-style:italic\"> async</span><span style=\"color:#E1EFFF\"> ()</span><span style=\"color:#FAD000\"> =></span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    const</span><span style=\"color:#9EFFFF\"> response </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#FF9D00\"> await</span><span style=\"color:#FAD000\"> fetch</span><span style=\"color:#E1EFFF\">(</span></span>\n<span data-line=\"\"><span style=\"color:#92FC79\">        \"</span><span style=\"color:#A5FF90\">https://static-links-page.signalnerve.workers.dev</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    )</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    const</span><span style=\"color:#9EFFFF\"> rewrittenResponse </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#FF9D00\"> new</span><span style=\"color:#FAD000\"> HTMLRewriter</span><span style=\"color:#E1EFFF\">()</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">        .</span><span style=\"color:#FAD000\">on</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">#profile</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">,</span><span style=\"color:#FF9D00\"> new</span><span style=\"color:#FAD000\"> ProfileRewriter</span><span style=\"color:#E1EFFF\">())</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">        .</span><span style=\"color:#FAD000\">on</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">#avatar</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">,</span><span style=\"color:#FF9D00\"> new</span><span style=\"color:#FAD000\"> AvatarRewriter</span><span style=\"color:#E1EFFF\">())</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">        .</span><span style=\"color:#FAD000\">on</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">#name</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">,</span><span style=\"color:#FF9D00\"> new</span><span style=\"color:#FAD000\"> NameRewriter</span><span style=\"color:#E1EFFF\">())</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">        .</span><span style=\"color:#FAD000\">on</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">#links</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">,</span><span style=\"color:#FF9D00\"> new</span><span style=\"color:#FAD000\"> LinkRewriter</span><span style=\"color:#E1EFFF\">())</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">        .</span><span style=\"color:#FAD000\">transform</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#9EFFFF\">response</span><span style=\"color:#E1EFFF\">)</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    return</span><span style=\"color:#9EFFFF\"> rewrittenResponse</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">})</span></span></code></pre></figure>\n<p>Now we'll move on and define each of the rewriters that we'll need in a <code>rewriters.js</code> file. Let's start with the <code>ProfileRewriter</code>, which should remove the <code>display: none</code> style to show the profile section.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"javascript\" data-theme=\"Shades of Purple\"><code data-language=\"javascript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FF9D00\">class</span><span style=\"color:#FB94FF\"> ProfileRewriter</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FAD000\">    element</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#9EFFFF\">element</span><span style=\"color:#E1EFFF\">)</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">        element</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">removeAttribute</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">style</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">)</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span></span></code></pre></figure>\n<p>You'll see that a rewriter is a class that can contain three methods, <code>element</code>, <code>comments</code>, and <code>text</code>. In our case, we'll only need the <code>element</code> method. We'll use the <code>removeAttribute</code> method to get rid of the <code>style</code> attribute.</p>\n<p>Next we'll update the avatar to include our own photo. Define an <code>AvatarRewriter</code> class with an <code>element</code> method, but this time we'll use the <code>setAttribute</code> method to modify the image source.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"javascript\" data-theme=\"Shades of Purple\"><code data-language=\"javascript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FF9D00\">class</span><span style=\"color:#FB94FF\"> AvatarRewriter</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FAD000\">    element</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#9EFFFF\">element</span><span style=\"color:#E1EFFF\">)</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">        const</span><span style=\"color:#9EFFFF\"> src </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">https://github.com/bradgarropy.png</span><span style=\"color:#92FC79\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">        element</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">setAttribute</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">src</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">,</span><span style=\"color:#9EFFFF\"> src</span><span style=\"color:#E1EFFF\">)</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span></span></code></pre></figure>\n<p>Then let's insert our name by creating a <code>NameRewriter</code> and using the <code>setInnerContent</code> method, which replaces the text content of the element.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"javascript\" data-theme=\"Shades of Purple\"><code data-language=\"javascript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FF9D00\">class</span><span style=\"color:#FB94FF\"> NameRewriter</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FAD000\">    element</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#9EFFFF\">element</span><span style=\"color:#E1EFFF\">)</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">        element</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">setInnerContent</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">Brad Garropy</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">)</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span></span></code></pre></figure>\n<p>Finally, let's do what we came here for and include our links in the <code>#links</code> section of the document. We'll start by defining our <code>LinkRewriter</code>, then iterating over the <code>links</code> we previously defined in the <code>links.js</code> file.</p>\n<p>For each link, we'll need to create an <code>&#x3C;a></code> tag and populate it with the link's name and url. Then we'll use the <code>append</code> method to add the markup right before the <code>element</code> closing tag.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"javascript\" data-theme=\"Shades of Purple\"><code data-language=\"javascript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FF9D00\">import</span><span style=\"color:#9EFFFF\"> links </span><span style=\"color:#FF9D00;font-style:italic\">from</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">./links</span><span style=\"color:#92FC79\">\"</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">class</span><span style=\"color:#FB94FF\"> LinkRewriter</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FAD000\">    element</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#9EFFFF\">element</span><span style=\"color:#E1EFFF\">)</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">        links</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">forEach</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#9EFFFF\">link </span><span style=\"color:#FAD000\">=></span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">            {</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">                cont html </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#3AD900\"> `&#x3C;a href=\"</span><span style=\"color:#FFEE80\">${</span><span style=\"color:#9EFFFF\">link</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">url</span><span style=\"color:#FFEE80\">}</span><span style=\"color:#3AD900\">\"></span><span style=\"color:#FFEE80\">${</span><span style=\"color:#9EFFFF\">link</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">name</span><span style=\"color:#FFEE80\">}</span><span style=\"color:#3AD900\">&#x3C;/a>`</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">                element</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">append</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#9EFFFF\">html</span><span style=\"color:#E1EFFF\">,</span><span style=\"color:#E1EFFF\"> {</span><span style=\"color:#80FFBB\">html</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#FF628C\"> true</span><span style=\"color:#E1EFFF\">})</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">            }</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">        )</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span></span></code></pre></figure>\n<p>You may have noticed the additional <code>{html: true}</code> argument, this tells the <code>append</code> method that the first argument should be treated as HTML instead of plain text, which would get HTML encoded.</p>\n<h3>final product</h3>\n<p>Head over to <code>127.0.0.1:8787</code> to see the new HTML response, which has been rewritten by our worker to include our links! It should look something like this.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/final.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/final.png\" alt=\"link tree\" width=\"833\" height=\"526\"></a>\n<p>Now you can use <code>wrangler</code> to publish your worker to Cloudflare.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"zsh\" data-theme=\"Shades of Purple\"><code data-language=\"zsh\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FAD000\">wrangler</span><span style=\"color:#A5FF90\"> publish</span></span></code></pre></figure>\n<p>Your worker should be available globally at the url shown in the console, which should look something like this one.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"text\" data-theme=\"Shades of Purple\"><code data-language=\"text\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span>https://link-tree.&#x3C;SUBDOMAIN>.workers.dev</span></span></code></pre></figure>\n<h3>conclusion</h3>\n<p>I'm definitely fascinated by <a href=\"https://workers.cloudflare.com\" rel=\"noopener noreferrer\" target=\"_blank\">Cloudflare Workers</a>, and I'm still exploring the possibilites of what they can enable. If you build something cool with a worker, share it with me on <a href=\"https://twitter.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">Twitter</a>!</p>",
            "url": "https://bradgarropy.com/blog/cloudflare-worker-link-tree",
            "title": "🌲 cloudflare worker link tree",
            "date_modified": "2021-06-28T00:00:00.000Z",
            "date_published": "2021-06-28T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "coding-livestreams",
            "content_html": "<p>Lately I've had the urge to share more of what I do regarding software development. So recently, I started <a href=\"https://www.youtube.com/playlist?list=PL6Mu1AMmTL-uMkwOvZ5_Ytbu9qQ5SQSrc\" rel=\"noopener noreferrer\" target=\"_blank\">livestreaming</a> my coding sessions on <a href=\"https://www.youtube.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">YouTube</a>.</p>\n<h2>🎤 setup</h2>\n<p>My setup is nothing fancy. I use a <a href=\"https://www.razer.com/Gaming-Audio/Razer-Kraken-Pro-V2-/p/RZ04-02050900-R3M1\" rel=\"noopener noreferrer\" target=\"_blank\">Razer Kraken</a> to record audio and <a href=\"https://obsproject.com\" rel=\"noopener noreferrer\" target=\"_blank\">OBS</a> to stream video to <a href=\"https://www.youtube.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">YouTube</a>. I don't use a camera to stream video of myself, but I might consider it in the future.</p>\n<p>The first upgrade I'll make here is for audio. I've already had to scrap an entire stream due to audio issues. I plan on picking up the <a href=\"https://www.bluedesigns.com/products/yeticaster/\" rel=\"noopener noreferrer\" target=\"_blank\">Blue Yeticaster</a> as soon as possible.</p>\n<h2>📚 topics</h2>\n<p>These streams cover whatever I'm working on at the moment. Currently, it's a <a href=\"https://www.gatsbyjs.org\" rel=\"noopener noreferrer\" target=\"_blank\">Gatsby</a> + <a href=\"https://www.shopify.com\" rel=\"noopener noreferrer\" target=\"_blank\">Shopify</a> e-commerce website for a barbell sleeve company. It's my first paid freelancing gig, and my first e-commerce website, so you'll watch me learn a lot.</p>\n<h2>👍🏼 benefits</h2>\n<p>Although it's nerve racking, I think streaming provides tons of benefits.</p>\n<h3>🎯 maintain focus</h3>\n<p>It's easy to stay focused on what you're doing when you are actively talking about it in front of people. Moreover, I can't livestream myself just crusing social media, so it's a great motivator to get to work!</p>\n<h3>👔 interview preparation</h3>\n<p>During an interview it's common to be asked to solve a coding problem on a whiteboard while narrating your thoughts. This is very similar to coding on stream. Streaming forces me to clearly express my train of thought while solving problems.</p>\n<p>I can tell this is an area of improvement for me, as I tend to go mute when I get stumped by a problem.</p>\n<h3>🎓 learn in public</h3>\n<p>By streaming coding on YouTube, I'm creating content that can help other developers along the way. <a href=\"https://twitter.com/swyx\" rel=\"noopener noreferrer\" target=\"_blank\">@swyx</a> has been my biggest motivator to <a href=\"https://twitter.com/hashtag/learninpublic\" rel=\"noopener noreferrer\" target=\"_blank\">#learninpublic</a>, and I believe it goes hand in hand with the next benefit.</p>\n<h3>😎 exposure</h3>\n<p>If I'm able to create content and help other developers, my name will come to mind when folks are looking for <em>someone</em> to do <em>something</em>. This could mean new opportunities for me!</p>\n<h2>🎁 wrapping up</h2>\n<p>I must be getting better at this writing thing, because what I thought was going to be a short post turned into a long one. But here's the bottom line, <a href=\"https://www.youtube.com/playlist?list=PL6Mu1AMmTL-uMkwOvZ5_Ytbu9qQ5SQSrc\" rel=\"noopener noreferrer\" target=\"_blank\">watch my streams</a>!</p>",
            "url": "https://bradgarropy.com/blog/coding-livestreams",
            "title": "📺 coding livestreams",
            "date_modified": "2019-03-05T00:00:00.000Z",
            "date_published": "2019-03-05T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "communication-comes-first",
            "content_html": "<p>During the process of marketing the <a href=\"https://bradgarropy.com/store\" rel=\"noopener noreferrer\" target=\"_blank\">curly bois</a> shirts, I released the following tweet which got a lot of engagement. Most feedback was positive, but a few creators and community members offered their feedback.</p>\n<div class=\"grid justify-center\">\n            <blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Got some fresh <a href=\"https://twitter.com/hashtag/developer?src=hash&#x26;ref_src=twsrc%5Etfw\" rel=\"noopener noreferrer\" target=\"_blank\">#developer</a> t-shirts coming out soon!<br><br>🎨 Based on themes by <a href=\"https://twitter.com/wesbos?ref_src=twsrc%5Etfw\" rel=\"noopener noreferrer\" target=\"_blank\">@wesbos</a>, <a href=\"https://twitter.com/sarah_edo?ref_src=twsrc%5Etfw\" rel=\"noopener noreferrer\" target=\"_blank\">@sarah_edo</a>, <a href=\"https://twitter.com/MrAhmadAwais?ref_src=twsrc%5Etfw\" rel=\"noopener noreferrer\" target=\"_blank\">@MrAhmadAwais</a>, and @morgancodescoin.<br><br>✨ Inspired by <a href=\"https://twitter.com/cassiecodes?ref_src=twsrc%5Etfw\" rel=\"noopener noreferrer\" target=\"_blank\">@cassiecodes</a>, <a href=\"https://twitter.com/jlengstorf?ref_src=twsrc%5Etfw\" rel=\"noopener noreferrer\" target=\"_blank\">@jlengstorf</a>, and <a href=\"https://twitter.com/spences10?ref_src=twsrc%5Etfw\" rel=\"noopener noreferrer\" target=\"_blank\">@spences10</a>. <a href=\"https://t.co/MELQyks06u\" rel=\"noopener noreferrer\" target=\"_blank\">pic.twitter.com/MELQyks06u</a></p>— Brad Garropy (@bradgarropy) <a href=\"https://twitter.com/bradgarropy/status/1331482232121389058?ref_src=twsrc%5Etfw\" rel=\"noopener noreferrer\" target=\"_blank\">November 25, 2020</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n\n        </div>\n<p>Folks like <a href=\"https://twitter.com/wesbos\" rel=\"noopener noreferrer\" target=\"_blank\">Wes Bos</a>, <a href=\"https://twitter.com/jlengstorf\" rel=\"noopener noreferrer\" target=\"_blank\">Jason Lengstorf</a>, <a href=\"https://twitter.com/MrAhmadAwais\" rel=\"noopener noreferrer\" target=\"_blank\">Ahmad Awais</a>, and <a href=\"https://twitter.com/morgancodescoin\" rel=\"noopener noreferrer\" target=\"_blank\">Morgan Richardson</a> all reached out with feedback, comments, and/or concerns. The messages covered a variety of topics.</p>\n<ul>\n<li>Asking creator permission</li>\n<li>Who should get free shirts</li>\n<li>Color theme modifications</li>\n<li>Royalty requests</li>\n</ul>\n<p>After getting these messages, I took a step back and spoke with all of the creators individually about the use of their theme, royalty expectations, permissions, and communication in general. All of the conversations proved to be a great learning experience for me, no matter the outcome.</p>\n<p>I mentioned in my <a href=\"https://bradgarropy.com/blog/curly-bois-shirts\" rel=\"noopener noreferrer\" target=\"_blank\">previous post</a> that this was my first time launching any kind of paid product marketed towards my <a href=\"https://twitter.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">Twitter</a> audience. The main thing I learned was:</p>\n<blockquote>\n<p><strong>COMMUNICATE to your collaborators and customers early and often!</strong></p>\n</blockquote>\n<p>Instead of initially reaching out to the creators, I relied on the themes' <a href=\"https://choosealicense.com/licenses/mit\" rel=\"noopener noreferrer\" target=\"_blank\">MIT licenses</a> to grant me permission. Now legally that would be fine, but interpersonally it wasn't the best way to go about it. Simply speaking with the creators first would have set better expectations for what I was trying to do, cleared up any permissions concerns, and allowed for design edits to be made earlier in the process.</p>\n<p>At the end of the day, like <a href=\"https://twitter.com/jlengstorf\" rel=\"noopener noreferrer\" target=\"_blank\">Jason</a> says, \"<em>the real 10x developers are the friends we make along the way</em>\". Networking and establishing professional relationships are ultimately what's most important. The web development community is generally a positive one, and although I saw some examples to the contrary, I am going to keep improving my communication and collaboration skills as I continue to work in public.</p>",
            "url": "https://bradgarropy.com/blog/communication-comes-first",
            "title": "🥇 communication comes first",
            "date_modified": "2020-12-08T00:00:00.000Z",
            "date_published": "2020-12-08T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "contentful-preview-api-with-gatsby-netlify",
            "content_html": "<p>My favorite feature of <a href=\"https://app.netlify.com/\" rel=\"noopener noreferrer\" target=\"_blank\">Netlify</a> is branch deploys, all I have to do is push my code to a <a href=\"https://github.com/\" rel=\"noopener noreferrer\" target=\"_blank\">Github</a> branch and Netlify will deploy my site to a custom url specific to that branch. This feature essentially enables different environments, like production, development, staging, etc.</p>\n<p>So my vision was to have <a href=\"https://bradgarropy.com/\" rel=\"noopener noreferrer\" target=\"_blank\">bradgarropy.com</a> as the production environment, and <a href=\"https://dev.bradgarropy.com/\" rel=\"noopener noreferrer\" target=\"_blank\">dev.bradgarropy.com</a> as the development environment. Production should only show published posts, and development should show published and draft posts so that I can preview what I'm working on.</p>\n<p><a href=\"https://app.contentful.com/\" rel=\"noopener noreferrer\" target=\"_blank\">Contentful</a> has two separate Content Delivery APIs, one for serving production content located at <code>cdn.contentful.com</code>, and one for serving preview content at <code>preview.contentful.com</code>. Each environment requires its own token for access, which needs to be added to the environment variables. You can find these tokens in Contentful under <strong>Settings</strong> -> <strong>API keys</strong>.</p>\n<h2>netlify environment</h2>\n<p>The Netlify environment setup is simple, it's under <strong>Settings</strong> -> <strong>Build &#x26; deploy</strong> -> <strong>Build environment variables</strong>. Unfortunately, Netlify doesn't support setting different environment variables per branch, so I had to add them all here.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/netlify-environment.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/netlify-environment.png\" alt=\"netlify build environment variables\" width=\"891\" height=\"504\"></a>\n<p>Now I just needed to add the logic to determine when to use the production or preview variables.</p>\n<h2>gatsby / contentful configuration</h2>\n<p>Netlify has a concept called <a href=\"https://www.netlify.com/docs/continuous-deployment/#deploy-contexts\" rel=\"noopener noreferrer\" target=\"_blank\">deploy contexts</a> which I used to determine what environment I'm operating in. The <code>CONTEXT</code> environment variable is set to <code>production</code> for production builds, <code>branch-deploy</code> for branch builds, or <code>deploy-preview</code> for pull requests. This code took care of it.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"javascript\" data-theme=\"Shades of Purple\"><code data-language=\"javascript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#B362FF;font-style:italic\">// gatsby-config.js</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">let</span><span style=\"color:#9EFFFF\"> contentfulOptions </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#E1EFFF\"> {}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">if</span><span style=\"color:#E1EFFF\"> (</span><span style=\"color:#9EFFFF\">process</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FFEE80\">env</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#9EFFFF\">CONTEXT</span><span style=\"color:#FF9D00\"> ===</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">production</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">)</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">    contentfulOptions </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#80FFBB\">        spaceId</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#9EFFFF\"> process</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FFEE80\">env</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#9EFFFF\">CONTENTFUL_SPACE</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80FFBB\">        accessToken</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#9EFFFF\"> process</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FFEE80\">env</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#9EFFFF\">CONTENTFUL_TOKEN</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80FFBB\">        host</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#9EFFFF\"> process</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FFEE80\">env</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#9EFFFF\">CONTENTFUL_HOST</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span><span style=\"color:#FF9D00\"> else</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">    contentfulOptions </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#80FFBB\">        spaceId</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#9EFFFF\"> process</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FFEE80\">env</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#9EFFFF\">CONTENTFUL_SPACE</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80FFBB\">        accessToken</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#9EFFFF\"> process</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FFEE80\">env</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#9EFFFF\">CONTENTFUL_PREVIEW_TOKEN</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80FFBB\">        host</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#9EFFFF\"> process</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FFEE80\">env</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#9EFFFF\">CONTENTFUL_PREVIEW_HOST</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span></span></code></pre></figure>\n<p>Now I just had to configure the <code>gatsby-source-contentful</code> plugin with the options.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"javascript\" data-theme=\"Shades of Purple\"><code data-language=\"javascript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#B362FF;font-style:italic\">// gatsby-config.js</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">{</span></span>\n<span data-line=\"\"><span style=\"color:#FAD000\">    resolve</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">gatsby-source-contentful</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#FAD000\">    options</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#9EFFFF\"> contentfulOptions</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span></span></code></pre></figure>\n<p>Boom, I pushed this code and I had <a href=\"https://dev.bradgarropy.com/\" rel=\"noopener noreferrer\" target=\"_blank\">dev.bradgarropy.com</a> up and running with my published and draft posts.</p>\n<h2>local environment</h2>\n<p>I wasn't done yet, beacuse I still needed support for the Content Preview API in my local development environment. <a href=\"https://www.gatsbyjs.org/\" rel=\"noopener noreferrer\" target=\"_blank\">Gatsby</a> accepts <a href=\"https://www.gatsbyjs.org/docs/environment-variables/\" rel=\"noopener noreferrer\" target=\"_blank\">environment variables</a> from <code>.env</code> files, which are loaded based on the <code>NODE_ENV</code>. So I created these files.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"ini\" data-theme=\"Shades of Purple\"><code data-language=\"ini\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#B362FF;font-style:italic\">; .env.production</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\" data-highlighted-line=\"\"><span style=\"color:#FAD000\">CONTEXT</span><span style=\"color:#FF9D00\">=</span><span style=\"color:#E1EFFF\">production</span></span>\n<span data-line=\"\"><span style=\"color:#FAD000\">CONTENTFUL_SPACE</span><span style=\"color:#FF9D00\">=</span><span style=\"color:#E1EFFF\">&#x3C;space id></span></span>\n<span data-line=\"\"><span style=\"color:#FAD000\">CONTENTFUL_HOST</span><span style=\"color:#FF9D00\">=</span><span style=\"color:#E1EFFF\">cdn.contentful.com</span></span>\n<span data-line=\"\"><span style=\"color:#FAD000\">CONTENTFUL_TOKEN</span><span style=\"color:#FF9D00\">=</span><span style=\"color:#E1EFFF\">&#x3C;access token></span></span>\n<span data-line=\"\"><span style=\"color:#FAD000\">CONTENTFUL_PREVIEW_HOST</span><span style=\"color:#FF9D00\">=</span><span style=\"color:#E1EFFF\">preview.contentful.com</span></span>\n<span data-line=\"\"><span style=\"color:#FAD000\">CONTENTFUL_PREVIEW_TOKEN</span><span style=\"color:#FF9D00\">=</span><span style=\"color:#E1EFFF\">&#x3C;preview token></span></span></code></pre></figure>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"ini\" data-theme=\"Shades of Purple\"><code data-language=\"ini\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#B362FF;font-style:italic\">; .env.development</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\" data-highlighted-line=\"\"><span style=\"color:#FAD000\">CONTEXT</span><span style=\"color:#FF9D00\">=</span><span style=\"color:#E1EFFF\">branch-deploy</span></span>\n<span data-line=\"\"><span style=\"color:#FAD000\">CONTENTFUL_SPACE</span><span style=\"color:#FF9D00\">=</span><span style=\"color:#E1EFFF\">&#x3C;space id></span></span>\n<span data-line=\"\"><span style=\"color:#FAD000\">CONTENTFUL_HOST</span><span style=\"color:#FF9D00\">=</span><span style=\"color:#E1EFFF\">cdn.contentful.com</span></span>\n<span data-line=\"\"><span style=\"color:#FAD000\">CONTENTFUL_TOKEN</span><span style=\"color:#FF9D00\">=</span><span style=\"color:#E1EFFF\">&#x3C;access token></span></span>\n<span data-line=\"\"><span style=\"color:#FAD000\">CONTENTFUL_PREVIEW_HOST</span><span style=\"color:#FF9D00\">=</span><span style=\"color:#E1EFFF\">preview.contentful.com</span></span>\n<span data-line=\"\"><span style=\"color:#FAD000\">CONTENTFUL_PREVIEW_TOKEN</span><span style=\"color:#FF9D00\">=</span><span style=\"color:#E1EFFF\">&#x3C;preview token></span></span></code></pre></figure>\n<p>I had to add in the <code>CONTEXT</code> environment variable to mimic Netlify's environment. Then I loaded the environment files using <a href=\"https://github.com/motdotla/dotenv#dotenv\" rel=\"noopener noreferrer\" target=\"_blank\">dotenv</a> like so.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"javascript\" data-theme=\"Shades of Purple\"><code data-language=\"javascript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#B362FF;font-style:italic\">// gatsby-config.js</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FAD000\">require</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">dotenv</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">).</span><span style=\"color:#FAD000\">config</span><span style=\"color:#E1EFFF\">({</span></span>\n<span data-line=\"\"><span style=\"color:#80FFBB\">    path</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#3AD900\"> `.env.</span><span style=\"color:#FFEE80\">${</span><span style=\"color:#9EFFFF\">process</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FFEE80\">env</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#9EFFFF\">NODE_ENV</span><span style=\"color:#FFEE80\">}</span><span style=\"color:#3AD900\">`</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">})</span></span></code></pre></figure>\n<p>So when I run <code>gatsby build</code> I get only published posts, and when I run <code>gatsby develop</code> I get published and draft posts!</p>\n<h2>sneak preview</h2>\n<p>This whole setup came about when I was writing a post that required some CSS changes to style some Markdown elements I'd never used on the blog before. I needed a way to show unpublished content while still developing the site.</p>\n<p>Ultimately I'm really happy with this solution. However I do see room for improvement. If Netlify adds a way to specify environment variables per branch from their site, I could eliminate some of this code.</p>\n<p>But for now, just know that you can catch a sneak peak of content I'm working on at <a href=\"https://dev.bradgarropy.com/\" rel=\"noopener noreferrer\" target=\"_blank\">dev.bradgarropy.com</a>!</p>",
            "url": "https://bradgarropy.com/blog/contentful-preview-api-with-gatsby-netlify",
            "title": "👀 contentful preview api with gatsby + netlify",
            "date_modified": "2018-09-04T00:00:00.000Z",
            "date_published": "2018-09-04T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "crediting-open-source-authors",
            "content_html": "<p>You just found an awesome repository, and it works <em>almost</em> exactly how you want. You clone it, tweak it until it's <em>juuust right</em> for you, then begin pushing that code up to your very own repository.</p>\n<p>But hold up, take a second to think about why you would need a <em>copy</em> of that repository, rather than improving it in place. You see, the second you duplicate a repository, a lot of things come into play.</p>\n<p>First, it can add to the already existing heap of JavaScript packages out there, <code>1,317,350</code> at the time of publishing this article. And second, you may have just inadvertently plagiarized that content if you don't properly credit the author.</p>\n<p>So here are a few tips about how to properly improve open source projects and acknowledge the original developer.</p>\n<h2>🍴 fork the repository</h2>\n<p><a href=\"https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/about-forks\" rel=\"noopener noreferrer\" target=\"_blank\">Forking</a> is essentially the same thing as copying the repository, but GitHub keeps a link to the original, usually referred to as the <code>upstream</code>. Not only does it serve as a nice reminder of where the project originated from, but you can also pull in changes from the <code>upstream</code> repository into your fork at any time.</p>\n<h2>🚥 create a pull request</h2>\n<p>If you choose to modify the repository in a way that can benefit other users, consider opening a <a href=\"https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/about-pull-requests\" rel=\"noopener noreferrer\" target=\"_blank\">pull request</a>. If approved and merged, you can now call yourself an official open sourcerer!</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/open-sourcerer.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/open-sourcerer.png\" alt=\"open sourcerer\" width=\"3840\" height=\"2160\"></a>\n<h2>🎉 acknowledge the original author</h2>\n<p>One of the easiest and most effective things you can do acknowledge the original author is to include an acknowledgements section in the <code>README</code>. This section can mention the original author, another project that inspired you, or an article that you found helpful. It's considered best practice to mention the author by name and include a link to their <a href=\"https://twitter.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">Twitter</a>, <a href=\"https://github.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">GitHub</a>, or <a href=\"https://bradgarropy.com\" rel=\"noopener noreferrer\" target=\"_blank\">website</a>.</p>\n<h2>💰 sponsor the developer</h2>\n<p>Whether you just have a few cents lying around, or if you work at a company with a large budget, you can donate to open source projects that you depend on. GitHub now offers <a href=\"https://github.com/sponsors\" rel=\"noopener noreferrer\" target=\"_blank\">sponsorship</a>, which makes it easy to support the open source developers that support you!</p>\n<h2>💗 show some love</h2>\n<p>If nothing else, show some love to the developers who are out there writing code for others to use <em>for free</em>. <a href=\"https://github.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">Follow</a> them on GitHub, or <a href=\"https://github.com/bradgarropy?tab=repositories\" rel=\"noopener noreferrer\" target=\"_blank\">star</a> any repositories you find interesting. This will help bring more attention, contributors, and sponsors, to the projects you love.</p>",
            "url": "https://bradgarropy.com/blog/crediting-open-source-authors",
            "title": "🤩 crediting open source authors",
            "date_modified": "2020-06-15T00:00:00.000Z",
            "date_published": "2020-06-15T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "cron-jobs-with-github-actions",
            "content_html": "<p>I was looking for a free way to repeatedly run some tasks, and I remembered that <a href=\"https://github.com/features/actions\" rel=\"noopener noreferrer\" target=\"_blank\">GitHub Actions</a> now supports scheduled workflows. If you're not familiar with actions, check out the quickstart in the <a href=\"https://docs.github.com/en/actions\" rel=\"noopener noreferrer\" target=\"_blank\">documentation</a>.</p>\n<p>In order to run a workflow on a schedule, modify the <code>on</code> property of an existing workflow. Add the <code>schedule</code> event, and then one or more <code>cron</code> definitions underneath it. It should look like the example below.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"yaml\" data-theme=\"Shades of Purple\"><code data-language=\"yaml\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FAD000\">name</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">⏲ scheduled workflow</span><span style=\"color:#92FC79\">\"</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF628C\">on</span><span style=\"color:#E1EFFF\">:</span></span>\n<span data-line=\"\"><span style=\"color:#FAD000\">    schedule</span><span style=\"color:#E1EFFF\">:</span></span>\n<span data-line=\"\"><span style=\"color:#B362FF;font-style:italic\">        # utc time zone</span></span>\n<span data-line=\"\"><span style=\"color:#B362FF;font-style:italic\">        # daily @ 8am cst</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">        -</span><span style=\"color:#FAD000\"> cron</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">0 13 * * *</span><span style=\"color:#92FC79\">\"</span></span></code></pre></figure>\n<p>More information about the cron syntax can be found in the <a href=\"https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule\" rel=\"noopener noreferrer\" target=\"_blank\">schedule documentation</a>. I recommend using <a href=\"https://crontab.guru\" rel=\"noopener noreferrer\" target=\"_blank\">crontab guru</a> to help create schedules. It's important to note that GitHub Actions are based in the UTC time zone, so use this <a href=\"https://savvytime.com/converter/utc\" rel=\"noopener noreferrer\" target=\"_blank\">UTC Converter</a> to get the correct time for your time zone.</p>",
            "url": "https://bradgarropy.com/blog/cron-jobs-with-github-actions",
            "title": "⏲ cron jobs with github actions",
            "date_modified": "2022-10-05T00:00:00.000Z",
            "date_published": "2022-10-05T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "css-modules-to-tailwind",
            "content_html": "<p>I just finished migrating this website from <a href=\"https://nextjs.org/docs/basic-features/built-in-css-support#adding-component-level-css\" rel=\"noopener noreferrer\" target=\"_blank\">CSS Modules</a> to <a href=\"https://tailwindcss.com\" rel=\"noopener noreferrer\" target=\"_blank\">Tailwind</a>. Overall it was a straightforward, but long process. The transition has proven to be worth it, and I'll explain my thoughts on the outcome below.</p>\n<h2>🧬 better defaults</h2>\n<p>If nothing else, Tailwind starts you off with a <a href=\"https://tailwindcss.com/docs/preflight\" rel=\"noopener noreferrer\" target=\"_blank\">better set of defaults</a>. They accomplish this with a CSS reset pulled in with the <code>@tailwind base</code> directive. The Tailwind reset goes above and beyond, and really sets you up with a proper blank page without the need to constantly override default browser styles.</p>\n<p>Tailwind also provides you with a stellar set of design tokens out of the box. Everything from colors, to box shadows, to spacing have all been excellently designed for you to utilize.</p>\n<p>If you opt into some of Tailwind's <a href=\"https://tailwindcss.com/docs/plugins#official-plugins\" rel=\"noopener noreferrer\" target=\"_blank\">official plugins</a>, they offer great additional features. For example, the <a href=\"https://tailwindcss.com/docs/typography-plugin\" rel=\"noopener noreferrer\" target=\"_blank\">typography plugin</a> provided much better styling for my <code>markdown</code> content than I had created myself.</p>\n<h2>✍🏼 authoring experience</h2>\n<p>While the authoring experience of Tailwind is its number one criticism, I didn't find it to be that bad. I really love the fact that I'm able to write my styles directly next to the elements that they affect rather than off in another file.</p>\n<p>I also don't have to spend any time thinking about class naming, with the exception of a few Tailwind classes that confuse me every time! Specifically the grid placement classes. Sometimes you have to be specific about the placement direction, like <code>justify</code> or <code>align</code>, other times you have to be specific about the thing you're placing, like <code>content</code> or <code>items</code>, and sometimes it's a mix of both.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/grid-placement.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/grid-placement.png\" alt=\"grid placement\" width=\"439\" height=\"165\"></a>\n<p>Luckily, Tailwind has an awesome <a href=\"https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss\" rel=\"noopener noreferrer\" target=\"_blank\">vscode extension</a> that not only autocompletes class names for you, but also shows the associated CSS output! This plugin is super helpful on all properties with only a few exceptions. For example, I found that when it autocompletes <code>border</code>, it places all of the different <code>border-spacing</code> values at the top of the list, forcing me to scroll way down to reach more relevant classes like <code>border-4</code>.</p>\n<h2>💯 incredibly maintainable</h2>\n<p>The biggest benefit that Tailwind offers is its long term maintainability. While making this transition, I was able to remove the majority of a <code>global.css</code> file. Modifying those styles was incredibly difficult because I didn't know which parts of the website would be affected. With Tailwind, all styles are declared right on the elements they modify, which means no scoping issues. Despite being pretty verbose, I actually <em>removed</em> code during the migration.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/tailwind-diff.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/tailwind-diff.png\" alt=\"tailwind diff\" width=\"422\" height=\"109\"></a>\n<p>But that doesn't mean Tailwind is not reusable. You can still leverage the cascade with Tailwind's class based styling. Instead of declaring a <code>font-family</code> on every element, you can place the class high up in the DOM and the styles will apply to all children.</p>\n<p>If you ever need to break free from Tailwind's out of the box classes, you can use <a href=\"https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values\" rel=\"noopener noreferrer\" target=\"_blank\">arbitrary values</a>, or customize your <a href=\"https://tailwindcss.com/docs/configuration\" rel=\"noopener noreferrer\" target=\"_blank\">configuration</a>. While I did a fair bit of customization, my configuration was only <a href=\"https://github.com/bradgarropy/bradgarropy.com/blob/main/tailwind.config.js\" rel=\"noopener noreferrer\" target=\"_blank\">59 lines</a> of code.</p>\n<h2>🏎️ performance improvements</h2>\n<p>Most importantly, Tailwind brought performance improvements to my website. Primarily this was through reducing the amount of HTTP requests. It turns out that Next.js <a href=\"https://github.com/vercel/next.js/issues/19009\" rel=\"noopener noreferrer\" target=\"_blank\">preloads CSS Modules</a> for client side routing to adjacent pages, which caused seven extra requests on my home page. Given that I'm moving to <a href=\"https://remix.run\" rel=\"noopener noreferrer\" target=\"_blank\">Remix</a> soon, I won't have much use for client side routing.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/http-requests.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/http-requests.png\" alt=\"http requests\" width=\"428\" height=\"190\"></a>\n<p>This reduction in HTTP requests ultimately lead to faster load times on my website by about <code>200ms</code> and a reduced page weight of around <code>50kb</code>.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/page-load-data.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/page-load-data.png\" alt=\"page load data\" width=\"428\" height=\"190\"></a>\n<h2>🙌🏼 framework integrations</h2>\n<p>While Tailwind does integrate well with <a href=\"https://nextjs.org\" rel=\"noopener noreferrer\" target=\"_blank\">Next.js</a> through <a href=\"https://github.com/vercel/next.js/tree/canary/examples/with-tailwindcss\" rel=\"noopener noreferrer\" target=\"_blank\">create-next-app</a>, that only supports new projects. As I mentioned before I'll be moving to <a href=\"https://remix.run\" rel=\"noopener noreferrer\" target=\"_blank\">Remix</a>, which is getting first class <a href=\"https://remix.run/docs/en/v1/guides/styling#tailwind-css\" rel=\"noopener noreferrer\" target=\"_blank\">Tailwind support</a> very soon.</p>\n<h2>🧶 wrap up</h2>\n<p>Overall I'm very happy with my migration to <a href=\"https://tailwindcss.com\" rel=\"noopener noreferrer\" target=\"_blank\">Tailwind</a>. It took longer than expected, and rewriting everything from scratch would have probably been quicker, but I liked perspective it gave me. Tailwind has a great developer experience, it improved performance on my site, and gives me a great base to start styling with.</p>",
            "url": "https://bradgarropy.com/blog/css-modules-to-tailwind",
            "title": "💨 css modules to tailwind",
            "date_modified": "2023-02-22T00:00:00.000Z",
            "date_published": "2023-02-22T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "curly-bois-shirts",
            "content_html": "<p>There was a particularly hysterical moment on a recent episode of <a href=\"https://learnwithjason.dev\" rel=\"noopener noreferrer\" target=\"_blank\">Learn With Jason</a> where <a href=\"https://twitter.com/cassiecodes\" rel=\"noopener noreferrer\" target=\"_blank\">Cassie Evans</a> shared her nickname for parentheses with <a href=\"https://twitter.com/jlengstorf\" rel=\"noopener noreferrer\" target=\"_blank\">Jason Lengstorf</a>.</p>\n<iframe class=\"aspect-video w-full rounded my-8\" title=\"SOp0e4tkXjI\" src=\"https://www.youtube-nocookie.com/embed/SOp0e4tkXjI?start=1282\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen>\n        </iframe>\n<p>Everyone in chat thought it was super funny, and so did the rest of the web development community. So I thought I would commemorate the moment by creating some tshirts.</p>\n<p>This was my first time designing, marketing, and launching a tshirt, so there was a lot to learn. I did much of the design process live on stream, and vetted the concepts with <a href=\"https://twitch.tv/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">Twitch</a> chat and my <a href=\"https://twitter.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">Twitter</a> followers. During the design process I got the idea to color the shirts like popular <code>vscode</code> themes.</p>\n<p>Things got a little spicy here, and I received some great feedback from the creators and the community. After working with each of the creators, I finalized the lineup, sent a few <a href=\"https://twitter.com/bradgarropy/status/1331482232121389058\" rel=\"noopener noreferrer\" target=\"_blank\">coming</a> <a href=\"https://twitter.com/bradgarropy/status/1333612559144927233\" rel=\"noopener noreferrer\" target=\"_blank\">soon</a> tweets, and then went live on <a href=\"https://bradgarropy.com/store\" rel=\"noopener noreferrer\" target=\"_blank\">Cotton Bureau</a>.</p>\n<a href=\"https://bradgarropy.com/store\" rel=\"noopener noreferrer\" target=\"_blank\"></a><a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/live.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/live.png\" alt=\"curly bois\" width=\"1744\" height=\"981\"></a>\n<p>It's been five days since launch and I've sold 23 shirts. Definitely less that what I was expecting given the large amount of engagement on the <a href=\"https://twitter.com/bradgarropy/status/1331482232121389058\" rel=\"noopener noreferrer\" target=\"_blank\">coming soon</a> post. But I learned a lot through this whole process, and now I owe it to myself to create a <code>bg codes</code> theme for <code>vscode</code>!</p>\n<p><em>If you purchased a shirt, thank you so much! Don't forget to share a photo on <a href=\"https://twitter.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">Twitter</a>!</em></p>",
            "url": "https://bradgarropy.com/blog/curly-bois-shirts",
            "title": "👕 curly bois shirts",
            "date_modified": "2020-12-07T00:00:00.000Z",
            "date_published": "2020-12-07T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "daily-texas-country",
            "content_html": "<p>Ever since I first stepped into a dance hall I've loved Texas country music. I started building a <a href=\"https://open.spotify.com/playlist/0AbnxNMZqSCVog82luj1Ir?si=D8sld9utTyia641fRghJTQ\" rel=\"noopener noreferrer\" target=\"_blank\">playlist</a> back in 2013 that now has over 1100 songs. I met tons of friends out at the shows and the bars, but I've always wanted a larger community around the music that shaped my life.</p>\n<p>So I came up with <a href=\"https://dailytexascountry.com\" rel=\"noopener noreferrer\" target=\"_blank\">Daily Texas Country</a>, my very own home for Texas country music and lifestyle that I could share with the folks who understood. The site contains <a href=\"http://dailytexascountry.com/posts\" rel=\"noopener noreferrer\" target=\"_blank\">articles</a>, <a href=\"https://dailytexascountry.com/episodes\" rel=\"noopener noreferrer\" target=\"_blank\">videos</a>, and <a href=\"https://dailytexascountry.com/playlists\" rel=\"noopener noreferrer\" target=\"_blank\">playlists</a> all created by me to share my thoughts and hopefully earn a buck later on down the line.</p>\n<iframe class=\"aspect-video w-full rounded my-8\" title=\"XAWCNFt3HCc\" src=\"https://www.youtube-nocookie.com/embed/XAWCNFt3HCc\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen>\n        </iframe>\n<p>The site is statically generated, and sources the content from many different places. The <a href=\"http://dailytexascountry.com/posts\" rel=\"noopener noreferrer\" target=\"_blank\">blog</a> is a collection of markdown files stored right in the <a href=\"https://github.com/bradgarropy/dailytexascountry.com\" rel=\"noopener noreferrer\" target=\"_blank\">repository</a>. The Whiskey Wednesday <a href=\"https://dailytexascountry.com/episodes\" rel=\"noopener noreferrer\" target=\"_blank\">episodes</a> are hosted on the Daily Texas Country <a href=\"https://www.youtube.com/channel/UCpbIlFaiv-3188nAWtgL0Iw\" rel=\"noopener noreferrer\" target=\"_blank\">YouTube channel</a>. And finally, the <a href=\"https://dailytexascountry.com/playlists\" rel=\"noopener noreferrer\" target=\"_blank\">playlists</a> live in Spotify.</p>\n<p>I used a few different pieces of <a href=\"https://jamstack.org\" rel=\"noopener noreferrer\" target=\"_blank\">Jamstack</a> and <a href=\"https://serverless.css-tricks.com\" rel=\"noopener noreferrer\" target=\"_blank\">serverless</a> technology to stitch the website together.</p>\n<ul>\n<li><a href=\"https://gatsbyjs.org\" rel=\"noopener noreferrer\" target=\"_blank\">Gatsby</a></li>\n<li><a href=\"https://reactjs.org\" rel=\"noopener noreferrer\" target=\"_blank\">React</a></li>\n<li><a href=\"https://styled-components.com\" rel=\"noopener noreferrer\" target=\"_blank\">styled-components</a></li>\n<li><a href=\"https://netlify.com\" rel=\"noopener noreferrer\" target=\"_blank\">Netlify</a></li>\n<li><a href=\"https://cloud.google.com\" rel=\"noopener noreferrer\" target=\"_blank\">Google Cloud Scheduler</a></li>\n<li><a href=\"https://spotify.com\" rel=\"noopener noreferrer\" target=\"_blank\">Spotify</a></li>\n<li><a href=\"https://youtube.com\" rel=\"noopener noreferrer\" target=\"_blank\">YouTube</a></li>\n<li><a href=\"https://convertkit.com\" rel=\"noopener noreferrer\" target=\"_blank\">ConvertKit</a></li>\n</ul>\n<p>So if you happen to like Texas country music, or want to know more about the tech I used to create this side project, <a href=\"https://dailytexascountry.com\" rel=\"noopener noreferrer\" target=\"_blank\">take a look</a>!</p>",
            "url": "https://bradgarropy.com/blog/daily-texas-country",
            "title": "🤠 daily texas country",
            "date_modified": "2020-06-18T00:00:00.000Z",
            "date_published": "2020-06-18T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "deprecate-an-npm-package",
            "content_html": "<p>I recently restructured my <a href=\"https://github.com/bradgarropy/eslint-config\" rel=\"noopener noreferrer\" target=\"_blank\">eslint configuration</a>, which left my <a href=\"https://github.com/bradgarropy/eslint-config-bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">original configuration</a> completely unused. So in order to avoid confusion, I decided to <a href=\"https://docs.npmjs.com/deprecating-and-undeprecating-packages-or-package-versions\" rel=\"noopener noreferrer\" target=\"_blank\">deprecate</a> the old package. Here's how I did it.</p>\n<h2>👨🏼‍💻 source code</h2>\n<p>First I added a deprecation message to the <code>readme</code>. I put the message towards the top so visitors can easily see it. As a courtesy, I also linked to the <a href=\"https://npmjs.com/package/@bradgarropy/eslint-config\" rel=\"noopener noreferrer\" target=\"_blank\">new package</a> so users know what to use instead.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/readme.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/readme.png\" alt=\"deprecation message\" width=\"897\" height=\"306\"></a>\n<p>Then I published the <code>readme</code> changes to <code>npm</code> as a new <code>patch</code> version. The two commands below came in handy to bump the version and publish the package, but your deployment setup may vary.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"zsh\" data-theme=\"Shades of Purple\"><code data-language=\"zsh\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FAD000\">npm</span><span style=\"color:#A5FF90\"> version</span><span style=\"color:#A5FF90\"> patch</span></span>\n<span data-line=\"\"><span style=\"color:#FAD000\">npm</span><span style=\"color:#A5FF90\"> publish</span></span></code></pre></figure>\n<p>More documentation is available on the <code>npm</code> website for the <a href=\"https://docs.npmjs.com/cli/v6/commands/npm-version\" rel=\"noopener noreferrer\" target=\"_blank\">version</a> and <a href=\"https://docs.npmjs.com/cli/v6/commands/npm-publish\" rel=\"noopener noreferrer\" target=\"_blank\">publish</a> commands.</p>\n<h2>📁 github repository</h2>\n<p>Next I had to archive the repository so that visitors would know it's read only and no longer being supported. The <em>Archive</em> button is under in <em>Settings</em> tab, all the way at the bottom in the <em>Danger Zone</em>.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/archive.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/archive.png\" alt=\"archive button\" width=\"1174\" height=\"459\"></a>\n<p>While this button is in the <em>Danger Zone</em>, you can <em>Unarchive</em> your repository at any time. So don't sweat it too much!</p>\n<h2>📦 npm package</h2>\n<p>Finally, I had to let <code>npm</code> know that the package is deprecated. I used the <a href=\"https://docs.npmjs.com/cli/v6/commands/npm-deprecate\" rel=\"noopener noreferrer\" target=\"_blank\">deprecate</a> command to do that. The last parameter is a deprecation message that will show up when a user tries to install a deprecated package</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"zsh\" data-theme=\"Shades of Purple\"><code data-language=\"zsh\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FAD000\">npm</span><span style=\"color:#A5FF90\"> deprecate</span><span style=\"color:#A5FF90\"> eslint-config-bradgarropy</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">This package is deprecated.</span><span style=\"color:#92FC79\">\"</span></span></code></pre></figure>\n<p>Once deprecated, <code>npm</code> will show a banner to indicate to users that they should no longer use this package. The banner includes the deprecation message you entered in the <code>npm deprecate</code> command.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/deprecated.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/deprecated.png\" alt=\"deprecation banner\" width=\"976\" height=\"214\"></a>\n<h2>⛔ deprecate vs unpublish</h2>\n<p>But some might say, \"<em>That seems like a lot of work. Can't I just delete it?</em>\"</p>\n<p>While <code>npm</code> does support deleting a package (they call it <a href=\"https://docs.npmjs.com/cli/v6/commands/npm-unpublish\" rel=\"noopener noreferrer\" target=\"_blank\">unpublishing</a>), it is generally not recommended. Other developers may rely on the package you published, and removing it from the registry would disrupt the work those dependent on your package.</p>\n<p>In fact, <code>npm</code> has a set of <a href=\"https://npmjs.com/policies/unpublish\" rel=\"noopener noreferrer\" target=\"_blank\">policies</a> on <em>when</em> a package can be unpublished. So if you're looking for guidance on when to <a href=\"https://docs.npmjs.com/unpublishing-packages-from-the-registry#when-to-unpublish\" rel=\"noopener noreferrer\" target=\"_blank\">unpublish</a> versus when to <a href=\"https://docs.npmjs.com/unpublishing-packages-from-the-registry#when-to-deprecate\" rel=\"noopener noreferrer\" target=\"_blank\">deprecate</a>, read the <a href=\"https://docs.npmjs.com/unpublishing-packages-from-the-registry\" rel=\"noopener noreferrer\" target=\"_blank\">documentation</a> on that.</p>\n<p><em>Have you ever deprecated an <code>npm</code> package? If so, let me know your process on <a href=\"https://twitter.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">Twitter</a>!</em></p>",
            "url": "https://bradgarropy.com/blog/deprecate-an-npm-package",
            "title": "🔴 deprecate an npm package",
            "date_modified": "2020-12-15T00:00:00.000Z",
            "date_published": "2020-12-15T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "disconnecting",
            "content_html": "<p>As you can see by my <a href=\"https://github.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">GitHub</a> contribution graph, my commits over the past four months have been lacking. There was a lot of organizational changes at work and I was struggling to find projects that excited me. In short, I was <a href=\"https://bradgarropy.com/blog/the-boredom-motivation-correlation\" rel=\"noopener noreferrer\" target=\"_blank\">bored</a>. I wasn't feeling motivated to code after work hours, so I took a break.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/github-contribution-graph.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/github-contribution-graph.png\" alt=\"contribution graph\" width=\"728\" height=\"142\"></a>\n<p>Instead of spending my free time coding, I took a bunch of trips, made some home improvements, and dove into some old and new hobbies.</p>\n<h2>✈️ trips</h2>\n<p>After not traveling for a few years due to COVID, taking so many trips back to back felt like a whirlwind of airports and hotels! A few of the trips were with the family, and others were for work.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/sayulita.jpg\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/sayulita.jpg\" alt=\"sayulita\" width=\"3264\" height=\"1836\"></a>\n<p>First we went to Sayulita, Mexico for a wedding. It felt like a beach trip combined with a family trip. Sayulita is such a cool little town, and we were golf carting around the whole place.</p>\n<p>Then I headed to California for <a href=\"https://reactathon.com\" rel=\"noopener noreferrer\" target=\"_blank\">Reactathon</a>. I got to hear some great talks, but the highlight of the trip was meeting so many online friends in person!</p>\n<p>Our next trip was a friends trip to Port Aransas, the coastal town we have to Austin. We had a fun few days playing on the beach and visting the aquarium.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/trello-nyc.jpg\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/trello-nyc.jpg\" alt=\"trello nyc\" width=\"4032\" height=\"3024\"></a>\n<p>A week later I was off to New York City to meet my <a href=\"https://trello.com\" rel=\"noopener noreferrer\" target=\"_blank\">Trello</a> co-workers in person for the very first time! We ate at some awesome restaurants and got some planning done that made me feel much more engaged at work.</p>\n<p>The last trip we took was to my family's farm in upstate New York. This was probably my favorite trip, because I felt so disconnected from everything that was bogging me down. The weather was perfect, and we spent a lot of time outside driving four wheelers, petting newborn calves at the barn, and playing in the corn fields.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/delaney-family.jpg\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/delaney-family.jpg\" alt=\"delaney family\" width=\"4898\" height=\"3266\"></a>\n<h2>🏡 home improvements</h2>\n<p>When we weren't traveling I was pretty invested in doing some repairs around the house and making it feel like a great place to hang out.</p>\n<p>In addition to fixing about a million things, we built and refinished a used swing set, and rehabilited a used grill. Then we spent our evenings on the patio, grilling and watching the kids play.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/grill.jpg\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/grill.jpg\" alt=\"grill\" width=\"4032\" height=\"2268\"></a>\n<p>I also invested in a cable machine for our home gym, which I now consider one hundred percent complete. Putting it together took way longer than I thought, but now I'm more excited about working out than ever!</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/cable-machine.jpg\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/cable-machine.jpg\" alt=\"cable machine\" width=\"4032\" height=\"2268\"></a>\n<h2>📚 hobbies</h2>\n<p>Without coding taking up all of my time in the evenings, I found myself revisiting old hobbies. I started up a <a href=\"https://worldofwarcraft.com\" rel=\"noopener noreferrer\" target=\"_blank\">World of Warcraft</a> account and leveled up a bunch of characters. I also got really into learning Spanish with <a href=\"https://duolingo.com\" rel=\"noopener noreferrer\" target=\"_blank\">Duolingo</a>. At the moment I'm almost at a 250 day streak!</p>\n<p>I had a goal to read <a href=\"https://bradgarropy.com/blog/goals-for-2022#books\" rel=\"noopener noreferrer\" target=\"_blank\">six books</a> this year, which I've far surpassed with all the newfound free time. I've been very interested in productivity and self improvement books, and some really cool creative books like the ones below.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/books.jpg\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/books.jpg\" alt=\"books\" width=\"4032\" height=\"2268\"></a>\n<p>And finally, I bought a very expensive new toy that turned out to be the most fun thing I've purchased in years. I got a <a href=\"https://onewheel.com\" rel=\"noopener noreferrer\" target=\"_blank\">OneWheel</a>! I picked it up pretty quick, and now it feels like snowboarding down the street. I've had it for a little over a month and it's got 100 miles on it already. It's been so much fun taking it through the neighborhood, into downtown Austin, and on bike trails!</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/onewheel.jpg\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/onewheel.jpg\" alt=\"onewheel\" width=\"4032\" height=\"2268\"></a>\n<h2>👨🏼‍💻 back to coding</h2>\n<p>I'm not sure what it was, but I felt compelled to start coding again about a month after our last trip. Maybe it was my birthday, or the opening of the new <a href=\"https://twitter.com/bradgarropy/status/1551624211898241026\" rel=\"noopener noreferrer\" target=\"_blank\">Atlassian office</a>, I don't know. But now I'm back, coding a little each night. As of today, I've already released <a href=\"https://github.com/bradgarropy/remix-starter\" rel=\"noopener noreferrer\" target=\"_blank\">three</a> <a href=\"https://github.com/bradgarropy/plop-helper-includes\" rel=\"noopener noreferrer\" target=\"_blank\">new</a> <a href=\"https://github.com/bradgarropy/plop-generator-remix-route\" rel=\"noopener noreferrer\" target=\"_blank\">projects</a>, and updated an <a href=\"https://github.com/bradgarropy/vscode-snippets\" rel=\"noopener noreferrer\" target=\"_blank\">old one</a>.</p>\n<p>When I <a href=\"https://twitter.com/bradgarropy/status/1564802254187761667\" rel=\"noopener noreferrer\" target=\"_blank\">tweeted</a> about my break, it seemed to resonate with a lot of people. Some are disconnecting right now, and others want to take time off in the future. I can tell it did me good, and I recommend taking time away from the keyboard as often as possible!</p>",
            "url": "https://bradgarropy.com/blog/disconnecting",
            "title": "📴 disconnecting",
            "date_modified": "2022-09-12T00:00:00.000Z",
            "date_published": "2022-09-12T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "drop-ctrl-high-profile",
            "content_html": "<p>I've been using a <a href=\"https://www.razer.com/gaming-keyboards/Razer-BlackWidow/RZ03-02860100-R3M1\" rel=\"noopener noreferrer\" target=\"_blank\">Razer Black Widow</a> keyboard for the past nine years. At this point it's like an extension of my hands. But as the rest of my setup has matured, I wanted to replace my gaming keyboard with something more professional. So for Christmas I picked up a <a href=\"https://drop.com/buy/drop-ctrl-high-profile-mechanical-keyboard\" rel=\"noopener noreferrer\" target=\"_blank\">Drop CTRL High Profile</a> mechanical keyboard.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/front.jpg\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/front.jpg\" alt=\"front\" width=\"3840\" height=\"2160\"></a>\n<p>The build quality of this keyboard is impressive, it weighs almost five pounds! That's because of the thick aluminum case that fully covers the switches, hence the name high profile. Even though it blocks some of the LED light, I've always preferred the high profile look.</p>\n<p>I've never typed on a real mechanical keyboard like this before, and let me say it's eye opening. This keyboard felt like a master's tool rather than a gamer's peripheral. Given its weight, the Drop CTRL feels super solid and doesn't wobble or slide when typing.</p>\n<p>I went with <a href=\"https://www.cherrymx.de/en/mx-original/mx-blue.html\" rel=\"noopener noreferrer\" target=\"_blank\">Cherry MX Blue</a> switches, as I prefer the tactile and clicky variety. The switches feel a bit heavier and mushier than the <a href=\"https://www.razer.com/razer-mechanical-switches\" rel=\"noopener noreferrer\" target=\"_blank\">Razer Greens</a> I was used to. However, the switches are hot swappable so I can try new a new flavor whenever I please!</p>\n<p>The Drop CTRL comes at an angle of six degrees which cannot be adjusted as the case does not have feet. My previous keybaord was steeper at around nine degrees. This has been the biggest learning curve for me, and I think I'll either get a wrist rest or some rubber feet to help position my hands properly.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/tkl.jpg\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/tkl.jpg\" alt=\"tkl\" width=\"3840\" height=\"2160\"></a>\n<p>And I almost forgot to mention, the CTRL is a tenkeyless (TKL) layout, which means there is no number pad. That's one more thing I've been adjusting to, but by no means a deal breaker.</p>\n<p>However, this board is gorgeous. It's got an LED strip that wraps the entire case and every key is individually lit. Using the <a href=\"https://drop.com/mechanical-keyboards/configurator\" rel=\"noopener noreferrer\" target=\"_blank\">Drop Keyboard Configurator</a> you can program each LED individually, and create different profiles. Beyond changing the lighting, the configurator also gives you control over the entire keymap.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/leds.jpg\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/leds.jpg\" alt=\"leds\" width=\"3840\" height=\"2160\"></a>\n<p>Between the keymap, the lights, the switches, the keycaps, and even the cable, I'm looking forward to making the <a href=\"https://drop.com/buy/drop-ctrl-high-profile-mechanical-keyboard\" rel=\"noopener noreferrer\" target=\"_blank\">Drop CTRL</a> feel uniquely mine. The <a href=\"https://drop.com/buy/drop-mito-gmk-pixel-custom-keycap-set\" rel=\"noopener noreferrer\" target=\"_blank\">MiTo Pixel</a> keycaps I ordered drop this summer, and maybe one day I'll get one of those <a href=\"https://swiftcables.net/products/dracula\" rel=\"noopener noreferrer\" target=\"_blank\">slick cables</a>.</p>\n<p><em>You can find this keyboard and all my other gear on the <a href=\"https://bradgarropy.com/uses\" rel=\"noopener noreferrer\" target=\"_blank\">uses</a> page.</em></p>",
            "url": "https://bradgarropy.com/blog/drop-ctrl-high-profile",
            "title": "⌨️ drop ctrl high profile",
            "date_modified": "2021-01-22T00:00:00.000Z",
            "date_published": "2021-01-22T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "dtxc-launch-day-analytics",
            "content_html": "<p>I did it, I successfully built and launched <a href=\"https://dailytexascountry.com\" rel=\"noopener noreferrer\" target=\"_blank\">Daily Texas Country</a>! But how do I determine success? I'm still not totally sure how to answer that question, but a good first step would be to track and understand our analytics. All of the statistics you see below are numbers from launch day, June 18.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/views.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/views.png\" alt=\"views\" width=\"845\" height=\"412\"></a>\n<p>Leading up to the launch I did five days of marketing hype on <a href=\"https://www.reddit.com/r/texascountry/comments/hbfusn/daily_texas_country_is_now_live_come_on_in_yall\" rel=\"noopener noreferrer\" target=\"_blank\">Reddit</a>, <a href=\"https://twitter.com/dailytxcountry/status/1273623540181471240\" rel=\"noopener noreferrer\" target=\"_blank\">Twitter</a>, <a href=\"https://www.instagram.com/stories/highlights/17930631190385569\" rel=\"noopener noreferrer\" target=\"_blank\">Instagram</a>, and <a href=\"https://www.facebook.com/dailytexascountry\" rel=\"noopener noreferrer\" target=\"_blank\">Facebook</a>. I've only got about 60 friends who are interested in this kind of music, so reaching 500 views proved that these marketing tactics actually worked. Specifically you can see that my posts in <a href=\"https://www.reddit.com/r/texascountry\" rel=\"noopener noreferrer\" target=\"_blank\">r/texascountry</a> really helped, leading the list of referrals.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/traffic.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/traffic.png\" alt=\"traffic\" width=\"629\" height=\"783\"></a>\n<p>It's no surprise that the vast majority of the DTXC vistors were new users. I'd only mentioned the development website to a few developers and some close friends. But what did surprise me is the percentage of desktop views. I really thought this website would drive the most traffic from social media sources, which are primarily accessed on mobile phones.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/users.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/users.png\" alt=\"users\" width=\"634\" height=\"461\"></a>\n\n\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/device.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/device.png\" alt=\"device\" width=\"634\" height=\"430\"></a>\n<p>And finally, a list of the most popular pages. Obviously the home page came out on top, but it makes me happy to see that <a href=\"https://dailytexascountry.com/playlists\" rel=\"noopener noreferrer\" target=\"_blank\">playlists</a> and <a href=\"https://dailytexascountry.com/episodes\" rel=\"noopener noreferrer\" target=\"_blank\">episodes</a> ranked ahead of <a href=\"https://dailytexascountry.com/posts\" rel=\"noopener noreferrer\" target=\"_blank\">posts</a>. Although posts take the most time and energy to create, playlists and episodes are the types of content that will keep visitors coming back to <a href=\"https://dailytexascountry.com\" rel=\"noopener noreferrer\" target=\"_blank\">Daily Texas Country</a> for a long time.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/pages.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/pages.png\" alt=\"pages\" width=\"845\" height=\"606\"></a>\n<p>While these numbers didn't blow my mind, I'm very happy with the launch day statistics. My marketing efforts caused me to reach more people than just my own social network, and proved that <a href=\"https://dailytexascountry.com\" rel=\"noopener noreferrer\" target=\"_blank\">Daily Texas Country</a> is something people want! Keep your eyes on the site for more to come!</p>",
            "url": "https://bradgarropy.com/blog/dtxc-launch-day-analytics",
            "title": "📈 dtxc launch day analytics",
            "date_modified": "2020-06-29T00:00:00.000Z",
            "date_published": "2020-06-29T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "elgato-cam-link-macbook-issues",
            "content_html": "<p>I recently got an M1 MacBook Pro and found that my <a href=\"https://www.amazon.com/Elgato-Cam-Link-Broadcast-Camcorder/dp/B07K3FN5MR/ref=sr_1_2?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">Elgato Cam Link 4k</a> was available as a camera source, but not showing any output.</p>\n<p>I fixed it by going to the Elgato <a href=\"https://www.elgato.com/en/downloads\" rel=\"noopener noreferrer\" target=\"_blank\">downloads</a> page and downloading the Camera Hub application. After installing the application, I clicked the icon in the toolbar and selected <em>Configure Camera Hub</em>. Then I command clicked (⌘) the menu with the slider icon to open the advanced settings and chose <em>Isochronous</em> for the <em>USB Transfer Mode</em>.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/elgato-camera-hub.jpg\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/elgato-camera-hub.jpg\" alt=\"elgato camera hub\" width=\"564\" height=\"681\"></a>\n<p>So far so good, that fixed any camera issues I had!</p>",
            "url": "https://bradgarropy.com/blog/elgato-cam-link-macbook-issues",
            "title": "📷 elgato cam link macbook issues",
            "date_modified": "2023-04-03T00:00:00.000Z",
            "date_published": "2023-04-03T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "eslint-configuration",
            "content_html": "<p>Previously I kept my <a href=\"https://eslint.org\" rel=\"noopener noreferrer\" target=\"_blank\">ESLint</a> configuration in my <a href=\"https://github.com/bradgarropy/dotfiles\" rel=\"noopener noreferrer\" target=\"_blank\">dotfiles</a> repository. But I'm a lazy developer, and I got tired of opening up <a href=\"https://github.com\" rel=\"noopener noreferrer\" target=\"_blank\">GitHub</a>, navigating to the repository, finding the file, and copy / pasting it to each new project I started. So I made my entire ESLint configuration an <a href=\"https://www.npmjs.com\" rel=\"noopener noreferrer\" target=\"_blank\">npm</a> package and <a href=\"https://www.npmjs.com/package/eslint-config-bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">published it</a>!</p>\n<h2>🔌 plugins</h2>\n<p>Beyond setting all of the basic rules, I've also included a few plugins in my configuration.</p>\n<ul>\n<li><code>eslint-plugin-jsx-a11y</code></li>\n<li><code>eslint-plugin-react</code></li>\n<li><code>eslint-plugin-react-hooks</code></li>\n</ul>\n<p>As I'm primarily a <a href=\"https://reactjs.org\" rel=\"noopener noreferrer\" target=\"_blank\">React</a> developer, these plugins help me with basic linting and the new rules of <a href=\"https://reactjs.org/docs/hooks-intro.html\" rel=\"noopener noreferrer\" target=\"_blank\">hooks</a>. Additionally, the <code>jsx-a11y</code> plugin nags me to write more accessible HTML.</p>\n<h2>💋 no prettier</h2>\n<p>As some of you may have noticed, this configuration does not include <a href=\"https://prettier.io\" rel=\"noopener noreferrer\" target=\"_blank\">Prettier</a>. I've intentionally kept my Prettier and ESLint configurations separate. I came to this conclusion because ESLint only applies to JavaScript, whereas Prettier can format multiple languages, so I didn't think it made sense to bundle them together.</p>\n<h2>👨🏼‍🏫 usage</h2>\n<p>First, install the configuration with command below. This not only installs the ESLint configuration, but all peer dependencies as well (like ESLint and the plugins).</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"zsh\" data-theme=\"Shades of Purple\"><code data-language=\"zsh\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FAD000\">npx</span><span style=\"color:#A5FF90\"> install-peerdeps</span><span style=\"color:#FF628C\"> --dev</span><span style=\"color:#A5FF90\"> eslint-config-bradgarropy</span></span></code></pre></figure>\n<p>Next, create a <code>.eslintrc</code> file in the root of your project and instruct it to extend the <code>bradgarropy</code> configuration.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"json\" data-theme=\"Shades of Purple\"><code data-language=\"json\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#E1EFFF\">{</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    \"</span><span style=\"color:#FAD000\">extends</span><span style=\"color:#E1EFFF\">\"</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#92FC79\"> \"bradgarropy\"</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span></span></code></pre></figure>\n<p>You should now be good to go! If you wish to further customize the configuration, you can edit your <code>.eslintrc</code> and add more settings.</p>\n<p>If you run into any trouble, <a href=\"https://github.com/bradgarropy/eslint-config-bradgarropy/issues\" rel=\"noopener noreferrer\" target=\"_blank\">create an issue</a> and I'll take a look! And if you like it, give it a ⭐.</p>",
            "url": "https://bradgarropy.com/blog/eslint-configuration",
            "title": "💎 eslint configuration",
            "date_modified": "2019-04-16T00:00:00.000Z",
            "date_published": "2019-04-16T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "firestore-crud-operations",
            "content_html": "<p>I recently added a few videos to my <a href=\"https://www.youtube.com/watch?v=FArYmEBCMt0&#x26;list=PL6Mu1AMmTL-sSswsqShJ5fbIr9XjYHGFm\" rel=\"noopener noreferrer\" target=\"_blank\">Firebase series</a> which cover <a href=\"https://www.youtube.com/watch?v=q13WbRYXrwU&#x26;list=PL6Mu1AMmTL-sSswsqShJ5fbIr9XjYHGFm\" rel=\"noopener noreferrer\" target=\"_blank\">CRUD operations in Firestore</a>. But watching a video can get tiresome if you're looking for a snippet of code. These methods are something I'll come back to time and time again, so here's a quick copy and paste reference for CRUD operations in <a href=\"https://firebase.google.com/products/firestore\" rel=\"noopener noreferrer\" target=\"_blank\">Firestore</a>.</p>\n<h2>🆕 create</h2>\n<p>This snippet creates a new document in a collection. It relies on Firestore to automatically generate a document <code>id</code>.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"javascript\" data-theme=\"Shades of Purple\"><code data-language=\"javascript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FF9D00\">const</span><span style=\"color:#FAD000\"> createUser</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#FF9D00;font-style:italic\"> async</span><span style=\"color:#9EFFFF\"> user </span><span style=\"color:#FAD000\">=></span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    const</span><span style=\"color:#9EFFFF\"> ref </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#FF9D00\"> await</span><span style=\"color:#9EFFFF\"> firestore</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">collection</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">users</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">).</span><span style=\"color:#FAD000\">add</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#9EFFFF\">user</span><span style=\"color:#E1EFFF\">)</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    const</span><span style=\"color:#9EFFFF\"> newUser </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#80FFBB\">        id</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#9EFFFF\"> ref</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">id</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">        ...</span><span style=\"color:#9EFFFF\">user</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    return</span><span style=\"color:#9EFFFF\"> newUser</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span></span></code></pre></figure>\n<h2>📚 read</h2>\n<p>This function retrieves all documents from a collection. It merges the <code>id</code> with the document data.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"javascript\" data-theme=\"Shades of Purple\"><code data-language=\"javascript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FF9D00\">const</span><span style=\"color:#FAD000\"> readUsers</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#FF9D00;font-style:italic\"> async</span><span style=\"color:#E1EFFF\"> ()</span><span style=\"color:#FAD000\"> =></span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    const</span><span style=\"color:#9EFFFF\"> snapshot </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#FF9D00\"> await</span><span style=\"color:#9EFFFF\"> firestore</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">collection</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">users</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">).</span><span style=\"color:#FAD000\">get</span><span style=\"color:#E1EFFF\">()</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    const</span><span style=\"color:#9EFFFF\"> users </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#9EFFFF\"> snapshot</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FFEE80\">docs</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">map</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#9EFFFF\">doc </span><span style=\"color:#FAD000\">=></span><span style=\"color:#E1EFFF\"> ({</span></span>\n<span data-line=\"\"><span style=\"color:#80FFBB\">        id</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#9EFFFF\"> doc</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">id</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">        ...</span><span style=\"color:#9EFFFF\">doc</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">data</span><span style=\"color:#E1EFFF\">(),</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    }))</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    return</span><span style=\"color:#9EFFFF\"> users</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span></span></code></pre></figure>\n<p>This method gets a single document by <code>id</code> from a collection. Similar to the function above, it combines the <code>id</code> and the document data.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"javascript\" data-theme=\"Shades of Purple\"><code data-language=\"javascript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FF9D00\">const</span><span style=\"color:#FAD000\"> readUser</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#FF9D00;font-style:italic\"> async</span><span style=\"color:#9EFFFF\"> id </span><span style=\"color:#FAD000\">=></span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    const</span><span style=\"color:#9EFFFF\"> doc </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#FF9D00\"> await</span><span style=\"color:#9EFFFF\"> firestore</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">collection</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">users</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">).</span><span style=\"color:#FAD000\">doc</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#9EFFFF\">id</span><span style=\"color:#E1EFFF\">).</span><span style=\"color:#FAD000\">get</span><span style=\"color:#E1EFFF\">()</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    const</span><span style=\"color:#9EFFFF\"> user </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#80FFBB\">        id</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#9EFFFF\"> doc</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">id</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">        ...</span><span style=\"color:#9EFFFF\">doc</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">data</span><span style=\"color:#E1EFFF\">(),</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    return</span><span style=\"color:#9EFFFF\"> user</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span></span></code></pre></figure>\n<p>Many times you won't be pulling documents by <code>id</code>, but rather searching them by a field name. This function gets a document by its <code>name</code> field. Again, it merges the <code>id</code> with the data when returning the document.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"javascript\" data-theme=\"Shades of Purple\"><code data-language=\"javascript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FF9D00\">const</span><span style=\"color:#FAD000\"> readUserByName</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#FF9D00;font-style:italic\"> async</span><span style=\"color:#9EFFFF\"> name </span><span style=\"color:#FAD000\">=></span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    const</span><span style=\"color:#9EFFFF\"> snapshot </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#FF9D00\"> await</span><span style=\"color:#9EFFFF\"> firestore</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">        .</span><span style=\"color:#FAD000\">collection</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">users</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">)</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">        .</span><span style=\"color:#FAD000\">limit</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#FF628C\">1</span><span style=\"color:#E1EFFF\">)</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">        .</span><span style=\"color:#FAD000\">where</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">name</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">,</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">==</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">,</span><span style=\"color:#9EFFFF\"> name</span><span style=\"color:#E1EFFF\">)</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">        .</span><span style=\"color:#FAD000\">get</span><span style=\"color:#E1EFFF\">()</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    const</span><span style=\"color:#9EFFFF\"> doc </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#9EFFFF\"> snapshot</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">docs</span><span style=\"color:#E1EFFF\">[</span><span style=\"color:#FF628C\">0</span><span style=\"color:#E1EFFF\">]</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    const</span><span style=\"color:#9EFFFF\"> user </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#80FFBB\">        id</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#9EFFFF\"> doc</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">id</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">        ...</span><span style=\"color:#9EFFFF\">doc</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">data</span><span style=\"color:#E1EFFF\">(),</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    return</span><span style=\"color:#9EFFFF\"> user</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span></span></code></pre></figure>\n<h2>☝🏼 update</h2>\n<p>This function updates an existing document by <code>id</code> in a collection. Updates are merged into the existing document. A second call to <code>firestore</code> is made to retrieve the latest document. The returned object combines the <code>id</code> and the document data.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"javascript\" data-theme=\"Shades of Purple\"><code data-language=\"javascript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FF9D00\">const</span><span style=\"color:#FAD000\"> updateUser</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#FF9D00;font-style:italic\"> async</span><span style=\"color:#E1EFFF\"> (</span><span style=\"color:#9EFFFF\">id</span><span style=\"color:#E1EFFF\">,</span><span style=\"color:#9EFFFF\"> updates</span><span style=\"color:#E1EFFF\">)</span><span style=\"color:#FAD000\"> =></span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    await</span><span style=\"color:#9EFFFF\"> firestore</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">collection</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">users</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">).</span><span style=\"color:#FAD000\">doc</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#9EFFFF\">id</span><span style=\"color:#E1EFFF\">).</span><span style=\"color:#FAD000\">update</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#9EFFFF\">updates</span><span style=\"color:#E1EFFF\">)</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    const</span><span style=\"color:#9EFFFF\"> doc </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#FF9D00\"> await</span><span style=\"color:#9EFFFF\"> firestore</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">collection</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">users</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">).</span><span style=\"color:#FAD000\">doc</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#9EFFFF\">id</span><span style=\"color:#E1EFFF\">).</span><span style=\"color:#FAD000\">get</span><span style=\"color:#E1EFFF\">()</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    const</span><span style=\"color:#9EFFFF\"> user </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#80FFBB\">        id</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#9EFFFF\"> doc</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">id</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">        ...</span><span style=\"color:#9EFFFF\">doc</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">data</span><span style=\"color:#E1EFFF\">(),</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    return</span><span style=\"color:#9EFFFF\"> user</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span></span></code></pre></figure>\n<p>If you are looking to replace a document, see the <code>set</code> <a href=\"https://firebase.google.com/docs/firestore/manage-data/add-data#set_a_document\" rel=\"noopener noreferrer\" target=\"_blank\">documentation</a>.</p>\n<h2>⛔ delete</h2>\n<p>This function deletes a document by <code>id</code> and returns that <code>id</code>.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"javascript\" data-theme=\"Shades of Purple\"><code data-language=\"javascript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FF9D00\">const</span><span style=\"color:#FAD000\"> deleteUser</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#FF9D00;font-style:italic\"> async</span><span style=\"color:#9EFFFF\"> id </span><span style=\"color:#FAD000\">=></span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    await</span><span style=\"color:#9EFFFF\"> firestore</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">collection</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">users</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">).</span><span style=\"color:#FAD000\">doc</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#9EFFFF\">id</span><span style=\"color:#E1EFFF\">).</span><span style=\"color:#FAD000\">delete</span><span style=\"color:#E1EFFF\">()</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    return</span><span style=\"color:#9EFFFF\"> id</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span></span></code></pre></figure>\n<p>I hope this little cheat sheet provides as much value to you as it already has to me!</p>",
            "url": "https://bradgarropy.com/blog/firestore-crud-operations",
            "title": "💩 firestore crud operations",
            "date_modified": "2021-04-26T00:00:00.000Z",
            "date_published": "2021-04-26T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "fixing-react-hot-loader-in-gatsby",
            "content_html": "<p>Have you ever cloned a fresh copy of <a href=\"http://gatsbyjs.com\" rel=\"noopener noreferrer\" target=\"_blank\">Gatsby</a>, installed the dependencies, and booted up the development server only to be greeted by this ugly warning in your console?</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/warning.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/warning.png\" alt=\"warning\" width=\"1158\" height=\"406\"></a>\n<p>Well I have. Enough times to drive me to actually address the issue. The problem lies with <a href=\"https://github.com/gaearon/react-hot-loader\" rel=\"noopener noreferrer\" target=\"_blank\">react-hot-loader</a>, the package Gatsby uses for hot reloading <a href=\"https://reactjs.org\" rel=\"noopener noreferrer\" target=\"_blank\">react</a> components. The warning is telling us that the version of <code>@hot-loader/react-dom</code> is not compatible with the installed version of <code>react</code>.</p>\n<p>To fix this, first install the latest version of <code>@hot-loader/react-dom</code>.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"zsh\" data-theme=\"Shades of Purple\"><code data-language=\"zsh\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FAD000\">npm</span><span style=\"color:#A5FF90\"> install</span><span style=\"color:#FF628C\"> --save-dev</span><span style=\"color:#A5FF90\"> @hot-loader/react-dom</span></span></code></pre></figure>\n<p>Then modify the <code>webpack</code> configuration in the <code>gatsby-node.js</code> file. The following code tells Gatsby to use the hot version of <code>react-dom</code> only while running in <code>development</code>.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"javascript\" data-theme=\"Shades of Purple\"><code data-language=\"javascript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FF9D00\">const</span><span style=\"color:#FAD000\"> onCreateWebpackConfig</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#E1EFFF\"> ({</span><span style=\"color:#9EFFFF\">stage</span><span style=\"color:#E1EFFF\">,</span><span style=\"color:#9EFFFF\"> actions</span><span style=\"color:#E1EFFF\">})</span><span style=\"color:#FAD000\"> =></span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    if</span><span style=\"color:#E1EFFF\"> (</span><span style=\"color:#9EFFFF\">stage</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">startsWith</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">develop</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">))</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">        actions</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">setWebpackConfig</span><span style=\"color:#E1EFFF\">({</span></span>\n<span data-line=\"\"><span style=\"color:#80FFBB\">            resolve</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#80FFBB\">                alias</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#E1EFFF\"> {</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">react-dom</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">@hot-loader/react-dom</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">},</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">            },</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">        })</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span></span></code></pre></figure>\n<p>And that's it, no more annoying error message! Hopefully one day Gatsby will adopt <a href=\"https://github.com/facebook/react/tree/main/packages/react-refresh\" rel=\"noopener noreferrer\" target=\"_blank\">react-refresh</a>, eliminate this warning message, and give us stateful component reloading too!</p>",
            "url": "https://bradgarropy.com/blog/fixing-react-hot-loader-in-gatsby",
            "title": "🔥 fixing react-hot-loader in gatsby",
            "date_modified": "2020-11-10T00:00:00.000Z",
            "date_published": "2020-11-10T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "from-styled-components-to-css-variables",
            "content_html": "<p>I read that if a <a href=\"https://twitter.com/bradgarropy/status/1382187648547115008\" rel=\"noopener noreferrer\" target=\"_blank\">tweet thread</a> is more than three tweets long it should have been a blog post. Well, then so be it! Let me tell you about the time I converted my website from a <a href=\"https://styled-components.com\" rel=\"noopener noreferrer\" target=\"_blank\">styled-components</a> theme to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties\" rel=\"noopener noreferrer\" target=\"_blank\">css variables</a> on a whim.</p>\n<p>The first thing I had to do was convert the <code>theme</code> object into custom properties. I placed the variables in the <code>:root</code> so that they're accessible throughout my site.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"javascript\" data-theme=\"Shades of Purple\"><code data-language=\"javascript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FF9D00\">const</span><span style=\"color:#9EFFFF\"> GlobalStyles </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#FAD000\"> createGlobalStyle</span><span style=\"color:#3AD900\">`</span></span>\n<span data-line=\"\"><span style=\"color:#3AD900\">    :root {</span></span>\n<span data-line=\"\"><span style=\"color:#3AD900\">        /* colors */</span></span>\n<span data-line=\"\"><span style=\"color:#3AD900\">        --black: #000000;</span></span>\n<span data-line=\"\"><span style=\"color:#3AD900\">        --darkGrey: #aaaaaa;</span></span>\n<span data-line=\"\"><span style=\"color:#3AD900\">        --grey: #dddddd;</span></span>\n<span data-line=\"\"><span style=\"color:#3AD900\">        --white: #ffffff;</span></span>\n<span data-line=\"\"><span style=\"color:#3AD900\">        --purple: #c792ea;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#3AD900\">        /* palette */</span></span>\n<span data-line=\"\"><span style=\"color:#3AD900\">        --primary: var(--purple);</span></span>\n<span data-line=\"\"><span style=\"color:#3AD900\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#3AD900\">`</span></span></code></pre></figure>\n<p>You'll see <code>createGlobalStyle</code> here because I'm still using <code>styled-components</code>, just not the <code>ThemeProvider</code>. I'm considering moving to <a href=\"https://github.com/css-modules/css-modules\" rel=\"noopener noreferrer\" target=\"_blank\">css modules</a> in the future.</p>\n<p>Without a <code>theme</code>, I was able to remove the <code>&#x3C;ThemeProvider></code> wrapper in my <code>&#x3C;Layout></code> component. This also allowed me to completely remove the custom <code>render</code> method for my <code>jest</code> tests.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"javascript\" data-theme=\"Shades of Purple\"><code data-language=\"javascript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FF9D00\">const</span><span style=\"color:#FAD000\"> Layout</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#E1EFFF\"> ({</span><span style=\"color:#9EFFFF\">children</span><span style=\"color:#E1EFFF\">})</span><span style=\"color:#FAD000\"> =></span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    return</span><span style=\"color:#E1EFFF\"> (</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">        &#x3C;></span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">            &#x3C;</span><span style=\"color:#80FFBB\">GlobalStyles</span><span style=\"color:#9EFFFF\"> /></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">            &#x3C;</span><span style=\"color:#80FFBB\">Container</span><span style=\"color:#9EFFFF\">></span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">                &#x3C;</span><span style=\"color:#80FFBB\">Header</span><span style=\"color:#9EFFFF\"> /></span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">                &#x3C;</span><span style=\"color:#80FFBB\">Content</span><span style=\"color:#9EFFFF\">></span><span style=\"color:#E1EFFF\">{</span><span style=\"color:#9EFFFF\">children</span><span style=\"color:#E1EFFF\">}</span><span style=\"color:#9EFFFF\">&#x3C;/</span><span style=\"color:#80FFBB\">Content</span><span style=\"color:#9EFFFF\">></span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">                &#x3C;</span><span style=\"color:#80FFBB\">Footer</span><span style=\"color:#9EFFFF\"> /></span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">            &#x3C;/</span><span style=\"color:#80FFBB\">Container</span><span style=\"color:#9EFFFF\">></span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">        &#x3C;/></span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    )</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span></span></code></pre></figure>\n<p>All that was left was to replace all of the theme variables with custom properties. This left me with styles that were much more readable as opposed to the nasty destructuring of <code>styled-components</code> variables.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"javascript\" data-theme=\"Shades of Purple\"><code data-language=\"javascript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FF9D00\">const</span><span style=\"color:#9EFFFF\"> NavigationLink </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#FAD000\"> styled</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#9EFFFF\">Link</span><span style=\"color:#E1EFFF\">)</span><span style=\"color:#3AD900\">`</span></span>\n<span data-line=\"\"><span style=\"color:#3AD900\">    color: var(--black);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#3AD900\">    :hover {</span></span>\n<span data-line=\"\"><span style=\"color:#3AD900\">        color: var(--primary);</span></span>\n<span data-line=\"\"><span style=\"color:#3AD900\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#3AD900\">`</span></span></code></pre></figure>\n<p>Overall it was a <a href=\"https://github.com/bradgarropy/bradgarropy.com/pull/197\" rel=\"noopener noreferrer\" target=\"_blank\">net negative PR</a>, as I removed the need for the <code>&#x3C;ThemeProvider></code> in a few places. Although the change was small, it touched plenty of files. Luckily my <a href=\"https://github.com/bradgarropy/bradgarropy.com/actions/runs/746999993\" rel=\"noopener noreferrer\" target=\"_blank\">tests</a> gave me confidence that everything still worked.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/pr-stats.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/pr-stats.png\" alt=\"pr stats\" width=\"389\" height=\"105\"></a>\n<p>In my opinion, transitioning from a <code>styled-components</code> theme to <code>css</code> custom properties has many benefits.</p>\n<ul>\n<li>Runtime access to variables</li>\n<li>Improved style readability</li>\n<li>No rendering overhead</li>\n<li>Reduced bundle size</li>\n<li>Simpler test setup</li>\n</ul>\n<p>I'm considering dropping CSS-in-JS completely now that vanilla <code>css</code> offers variables and modules, as that was really the only reason I chose <code>styled-components</code> in the first place.</p>\n<p>What about you, what's your preferred method of authoring styles?</p>",
            "url": "https://bradgarropy.com/blog/from-styled-components-to-css-variables",
            "title": "💅🏼 from styled components to css variables",
            "date_modified": "2021-04-16T00:00:00.000Z",
            "date_published": "2021-04-16T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "gatsby-dark-mode",
            "content_html": "<p>You're not one of the cool kids nowadays if you don't have a dark mode on your site. So I figured it was time to join the club and get this implemented. My previous work <a href=\"https://bradgarropy.com/blog/from-styled-components-to-css-variables\" rel=\"noopener noreferrer\" target=\"_blank\">converting styled component variables to css custom properties</a> laid the groundwork for this feature.</p>\n<p><em>Here's the full <a href=\"https://github.com/bradgarropy/bradgarropy.com/pull/205/files\" rel=\"noopener noreferrer\" target=\"_blank\">pull request</a>, but I gotta warn you, it's pretty messy.</em></p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/dark-mode.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/dark-mode.png\" alt=\"dark mode\" width=\"1561\" height=\"1157\"></a>\n<h2>🎨 color intentions</h2>\n<p>The first step was to separate the colors from their intentions. You may have not heard the term <em>intention</em> before, but it essentially means the intended use of a color. For example, you could have intentions like <code>heading-color</code>, <code>text-color</code>, or <code>background-color</code>. This gives us a layer of abstraction, so we can swap out light and dark values based on the color theme.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"css\" data-theme=\"Shades of Purple\"><code data-language=\"css\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#E1EFFF;font-style:italic\">:</span><span style=\"color:#FFB454;font-style:italic\">root</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B362FF;font-style:italic\">    /* colors */</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">    --black</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#E1EFFF\"> #</span><span style=\"color:#FFEE80\">000000</span><span style=\"color:#E1EFFF\">;</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">    --darkGrey</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#E1EFFF\"> #</span><span style=\"color:#FFEE80\">aaaaaa</span><span style=\"color:#E1EFFF\">;</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">    --grey</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#E1EFFF\"> #</span><span style=\"color:#FFEE80\">dddddd</span><span style=\"color:#E1EFFF\">;</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">    --white</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#E1EFFF\"> #</span><span style=\"color:#FFEE80\">ffffff</span><span style=\"color:#E1EFFF\">;</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">    --purple</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#E1EFFF\"> #</span><span style=\"color:#FFEE80\">c792ea</span><span style=\"color:#E1EFFF\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B362FF;font-style:italic\">    /* intentions */</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">    --primary</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#FF9D00\"> var</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#9EFFFF\">--purple</span><span style=\"color:#E1EFFF\">);</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">    --text</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#FF9D00\"> var</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#9EFFFF\">--black</span><span style=\"color:#E1EFFF\">);</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">    --background</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#FF9D00\"> var</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#9EFFFF\">--white</span><span style=\"color:#E1EFFF\">);</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span></span></code></pre></figure>\n<h2>🎣 app context</h2>\n<p>Next, I needed a way to hold the selected color theme in global state. I used the <code>Context</code> API to provide the theme to the application. The context wraps the <code>Layout</code> component, and I used <a href=\"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-layout\" rel=\"noopener noreferrer\" target=\"_blank\">gatsby-plugin-layout</a> to render the <code>Layout</code> on every page. This plugin also has the benefit of preserving the context values through page navigation.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"javascript\" data-theme=\"Shades of Purple\"><code data-language=\"javascript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FF9D00\">const</span><span style=\"color:#FAD000\"> AppProvider</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#E1EFFF\"> ({</span><span style=\"color:#9EFFFF\">children</span><span style=\"color:#E1EFFF\">})</span><span style=\"color:#FAD000\"> =></span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    const</span><span style=\"color:#E1EFFF\"> [</span><span style=\"color:#9EFFFF\">theme</span><span style=\"color:#E1EFFF\">,</span><span style=\"color:#9EFFFF\"> setTheme</span><span style=\"color:#E1EFFF\">]</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#FAD000\"> useState</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">light</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">)</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    const</span><span style=\"color:#9EFFFF\"> context </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">        theme</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">        setTheme</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    return</span><span style=\"color:#9EFFFF\"> &#x3C;</span><span style=\"color:#80FFBB\">AppContext.Provider</span><span style=\"color:#FAD000;font-style:italic\"> value</span><span style=\"color:#FF9D00\">=</span><span style=\"color:#E1EFFF\">{</span><span style=\"color:#9EFFFF\">context</span><span style=\"color:#E1EFFF\">}</span><span style=\"color:#9EFFFF\">></span><span style=\"color:#E1EFFF\">{</span><span style=\"color:#9EFFFF\">children</span><span style=\"color:#E1EFFF\">}</span><span style=\"color:#9EFFFF\">&#x3C;/</span><span style=\"color:#80FFBB\">AppContext.Provider</span><span style=\"color:#9EFFFF\">></span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span></span></code></pre></figure>\n<h2>🔆 toggle button</h2>\n<p>Finally, I tie everything together with a toggle button. This button shows a moon icon if the current theme is <code>light</code>, and a sun icon if the current theme is <code>dark</code>. The theme toggle uses the <code>App</code> context to get and set the current <code>theme</code> when clicked.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"javascript\" data-theme=\"Shades of Purple\"><code data-language=\"javascript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FF9D00\">const</span><span style=\"color:#FAD000\"> ColorTheme</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#E1EFFF\"> ()</span><span style=\"color:#FAD000\"> =></span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    const</span><span style=\"color:#E1EFFF\"> {</span><span style=\"color:#9EFFFF\">theme</span><span style=\"color:#E1EFFF\">,</span><span style=\"color:#9EFFFF\"> setTheme</span><span style=\"color:#E1EFFF\">}</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#FAD000\"> useApp</span><span style=\"color:#E1EFFF\">()</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    const</span><span style=\"color:#9EFFFF\"> label </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#9EFFFF\"> theme </span><span style=\"color:#FF9D00\">===</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">light</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#FF9D00\"> ?</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">dark</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#FF9D00\"> :</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">light</span><span style=\"color:#92FC79\">\"</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FAD000\">    useEffect</span><span style=\"color:#E1EFFF\">(()</span><span style=\"color:#FAD000\"> =></span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">        const</span><span style=\"color:#9EFFFF\"> root </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#9EFFFF\"> document</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">documentElement</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">        root</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FFEE80\">style</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">setProperty</span><span style=\"color:#E1EFFF\">(</span></span>\n<span data-line=\"\"><span style=\"color:#92FC79\">            \"</span><span style=\"color:#A5FF90\">--background</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">            theme </span><span style=\"color:#FF9D00\">===</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">light</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#FF9D00\"> ?</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">var(--white)</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#FF9D00\"> :</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">var(--black)</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">        )</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">        root</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FFEE80\">style</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">setProperty</span><span style=\"color:#E1EFFF\">(</span></span>\n<span data-line=\"\"><span style=\"color:#92FC79\">            \"</span><span style=\"color:#A5FF90\">--text</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">            theme </span><span style=\"color:#FF9D00\">===</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">light</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#FF9D00\"> ?</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">var(--black)</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#FF9D00\"> :</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">var(--white)</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">        )</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    },</span><span style=\"color:#E1EFFF\"> [</span><span style=\"color:#9EFFFF\">theme</span><span style=\"color:#E1EFFF\">])</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    const</span><span style=\"color:#FAD000\"> onClick</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#E1EFFF\"> ()</span><span style=\"color:#FAD000\"> =></span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">        if</span><span style=\"color:#E1EFFF\"> (</span><span style=\"color:#9EFFFF\">theme </span><span style=\"color:#FF9D00\">===</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">light</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">)</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FAD000\">            setTheme</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">dark</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">)</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">        }</span><span style=\"color:#FF9D00\"> else</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FAD000\">            setTheme</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">light</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">)</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    return</span><span style=\"color:#E1EFFF\"> (</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">        &#x3C;</span><span style=\"color:#80FFBB\">ThemeToggle</span><span style=\"color:#FAD000;font-style:italic\"> onClick</span><span style=\"color:#FF9D00\">=</span><span style=\"color:#E1EFFF\">{</span><span style=\"color:#9EFFFF\">onClick</span><span style=\"color:#E1EFFF\">}</span><span style=\"color:#FAD000;font-style:italic\"> aria-label</span><span style=\"color:#FF9D00\">=</span><span style=\"color:#E1EFFF\">{</span><span style=\"color:#9EFFFF\">label</span><span style=\"color:#E1EFFF\">}</span><span style=\"color:#9EFFFF\">></span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">            {</span><span style=\"color:#9EFFFF\">theme </span><span style=\"color:#FF9D00\">===</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">light</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#FF9D00\"> ?</span><span style=\"color:#9EFFFF\"> &#x3C;</span><span style=\"color:#80FFBB\">Moon</span><span style=\"color:#9EFFFF\"> /> </span><span style=\"color:#FF9D00\">:</span><span style=\"color:#9EFFFF\"> &#x3C;</span><span style=\"color:#80FFBB\">Sun</span><span style=\"color:#9EFFFF\"> /></span><span style=\"color:#E1EFFF\">}</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">        &#x3C;/</span><span style=\"color:#80FFBB\">ThemeToggle</span><span style=\"color:#9EFFFF\">></span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    )</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span></span></code></pre></figure>\n<p>When the <code>theme</code> changes, a <code>useEffect</code> runs and updates the custom properties for the color intentions. At this time I only have two intentions that need updating. In the future, if I have more properties to change, this effect can be improved by creating a <code>css</code> class that overrides the properties, and applying it to the <code>:root</code> element.</p>\n<h2>🌟 improvements</h2>\n<p>While this dark modes works very well, and persists through page navigation, it's far from complete. It still lacks the following features:</p>\n<ul>\n<li>initialize the color theme to match system preferences</li>\n<li>persist the color theme across page reloads</li>\n</ul>\n<p><a href=\"https://twitter.com/joshwcomeau\" rel=\"noopener noreferrer\" target=\"_blank\">Josh Comeau</a> wrote a great article about the <a href=\"https://www.joshwcomeau.com/react/dark-mode\" rel=\"noopener noreferrer\" target=\"_blank\">perfect dark mode</a>, which I'll use as a reference to implement these last two features.</p>\n<p><strong>Give dark mode a try, <a href=\"#\">click the moon</a> at the top of the page!</strong></p>",
            "url": "https://bradgarropy.com/blog/gatsby-dark-mode",
            "title": "🌑 gatsby dark mode",
            "date_modified": "2021-04-30T00:00:00.000Z",
            "date_published": "2021-04-30T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "gatsby-vs-nextjs-markdown-blog",
            "content_html": "<p>Lately <a href=\"https://nextjs.org\" rel=\"noopener noreferrer\" target=\"_blank\">Next.js</a> has been gaining a lot of steam, and I've been looking for an opportunity to give it a real shot. This website has been a <a href=\"https://gatsbyjs.com\" rel=\"noopener noreferrer\" target=\"_blank\">Gatsby</a> website since its inception, so I created a <a href=\"https://github.com/bradgarropy/bradgarropy.com/tree/next\" rel=\"noopener noreferrer\" target=\"_blank\">branch</a> and began the conversion process. The conversion is now finished, and it's time to reflect, evaluate, and make up my mind.</p>\n<h2>🟣 gatsby code</h2>\n<p>At first I was <a href=\"https://twitter.com/bradgarropy/status/1343788025684357122\" rel=\"noopener noreferrer\" target=\"_blank\">loving</a> hacking away so much Gatsby specific code. I removed every <code>gatsby-*</code> package, got rid of all the <code>graphql</code>, and deleted the <code>gatsby-config.js</code> file with a smile. All that proprietary code was replaced with plain old <code>node</code> functions.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/diff.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/diff.png\" alt=\"diff\" width=\"203\" height=\"44\"></a>\n<p>By the end of it all I was definitely net negative, but I also had to add my fair share of code. My diff was nowhere near as impressive as <a href=\"https://twitter.com/leeerob\" rel=\"noopener noreferrer\" target=\"_blank\">Lee Robinson</a>'s when he converted the <a href=\"https://github.com/leerob/gatsby-to-nextjs\" rel=\"noopener noreferrer\" target=\"_blank\">gatsby-starter-blog to Next.js</a>.</p>\n<h2>👨🏼‍💻 development environment</h2>\n<p>Once I had things up and running, I started to notice that the Next.js development server seemed slow. I realized that Next.js operates in a very different way than Gatsby.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th align=\"left\">Platform</th><th align=\"left\">Operation</th><th align=\"left\">Time</th></tr></thead><tbody><tr><td align=\"left\">Gatsby</td><td align=\"left\"><code>start</code></td><td align=\"left\">24 seconds</td></tr><tr><td align=\"left\">Gatsby</td><td align=\"left\"><code>build</code></td><td align=\"left\">27 seconds</td></tr><tr><td align=\"left\">Next.js</td><td align=\"left\"><code>start</code></td><td align=\"left\">7 seconds</td></tr><tr><td align=\"left\">Next.js</td><td align=\"left\"><code>build</code></td><td align=\"left\">19 seconds</td></tr></tbody></table>\n<p>While these numbers suggest that Next.js is faster by all accounts, the development server didn't feel that way. I believe this is because Gatsby does all the work up front, whereas Next.js builds its pages on the fly.</p>\n<p>I much preferred Gatsby's slow start for a fast runtime, as I usually only start the server once, but navigate pages constantly while working on the site. Luckily, both sites were <em>blazing fast</em> once built and deployed.</p>\n<h2>🔻 markdown support</h2>\n<p>Markdown parsing and transformation is key when creating a blog. I usually rely on Gatsby's <a href=\"https://www.gatsbyjs.com/plugins\" rel=\"noopener noreferrer\" target=\"_blank\">plugin ecosystem</a> to handle all that for me, but with Next.js I was on my own. I had to become an expert at <a href=\"https://github.com/remarkjs/remark\" rel=\"noopener noreferrer\" target=\"_blank\">remark</a> and its plugins in order to get the transformations I wanted. I even had to <a href=\"https://twitter.com/bradgarropy/status/1345903752314761218\" rel=\"noopener noreferrer\" target=\"_blank\">fix a bug</a> in one of the libraries!</p>\n<ul>\n<li>GitHub Flavored Markdown</li>\n<li>Linked headings</li>\n<li>Media embeds</li>\n<li>Code highlighting</li>\n<li>External links open in new tab</li>\n</ul>\n<p>In order to accomplish this I dug deep into the list of <a href=\"https://github.com/remarkjs/remark/blob/main/doc/plugins.md\" rel=\"noopener noreferrer\" target=\"_blank\">remark plugins</a>, and leveraged a few of them to create my own <code>parseMarkdown</code> function. Even though it's only twenty lines of code, this simple function took a lot of investment to create, and it's still not perfect.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"javascript\" data-theme=\"Shades of Purple\"><code data-language=\"javascript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FF9D00\">const</span><span style=\"color:#FAD000\"> parseMarkdown</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#FF9D00;font-style:italic\"> async</span><span style=\"color:#9EFFFF\"> file </span><span style=\"color:#FAD000\">=></span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    const</span><span style=\"color:#E1EFFF\"> {</span><span style=\"color:#9EFFFF\">data</span><span style=\"color:#E1EFFF\">,</span><span style=\"color:#9EFFFF\"> content</span><span style=\"color:#E1EFFF\">}</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#FAD000\"> matter</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#9EFFFF\">file</span><span style=\"color:#E1EFFF\">)</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    const</span><span style=\"color:#9EFFFF\"> html </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#FF9D00\"> await</span><span style=\"color:#FAD000\"> remark</span><span style=\"color:#E1EFFF\">()</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">        .</span><span style=\"color:#FAD000\">use</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#9EFFFF\">remarkGFM</span><span style=\"color:#E1EFFF\">)</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">        .</span><span style=\"color:#FAD000\">use</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#9EFFFF\">remarkSlug</span><span style=\"color:#E1EFFF\">)</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">        .</span><span style=\"color:#FAD000\">use</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#9EFFFF\">remarkAutolinkHeadings</span><span style=\"color:#E1EFFF\">)</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">        .</span><span style=\"color:#FAD000\">use</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#9EFFFF\">remarkExternalLinks</span><span style=\"color:#E1EFFF\">)</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">        .</span><span style=\"color:#FAD000\">use</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#9EFFFF\">remarkEmbedder</span><span style=\"color:#E1EFFF\">,</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#80FFBB\">            transformers</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#E1EFFF\"> [</span><span style=\"color:#9EFFFF\">codesandbox</span><span style=\"color:#E1EFFF\">,</span><span style=\"color:#9EFFFF\"> twitch</span><span style=\"color:#E1EFFF\">,</span><span style=\"color:#9EFFFF\"> twitter</span><span style=\"color:#E1EFFF\">,</span><span style=\"color:#9EFFFF\"> youtube</span><span style=\"color:#E1EFFF\">],</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">        })</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">        .</span><span style=\"color:#FAD000\">use</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#9EFFFF\">remarkPrism</span><span style=\"color:#E1EFFF\">,</span><span style=\"color:#E1EFFF\"> {</span><span style=\"color:#80FFBB\">transformInlineCode</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#FF628C\"> true</span><span style=\"color:#E1EFFF\">})</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">        .</span><span style=\"color:#FAD000\">use</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#9EFFFF\">remarkHTML</span><span style=\"color:#E1EFFF\">)</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">        .</span><span style=\"color:#FAD000\">process</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#9EFFFF\">content</span><span style=\"color:#E1EFFF\">)</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    const</span><span style=\"color:#9EFFFF\"> markdown </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#80FFBB\">        frontmatter</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#9EFFFF\"> data</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80FFBB\">        html</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#9EFFFF\"> html</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">toString</span><span style=\"color:#E1EFFF\">(),</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    return</span><span style=\"color:#9EFFFF\"> markdown</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span></span></code></pre></figure>\n<p>I still can't figure out how to highlight specific lines in code blocks. The icon next to linked headers is not showing up. I had to write custom transformers for every media embed. I lost the ability to use <code>vscode</code> themes for syntax highlighting.</p>\n<p>These are necessary features in a developer blog, and these are the types of things that the <code>gatsby-remark-*</code> plugins provide for you</p>\n<h2>🖼️ image component</h2>\n<p>What really sparked me to try Next.js was the announcement of their <a href=\"https://nextjs.org/docs/basic-features/image-optimization\" rel=\"noopener noreferrer\" target=\"_blank\">image component</a>.</p>\n<p>Just like their development server, Next.js optimizes images on the fly to prevent long build times. Although the Next.js <code>&#x3C;Image/></code> component does prevent <a href=\"https://web.dev/cls\" rel=\"noopener noreferrer\" target=\"_blank\">layout shift</a>, it still feels like the image just pops in. That's why I prefer the blur up effect of Gatsby images.</p>\n<p>But the worst thing about Next.js images is that they can't be used inside of Markdown files without writing a custom <code>remark</code> transformer. With Gatsby, getting optimized images from Markdown files is as simple as installing <a href=\"https://www.gatsbyjs.com/plugins/gatsby-remark-images\" rel=\"noopener noreferrer\" target=\"_blank\">gatsby-remark-images</a>.</p>\n<p>This is yet another example of how the Gatsby plugin ecosystem has an answer for everything, especially when it comes to Markdown.</p>\n<h2>📚 content location</h2>\n<p>I really enjoy keeping my blog posts and their associated images in the same directory. With Next.js, all images referenced in Markdown must be stored in the <code>/public</code> directory. This provides more friction when authoring a blog post, and would make things more difficult if I ever wanted to move my content elsewhere in the future.</p>\n<h2>👨🏼‍⚖️ the verdict</h2>\n<p><em>Remember, I'm evaluating these two frameworks in the context of a Markdown blog. My criteria would change if I were evaluating them for a web application.</em></p>\n<p>I didn't talk about things like hosting, TypeScript support, MDX support, testing, redirects, or serverless functions. But I found that <a href=\"https://gatsbyjs.com\" rel=\"noopener noreferrer\" target=\"_blank\">Gatsby</a> and <a href=\"https://nextjs.org\" rel=\"noopener noreferrer\" target=\"_blank\">Next.js</a> compare similarly on those fronts.</p>\n<p>Ultimately I chose the tool that felt like it was made specifically for Markdown blogging, the tool that offers plugins to do exactly what I want, and the tool that popularized static sites on the <a href=\"https://jamstack.org\" rel=\"noopener noreferrer\" target=\"_blank\">Jamstack</a>.</p>\n<p><strong>I stuck with Gatsby.</strong></p>",
            "url": "https://bradgarropy.com/blog/gatsby-vs-nextjs-markdown-blog",
            "title": "🥊 gatsby vs next.js: markdown blog",
            "date_modified": "2021-01-21T00:00:00.000Z",
            "date_published": "2021-01-21T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "goals-for-2020",
            "content_html": "<p>Happy New Year! Welcome to <strong>2020</strong>, it's a new year and a new decade. That means we have a lot to accomplish, and I'm fired up to get started. In 2019 I wrote down my <a href=\"https://bradgarropy.com/blog/new-years-resolutions\" rel=\"noopener noreferrer\" target=\"_blank\">resolutions</a> for the first time. I'll be doing the same thing this year, here's what I've got.</p>\n<h2>💏 marriage</h2>\n<p>Last year I ended each day by giving my wife a compliment. This year I'm focusing on starting off the day on the right foot. Every day I'm going to ask Gaby this simple question.</p>\n<blockquote>\n<p>What are you up to today?</p>\n</blockquote>\n<p>Most of the time I'll know the answer, but it will get us talking and interacting before the kids distract us.</p>\n<h2>🐶 roman</h2>\n<p>I adopted my dog <a href=\"https://instagram.com/p/8lLjPTKYhx\" rel=\"noopener noreferrer\" target=\"_blank\">Roman</a> when he was three. Now he's getting older, turning 13 this year. Since we had kids he's taken a back seat. I'd like to change that and show him the love and attention that I used to.</p>\n<p>So I'm going to take him on a walk (that's all about him) once a week. Although he's primarily an indoor dog, I'm going to bathe him once a month. And I'm going to get his nails cut once a month.</p>\n<h2>🤠 daily texas country</h2>\n<p>Last year I spread myself too thin in my coding goals. This year I have one focus: building a site and a brand around my <a href=\"https://twitter.com/dailytxcountry\" rel=\"noopener noreferrer\" target=\"_blank\">Daily Texas Country</a> Twitter account. Currently it's a Twitter bot that posts random songs from my Spotify <a href=\"https://open.spotify.com/playlist/0AbnxNMZqSCVog82luj1Ir?si=uFQnWlfPTLmCdBNZMMIs3w\" rel=\"noopener noreferrer\" target=\"_blank\">playlist</a> every day. But I have plans for it to be much more.</p>\n<p>I envision it being something like <a href=\"https://whiskeyriff.com\" rel=\"noopener noreferrer\" target=\"_blank\">Whiskey Riff</a>, but with a more personal feel. So my goal by the end of the year is to have a site up running at <a href=\"https://dailytexascountry.com\" rel=\"noopener noreferrer\" target=\"_blank\">dailytexascountry.com</a>. This will include a history of the Twitter feed and a blog.</p>\n<p>I also have an idea for a <a href=\"https://youtube.com/channel/UCpbIlFaiv-3188nAWtgL0Iw\" rel=\"noopener noreferrer\" target=\"_blank\">YouTube</a> channel to accompany the site. Every Wednesday I would do a live listen of the song posted on the <a href=\"https://twitter.com/dailytxcountry\" rel=\"noopener noreferrer\" target=\"_blank\">@dailytxcountry</a> Twitter account and call it <a href=\"https://youtube.com/results?search_query=%23whiskeywednesday\" rel=\"noopener noreferrer\" target=\"_blank\">#whiskeywednesday</a>.</p>\n<p>Eventually my goal is to create merchandise to sell on <a href=\"https://teespring.com\" rel=\"noopener noreferrer\" target=\"_blank\">Teespring</a> and have the site generate some income. But I'll consider making my first dollar a bonus goal for the year.</p>\n<h2>📺 youtube growth</h2>\n<p>Last year I started <a href=\"https://youtube.com/playlist?list=PL6Mu1AMmTL-uMkwOvZ5_Ytbu9qQ5SQSrc\" rel=\"noopener noreferrer\" target=\"_blank\">livestreaming</a> many of my coding sessions. Thanks to that, my channel has started to grow! I want to continue the momentum this year and reach the 100 subscriber milestone. To do that, my goal is to publish at least one video a month.</p>\n<h2>🎨 adobe</h2>\n<p>Since I've joined <a href=\"https://adobe.com\" rel=\"noopener noreferrer\" target=\"_blank\">Adobe</a> I've taken on tons of responsibility. I lead the frontend team, lead the frontend guild, run our team meetings, mentor other developers, contribute to spec and design work, and so much more. I believe I'm ready to jump to the next level, and I want to be upfront with my manager about my desire for a promotion.</p>\n<h2>🏋🏼‍♂️ fitness</h2>\n<p>After dieting down for summertime, I usually get too careless with my fitness regiment in the winter. I find myself eating poorly and not exercising. This year I'd like to continue my workout routine through the winter while relaxing my diet. This will help with muscle and strength gains. A bulk is only good if you're still training!</p>\n<p>And as a general health goal, I want to increase my water intake. So I'll drink one 30oz <a href=\"https://yeti.com/en_US/drinkware/rambler-30-oz-tumbler/YRAM30.html?dwvar_YRAM30_color=black\" rel=\"noopener noreferrer\" target=\"_blank\">Yeti</a> of water with every meal.</p>\n<h2>💵 finances</h2>\n<p>I am blessed to not have to worry about money. But I should think ahead about debt, savings, and retirement.</p>\n<p>We purchased a <a href=\"https://www.ford.com/suvs/expedition\" rel=\"noopener noreferrer\" target=\"_blank\">new vehicle</a> last year to accommodate our growing family. That SUV and the house are our only sources of debt. My goal is to pay off the vehicle early this year. Then with the car payment gone, I plan to pay more principal on our home loan, and increase our 401k contributions each month.</p>\n<p>I hope this strategy will eliminate our debt, and grow our retirement funds quicker.</p>",
            "url": "https://bradgarropy.com/blog/goals-for-2020",
            "title": "🏆 goals for 2020",
            "date_modified": "2020-01-11T00:00:00.000Z",
            "date_published": "2020-01-11T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "goals-for-2021",
            "content_html": "<p>Despite the pandemic, 2020 was my most productive year for personal branding, side projects, and passive income. I want to carry on that momentum in 2021, but I've got lots of projects in flight. So my focus for this year will be building on my strong foundations.</p>\n<h2>💏 marriage</h2>\n<p>I always like to start off my goals with a focus on marriage.</p>\n<p>Last year was stressful, and brought out many emotions. My wife and I noticed that we weren't communicating as clearly as usual throughout the quarantine. So I want to focus on communicating everything, good or bad, as early and often as possible. Being on the same page always brings togetherness.</p>\n<p>With my recent <a href=\"https://twitter.com/bradgarropy/status/1339970857251311618\" rel=\"noopener noreferrer\" target=\"_blank\">achilles injury</a>, my wife has really stepped up to take care of me and do even more around the house. So I'd like to make it a point every day to tell her how appreciative I am of her efforts.</p>\n<h2>😁 positivity</h2>\n<p>Given the <a href=\"https://twitter.com/bradgarropy/status/1339970857251311618\" rel=\"noopener noreferrer\" target=\"_blank\">injury</a>, there's a lot I could be salty about. But so far I've maintained a positive attitude about my healing and recovery. I want to carry that through the rest of the year. I believe a positive attitude will get me through tough times during the recovery.</p>\n<h2>🦶 recovery</h2>\n<p>My primary focus this year is recovering from my <a href=\"https://twitter.com/bradgarropy/status/1339970857251311618\" rel=\"noopener noreferrer\" target=\"_blank\">achilles injury</a>. I don't want to miss a single physical therapy session, and I even plan on going above and beyond by doing additional exercises at home to strengthen my ankle. My goal is to be squatting weight and running by the end of the year.</p>\n<p>Additionally, I want to make sure I'm not neglecting other parts of my body. As soon as I'm able, I'll be back in the home gym working out my upper body.</p>\n<h2>🎙 podcast</h2>\n<p>Although I said I wanted to focus on foundations, I thought about creating my own podcast on many occasions last year. This year I pull the trigger.</p>\n<p>The plan is a one man podcast, primarily focused on bringing in guests, although I don't mind recording some solo if I have to. My goal is to record and publish ten episodes.</p>\n<p>I think the name will be <code>bg codes</code>, and the show will be hosted on <a href=\"https://anchor.fm\" rel=\"noopener noreferrer\" target=\"_blank\">Anchor</a>.</p>\n<h2>🎥 twitch</h2>\n<p>I really fell in love with streaming last year, and I've got a lot of ideas to promote engagement on the channel. I want to really up the ante with my channel point redemptions. To further promote loyal viewers, I plan on releasing a few <code>bg codes</code> shirts to my <a href=\"https://bradgarropy.com/store\" rel=\"noopener noreferrer\" target=\"_blank\">store</a>.</p>\n<p>There's also room for infrastructure improvements on my stream. I'd like to convert my overlays to <code>html</code>, which serves as a jumping off point for some great integrations. It also might be cool to add a <code>live</code> banner to <a href=\"https://bradgarropy.com\" rel=\"noopener noreferrer\" target=\"_blank\">bradgarropy.com</a> which links over to <a href=\"https://twitch.tv/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">Twitch</a>.</p>\n<h2>📺 youtube</h2>\n<p>I want to see continued growth on <a href=\"https://youtube.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">YouTube</a>. Content here is the most fun to produce, so I'd like to do one video per month and reach 500 subscribers.</p>\n<h2>🏡 bradgarropy.com</h2>\n<p>I love my <a href=\"https://bradgarropy.com\" rel=\"noopener noreferrer\" target=\"_blank\">website</a>, but the landing page is nothing but fluff. Expect a redesign of the landing page this year, as well at least one blog post per month.</p>\n<h2>🤠 daily texas country</h2>\n<p>I still struggle coming up with ideas on how to grow <a href=\"https://dailytexascountry.com\" rel=\"noopener noreferrer\" target=\"_blank\">Daily Texas Country</a>. While I've been rock solid on the <a href=\"https://dailytexascountry.com/youtube\" rel=\"noopener noreferrer\" target=\"_blank\">Whiskey Wednesday</a> videos, I've completely neglected the blog. I'd like to revitalize it with at least one post per month. Not only will that add more content to the website, it will give me things to share on <a href=\"https://facebook.com/dailytexascountry\" rel=\"noopener noreferrer\" target=\"_blank\">Facebook</a> and <a href=\"https://twitter.com/dailytxcountry\" rel=\"noopener noreferrer\" target=\"_blank\">Twitter</a>.</p>\n<p>I also want to keep up the tradition of <a href=\"https://open.spotify.com/playlist/2WgzkOheKMWge250zUs7oE\" rel=\"noopener noreferrer\" target=\"_blank\">holiday playlists</a>. I can think of a few that I missed, like Valentine's Day and Texas Independence Day, that would be fun.</p>\n<h2>⏱ murphy</h2>\n<p>What started as a learning project turned into a production application. I need to rewrite <a href=\"https://play.google.com/store/apps/details?id=com.bradgarropy.murphy.twa\" rel=\"noopener noreferrer\" target=\"_blank\">Murphy</a>, and I plan on using <a href=\"https://nextjs.org\" rel=\"noopener noreferrer\" target=\"_blank\">Next.js</a> to get it done.</p>\n<p>I wanted to produce some marketing videos for Murphy, but I'll have to pivot due to the <a href=\"https://twitter.com/bradgarropy/status/1339970857251311618\" rel=\"noopener noreferrer\" target=\"_blank\">injury</a> and find another way to get the word out.</p>\n<h2>🎬 conclusion</h2>\n<p>I think 2020 taught us all how to handle adversity, and I still have some of that going on in 2021. But I'll be sticking to familiar ground this year to solidify my foundations while providing a bit of innovation and a new form of content.</p>\n<p><strong>What are your goals for 2021? Share them with me on <a href=\"https://twitter.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">Twitter</a>!</strong></p>",
            "url": "https://bradgarropy.com/blog/goals-for-2021",
            "title": "🏆 goals for 2021",
            "date_modified": "2021-01-04T00:00:00.000Z",
            "date_published": "2021-01-04T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "goals-for-2022",
            "content_html": "<p>I spent the <a href=\"https://bradgarropy.com/blog/goals-for-2021\" rel=\"noopener noreferrer\" target=\"_blank\">past year</a> focusing on my foundations. In 2022 I'm ready to take on new larger projects with the aim of creating a real source of side income for myself. I've set the following goals to help me accomplish that.</p>\n<h2>👩‍❤️‍💋‍👨 marriage</h2>\n<p>As always, my marriage comes first. Without a successful marriage, I could not accomplish any of the other goals in this post.</p>\n<p>My wife and I have started having monthly <em>marriage checkups</em>. It's a dedicated time for us to talk about how things are going in our relationship instead of just watching TV on the couch. These have proven very effective for us to stay in tune with how the other is feeling! We plan to continue these monthly conversations throughout 2022 to help us build the best marriage for both of us.</p>\n<p>A second goal I have is to create new memorable moments for my wife and I. It was so easy to do without kids, but now we have to be more intentional about when and how we have fun together. So we locked down two different babysitters for nights that we want to go out, and for nights that we stay in I bought a ton of games for us to try.</p>\n<ul>\n<li><a href=\"https://www.amazon.com/Exploding-Kittens-LLC-EKG-ORG1-1-Card/dp/B010TQY7A8?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">Exploding Kittens</a></li>\n<li><a href=\"https://www.amazon.com/Little-Exploding-Kittens-Clever-Scramble/dp/B08Z785NKH?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">A Little Wordy</a></li>\n<li><a href=\"https://www.amazon.com/Cards-Against-Humanity-LLC-CAHUS/dp/B004S8F7QM?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">Cards Against Humanity</a></li>\n<li><a href=\"https://www.amazon.com/Hasbro-Gaming-00950-Yahtzee/dp/B00TLEMRKM?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">Yahtzee</a></li>\n</ul>\n<p>I'm hoping that more interesting date nights and playing games together will lead to more fun and memorable moments together.</p>\n<h2>👨🏼‍💻 products</h2>\n<p>My biggest goal this year is to launch at least two SaaS products. That gives me at least six months a piece to ideate, design, build, and market two quality products that I can sell.</p>\n<p>I'd like to build them completely in the open. That means using <a href=\"https://twitter.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">Twitter</a> to generate ideas and market the product, <a href=\"https://youtube.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">YouTube</a> to record progress and show demos, <a href=\"https://twitch.tv/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">Twitch</a> to involve the community during the build phase, and possibly create a podcast using my <strong>bg codes</strong> brand to share what I've learned.</p>\n<p>This goal is a big first step towards a sustainable side hustle. I have a few ideas for what to build, but nothing is set in stone just yet.</p>\n<h2>📚 books</h2>\n<p>While I normally preach creation over consumption, I do think reading books is a very productive form of consumpion. I've been looking to improve on productivity, focus, and organization, so I picked up the following books.</p>\n<ul>\n<li><a href=\"https://www.amazon.com/Atomic-Habits-Proven-Build-Break/dp/0735211299?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">Atomic Habits</a></li>\n<li><a href=\"https://www.amazon.com/Getting-Things-Done-Stress-free-Productivity/dp/0349408947?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">Getting Things Done</a></li>\n<li><a href=\"https://www.amazon.com/Deep-Work-Focused-Success-Distracted/dp/1455586692?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">Deep Work</a></li>\n<li><a href=\"https://www.amazon.com/Digital-Minimalism-Choosing-Focused-Noisy/dp/0525536515?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">Digital Minimalism</a></li>\n<li><a href=\"https://sive.rs/n\" rel=\"noopener noreferrer\" target=\"_blank\">Hell Yeah Or No</a></li>\n<li><a href=\"https://www.amazon.com/Subtle-Art-Not-Giving-Counterintuitive/dp/0062457713?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">The Subtle Art Of Not Giving A Fuck</a></li>\n</ul>\n<p>My goal is to get through all of them in 2022. One book every other month seems totally doable!</p>\n<h2>🏡 bradgarropy.com</h2>\n<p>My mantra for 2021 was to solidify my foundation, and working on this website was a big part of that. I wanted to convert it to <a href=\"https://nextjs.org\" rel=\"noopener noreferrer\" target=\"_blank\">Next.js</a> for a while, but after starting the effort three separate times, I never finished.</p>\n<p>Right now, I have a <a href=\"https://github.com/bradgarropy/bradgarropy.com/tree/next\" rel=\"noopener noreferrer\" target=\"_blank\">branch</a> where the conversion is about 80% complete, and my goal is to complete the transition to Next.js in early 2022.</p>\n<h2>📺 youtube</h2>\n<p>I produced a lot more YouTube videos last year than ever before, and I saw my subscriber count reach 600. In 2022 I want to continue producing videos and reach 1000 subscribers! Hopefully content about my <a href=\"#-products\">SaaS products</a> will bring more subscribers.</p>\n<p>Additionally, I want my channel to become monetized. So I also need 4000 watch hours to go along with my subscriber count. It's a lofty goal, but based on last year's growth I think I can get there.</p>\n<h2>💰 side income</h2>\n<p>In order to create sustainable side income, I need to create as many different streams of income as possible. To that end, I want to reintroduce Amazon affiliate links into my content. The first time I tried I didn't have enough traffic to my website or YouTube channel to generate any revenue.</p>\n<p>I want to meticulously track all these different streams of income, and my goal is to earn a total of $1000 in 2022 from side hustles.</p>\n<p>Between the affiliate links, <a href=\"#-products\">SaaS products</a>, <a href=\"https://youtube.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">YouTube monetization</a>, <a href=\"https://twitch.tv/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">Twitch subscriptions</a>, <a href=\"https://bradgarropy.com/store\" rel=\"noopener noreferrer\" target=\"_blank\">t-shirt sales</a>, <a href=\"https://bradgarropy.com/sponsor\" rel=\"noopener noreferrer\" target=\"_blank\">GitHub sponsors</a>, and any other source of income I can create, I should be able to reach a new personal record this year.</p>\n<h2>✅ productivity</h2>\n<p>I won't be able to get any of my goals accomplished if I can't stay organized and maintain high productivity levels. I plan to completely revamp my productivity workflow using <a href=\"https://www.notion.so\" rel=\"noopener noreferrer\" target=\"_blank\">Notion</a>, <a href=\"https://play.google.com/store/apps/details?id=com.google.android.apps.tasks&#x26;hl=en_US&#x26;gl=US\" rel=\"noopener noreferrer\" target=\"_blank\">Google Tasks</a>, and some custom integrations very early in 2022.</p>\n<p>So stay tuned to see how I progress towards each one of these goals in 2022. Now I'd like to know what your goals are for the New Year! Share them with me on <a href=\"https://twitter.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">Twitter</a>!</p>",
            "url": "https://bradgarropy.com/blog/goals-for-2022",
            "title": "🏆 goals for 2022",
            "date_modified": "2021-12-30T00:00:00.000Z",
            "date_published": "2021-12-30T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "goals-for-2023",
            "content_html": "<p>After a very successful <a href=\"https://bradgarropy.com/blog/2022-in-review\" rel=\"noopener noreferrer\" target=\"_blank\">2022</a>, I'm kicking off the new year with another set of goals. Last year I <a href=\"https://bradgarropy.com/blog/disconnecting\" rel=\"noopener noreferrer\" target=\"_blank\">disconnected</a> for about four months in the summer. To avoid that this year, I'm scaling back some of my goals and focusing more on enjoying the process.</p>\n<h2>👩‍❤️‍💋‍👨 marriage</h2>\n<p>My wife and I are starting off the year by reading two marriage books together. We normally don't read any of the same things, so we thought it would spark a lot of conversation to read books about marriage.</p>\n<ul>\n<li><a href=\"https://www.amazon.com/Seven-Principles-Making-Marriage-Work/dp/0553447718?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">The Seven Principles for Making Marriage Work</a></li>\n<li><a href=\"https://www.amazon.com/Eight-Dates-Essential-Conversations-Lifetime/dp/1523504463?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">Eight Dates</a></li>\n</ul>\n<p>We also want to try new things on our dates to make fun new memories together. From new restaurants like <a href=\"https://www.suerteatx.com\" rel=\"noopener noreferrer\" target=\"_blank\">Suerte</a>, to fun experiences like <a href=\"https://electricshuffleusa.com/austin\" rel=\"noopener noreferrer\" target=\"_blank\">Electric Shuffle</a>, we think trying something different together will bring us some excitement!</p>\n<h2>🤝 relationships</h2>\n<p>Life has gotten very busy since our children started school full time. But no matter how busy things get, I want to make sure I'm investing time those who are important to me. My sister, my friends, and my brother in laws come to mind first. My goal is to get together one on one with at least one person each month.</p>\n<h2>🏡 bradgarropy.com</h2>\n<p>Even though I <a href=\"https://bradgarropy.com/blog/migrating-to-nextjs\" rel=\"noopener noreferrer\" target=\"_blank\">migrated to Next.js</a> last year, I want to rewrite my website <em>again</em> this year. I plan on using <a href=\"https://remix.run\" rel=\"noopener noreferrer\" target=\"_blank\">Remix</a> and <a href=\"https://tailwindcss.com\" rel=\"noopener noreferrer\" target=\"_blank\">Tailwind</a> for the rewrite. I've been obsessed with these tools lately because of their simplicity and levels of productivity I can achieve while using them.</p>\n<p>With all the chaos happening on <a href=\"https://twitter.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">Twitter</a>, it seems like personal blogs are making a comeback. Once I'm on the new stack, I'd like to add some features to help with discovery. I think supporting post tags and providing an RSS feed would help guide readers through my content.</p>\n<h2>💰 side income</h2>\n<p>Last year I more than tripled my goal for side income! As I stated in my <a href=\"https://bradgarropy.com/blog/2022-in-review\" rel=\"noopener noreferrer\" target=\"_blank\">2022 in review</a> post, I want to see that number continue to climb year over year. So this year I'm setting my side income goal at $5000. I plan on reaching this goal by generating income from multiple streams.</p>\n<ul>\n<li><a href=\"https://bradgarropy.com/hire-me\" rel=\"noopener noreferrer\" target=\"_blank\">consulting</a></li>\n<li><a href=\"https://cottonbureau.com/people/brad-garropy\" rel=\"noopener noreferrer\" target=\"_blank\">t-shirt sales</a></li>\n<li>saas application (tbd)</li>\n<li><a href=\"https://youtube.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">youtube monetization</a></li>\n<li><a href=\"https://github.com/sponsors/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">github sponsors</a></li>\n<li><a href=\"https://www.twitch.tv/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">twitch streaming</a></li>\n<li><a href=\"https://www.leveluptutorials.com/?ref=bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">affiliate links</a></li>\n</ul>\n<p>While some of these revenue sources are fairly reliable, others are sporadic, and some haven't even been created yet!</p>\n<h2>👨🏼‍💻 saas</h2>\n<p>I really dropped the ball on building a <a href=\"https://bradgarropy.com/blog/2022-in-review#products\" rel=\"noopener noreferrer\" target=\"_blank\">SaaS product</a> last year. I felt like I was looking for ideas to make money, instead of building something I was passionate about. So my goal is to build and release at least one SaaS application in hopes to earn a little money.</p>\n<p>This year I feel more comfortable in my tech stack, and I've got at least one idea that's interesting to me. So even if nobody uses the application besides myself, I'll still end up building something useful.</p>\n<h2>📺 youtube</h2>\n<p>I would really like to get monetized on <a href=\"https://youtube.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">YouTube</a> this year. I've got the subscriber count, so I'm only lacking the watch hours. At this point, I'm at 2692/4000 watch hours. As long as I put out a few videos on some relevant topics, I think I should be able to reach this goal no problem now that I've got more than 1000 subscribers.</p>\n<h2>🦉 duolingo</h2>\n<p>I started <a href=\"https://www.duolingo.com\" rel=\"noopener noreferrer\" target=\"_blank\">Duolingo</a> early last year and have become so much more comfortable speaking Spanish to my wife, kids, and in laws. I currently have a 348 day streak going, and my goal this year is to continue that streak throughout all of 2023.</p>\n<h2>📚 books and games</h2>\n<p>Finally, I want to feel like it's okay to take breaks from hustling on side projects. I've got a few books waiting to be read this year, and while I'm not setting a goal to get through all of them, I'd like to finish a few.</p>\n<ul>\n<li><a href=\"https://www.amazon.com/Seven-Principles-Making-Marriage-Work/dp/0553447718?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">The Seven Principles for Making Marriage Work</a></li>\n<li><a href=\"https://www.amazon.com/Eight-Dates-Essential-Conversations-Lifetime/dp/1523504463?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">Eight Dates</a></li>\n<li><a href=\"https://www.amazon.com/No-Rules/dp/0753553635?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">No Rules Rules</a></li>\n<li><a href=\"https://basecamp-goods.com/products/shapeup\" rel=\"noopener noreferrer\" target=\"_blank\">Shape Up</a></li>\n<li><a href=\"https://www.amazon.com/Anything-You-Want-lessons-entrepreneur/dp/1991152396?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">Anything You Want</a></li>\n<li><a href=\"https://www.amazon.com/ONE-Thing-Surprisingly-Extraordinary-Results/dp/1885167776?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">The One Thing</a></li>\n<li><a href=\"https://www.amazon.com/Eat-That-Frog-Great-Procrastinating/dp/162656941X?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">Eat That Frog</a></li>\n</ul>\n<p>And I even want to feel like video games every now and then are okay. I finished a few last year, and I've got a couple I'm already looking forward to this year.</p>\n<ul>\n<li><a href=\"https://store.steampowered.com/app/1145360/Hades\" rel=\"noopener noreferrer\" target=\"_blank\">Hades</a></li>\n<li><a href=\"https://store.steampowered.com/app/1583230/High_On_Life\" rel=\"noopener noreferrer\" target=\"_blank\">High On Life</a></li>\n<li><a href=\"https://store.steampowered.com/app/1938090/Call_of_Duty_Modern_Warfare_II\" rel=\"noopener noreferrer\" target=\"_blank\">Call of Duty: Modern Warfare II</a></li>\n</ul>\n<p>So hopefully my goals for this year keep me entertained, connected, and funded while not burning me out along the way. What are your goals for 2023? Share them on <a href=\"https://twitter.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">Twitter</a>!</p>",
            "url": "https://bradgarropy.com/blog/goals-for-2023",
            "title": "🏆 goals for 2023",
            "date_modified": "2023-01-13T00:00:00.000Z",
            "date_published": "2023-01-13T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "goals-for-2024",
            "content_html": "<p>After coming off a pretty relaxed, but successful <a href=\"https://bradgarropy.com/blog/2023-in-review\" rel=\"noopener noreferrer\" target=\"_blank\">2023</a>, I want to push my boundaries a bit this year and get out of my comfort zone. I want to do this all while staying the course of where I'm headed.</p>\n<hr>\n<h2>👩‍❤️‍💋‍👨 marriage</h2>\n<p>Last year was great for my wife and I, we are feeling more open and connected with each other than ever before. This year we want to shake things up a bit and spend our date nights doing things we don't normally do.</p>\n<p>Instead of just going out <a href=\"https://www.instagram.com/p/CzjazUQOxqcAMm0OSG_ZjQmCp9k30FDxoxIOiA0\" rel=\"noopener noreferrer\" target=\"_blank\">dancing</a>, this year we want to do things like go bowling, shoot hoops, throw axes, or play some games. Doing out of the box things together should create some fun new memories for us, and encourage us to keep things interesting and adapt to new situations together.</p>\n<h2>🏃🏼‍♂️ fitness</h2>\n<p>Over the holidays I ate way too much, didn't exercise as much as I wanted, and fell back into the pattern of pouring a <a href=\"https://www.southerncomfort.com\" rel=\"noopener noreferrer\" target=\"_blank\">whiskey</a> every night. So going into 2024 I want to refocus on health.</p>\n<p>My first goal is to only drink with others, not when I'm just sitting alone on the computer at night. Only drinking socially should reduce my alcohol consumption, especially during the weekdays, which will keep me more productive.</p>\n<p>I also want to lean into running this year. My big goal is to complete my first ever half marathon, in under two hours. I'm targeting the <a href=\"https://www.runproject.org/events/skyline-half-race\" rel=\"noopener noreferrer\" target=\"_blank\">Dallas Skyline Half Marathon</a> on April 20th. It'll be cool to run through a different city with some awesome views.</p>\n<h2>👔 career progression</h2>\n<p>Something has to change for me this year at <a href=\"https://www.atlassian.com\" rel=\"noopener noreferrer\" target=\"_blank\">Atlassian</a>. I still don't have a senior engineer title, even though I'm acting as one every day. So my goal this year is to get promoted or find a new job. If I don't get promoted, I'd like my next job to be at a smaller company.</p>\n<p>I'd also like to speak at a conference or meetup. Unfortunately my proposal was not accepted for <a href=\"https://thatconference.com/tx/2024\" rel=\"noopener noreferrer\" target=\"_blank\">THAT Conference</a> this year, but it really motivated me to write up a talk and find a place to give it. All of the meetups I've been attending have been asking for speakers, so I should have a good chance there.</p>\n<p>And speaking of speaking, now that I'm an official host of <a href=\"http://compressed.fm\" rel=\"noopener noreferrer\" target=\"_blank\">Compressed.fm</a>, I want to become more involved with the podcast. My goal is to contribute to the <a href=\"https://github.com/ahaywood/compressedfm\" rel=\"noopener noreferrer\" target=\"_blank\">website</a>, book more guests, and <a href=\"https://twitter.com/compressedfm\" rel=\"noopener noreferrer\" target=\"_blank\">tweet</a> more about the show.</p>\n<h2>💵 finances</h2>\n<p>I'm fortunate to have enough income where I need to think about where to intelligently invest my earnings. One goal this year is to speak with some kind of \"money guy\" and figure out a good strategy for me.</p>\n<p>Ultimately I'd like this strategy to include where I save my money, like a 401k, Roth IRA, savings account, or CDs, and what I should do with my remaining stock from <a href=\"https://www.adobe.com\" rel=\"noopener noreferrer\" target=\"_blank\">Adobe</a>.</p>\n<h2>💰 side income</h2>\n<p>Although I think my side income from last year will be hard to beat, I'd like to try. That means my new goal is anything over <code>$5,172.15</code>. The income streams remain the same.</p>\n<ul>\n<li><a href=\"https://bradgarropy.com/hire-me\" rel=\"noopener noreferrer\" target=\"_blank\">consulting</a></li>\n<li><a href=\"https://cottonbureau.com/people/brad-garropy\" rel=\"noopener noreferrer\" target=\"_blank\">t-shirt sales</a></li>\n<li>saas application (tbd)</li>\n<li><a href=\"https://youtube.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">youtube monetization</a></li>\n<li><a href=\"https://github.com/sponsors/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">github sponsors</a></li>\n<li><a href=\"https://www.twitch.tv/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">twitch streaming</a></li>\n<li><a href=\"https://bradgarropy.com/uses\" rel=\"noopener noreferrer\" target=\"_blank\">affiliate links</a></li>\n</ul>\n<p>I'm already working with <a href=\"https://cloudinary.com\" rel=\"noopener noreferrer\" target=\"_blank\">Cloudinary</a> on some video content, so hopefully that amounts to more additional work throughout the year. As with last year, my biggest hurdles will be building a real SaaS application and getting monetized on <a href=\"https://youtube.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">YouTube</a>.</p>\n<h2>✍🏼 writing</h2>\n<p>This year I want to continue to invest in my own content. That primarily means writing blog posts for my website. Owning my own content is very important to me, as social media platforms come and go. Additionally, putting out a few videos on <a href=\"https://youtube.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">YouTube</a> would be a great bonus.</p>\n<p>I've also been journaling a bit lately with Apple's new <a href=\"https://apps.apple.com/gb/app/journal/id6447391597\" rel=\"noopener noreferrer\" target=\"_blank\">Journal</a> app. I want to keep up this habit as it's helped me be more aware of my thoughts and feelings.</p>\n<h2>📚 books</h2>\n<p>After reading literally nothing last year, I want to set a very small goal of three books for this year. Here they are in order of my interest.</p>\n<ul>\n<li><a href=\"https://www.amazon.com/No-Rules/dp/0753553635?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">No Rules Rules</a></li>\n<li><a href=\"https://basecamp-goods.com/products/shapeup\" rel=\"noopener noreferrer\" target=\"_blank\">Shape Up</a></li>\n<li><a href=\"https://www.amazon.com/Engineering-Management-Rest-Sarah-Drasner/dp/B0BHX8BQ9C?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">Engineering Management For The Rest Of Us</a></li>\n</ul>\n<h2>🎮 games</h2>\n<p>I went hard on the <a href=\"https://www.amazon.com/Nintendo-Switch-OLED-Model-Neon-Joy/dp/B098RKWHHZ?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">Nintendo Switch</a> last year, it was so much fun gaming on that thing! Here's a few more games I want to explore this year. No hard requirements to finish them, but this is how I want to relax.</p>\n<ul>\n<li><a href=\"https://www.amazon.com/Legend-Zelda-Links-Awakening-Nintendo/dp/B07SMBJVS8?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">Link's Awakening</a></li>\n<li><a href=\"https://www.amazon.com/Super-Mario-Bros-TM-Wonder-Nintendo-Version/dp/B0C8VHZR14?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">Super Mario Wonder</a></li>\n<li><a href=\"https://www.amazon.com/Legend-Zelda-Breath-Wild-Nintendo-Switch/dp/B097B2YWFX?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">Zelda: Tears of the Kingdom</a></li>\n<li><a href=\"https://www.amazon.com/Hades-Limited-Nintendo-Switch/dp/B08X2K6B1Z?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">Hades</a></li>\n</ul>\n<hr>\n<p>And that's it for this year's goals! The idea is that I keep making small steps forward to grow my side income, step out of the box with my wife and with my fitness, and keep enjoying myself along the way. Let me know what your 2024 goals are on <a href=\"https://twitter.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">Twitter</a>!</p>",
            "url": "https://bradgarropy.com/blog/goals-for-2024",
            "title": "🏆 goals for 2024",
            "date_modified": "2024-01-03T00:00:00.000Z",
            "date_published": "2024-01-03T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "google-analytics-with-nextjs",
            "content_html": "<p>As I <a href=\"https://bradgarropy.com/blog/migrating-to-nextjs\" rel=\"noopener noreferrer\" target=\"_blank\">migrated</a> this site to <a href=\"https://nextjs.org\" rel=\"noopener noreferrer\" target=\"_blank\">Next.js</a>, I upgraded Google Analytics from Universal Analytics to <a href=\"https://developers.google.com/analytics/devguides/collection/ga4\" rel=\"noopener noreferrer\" target=\"_blank\">Google Analytics 4</a>. Along the way, the resources I found for handling this upgrade were a little outdated. So here's my take on how to integrate Google Analytics 4 with Next.js.</p>\n<iframe class=\"aspect-video w-full rounded my-8\" title=\"m7oQSA3c31Q\" src=\"https://www.youtube-nocookie.com/embed/m7oQSA3c31Q\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen>\n        </iframe>\n<h2>🏡 create a property</h2>\n<p>First, go to your Google Analytics dashboard and click on the <em>Admin</em> cog in the bottom left. From there, click the blue <em>Create Property</em> button. By default, this will create a Google Analytics 4 property. Then answer a few more questions about your business, and click <em>Create</em>.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/ga-create-property.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/ga-create-property.png\" alt=\"create property\" width=\"2042\" height=\"726\"></a>\n<p>Next you'll be asked to set up a data stream on which to collect analytics information. We'll be using the <em>Web</em> platform.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/ga-data-stream.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/ga-data-stream.png\" alt=\"data stream\" width=\"2364\" height=\"648\"></a>\n<p>Then fill in the the information they ask about your website and give your stream a name. Then you can click <em>Create Stream</em>.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/ga-website.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/ga-website.png\" alt=\"website\" width=\"2392\" height=\"838\"></a>\n<p>Now you'll be presented with your <em>Measurement ID</em>. Copy this value, as we'll be using it to initialize the <code>gtag</code> script on your site.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/ga-measurement-id.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/ga-measurement-id.png\" alt=\"measurement id\" width=\"1950\" height=\"162\"></a>\n<h2>📜 initialize the script</h2>\n<p>Now that you have your <em>Measurement ID</em>, I suggest placing it in an environment variable. While the <em>Measurement ID</em> is publicly viewable in the browser, I find that abstracting it one layer can discourage abuse. I use Vercel for hosting, and they have some nice documentation on how to set <a href=\"https://vercel.com/docs/concepts/projects/environment-variables\" rel=\"noopener noreferrer\" target=\"_blank\">environment variables</a>.</p>\n<p>Initializing Google Analytics on your site is a two step process. First you'll have to download a script, then execute an initialization function. We can leverage the Next.js <code>&#x3C;Script></code> component for both steps.</p>\n<p>First, download the <code>gtag</code> module by placing a <code>&#x3C;Script></code> component in your custom <code>_app.js</code> file. This should use the <code>afterInteractive</code> strategy so it does not increase the initial page load time.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"typescript\" data-theme=\"Shades of Purple\"><code data-language=\"typescript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FF9D00\">&#x3C;</span><span style=\"color:#9EFFFF\">Script</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">    strategy</span><span style=\"color:#FF9D00\">=</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">afterInteractive</span><span style=\"color:#92FC79\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">    src</span><span style=\"color:#FF9D00\">=</span><span style=\"color:#E1EFFF\">{</span><span style=\"color:#3AD900\">`https://www.googletagmanager.com/gtag/js?id=</span><span style=\"color:#FFEE80\">${</span><span style=\"color:#9EFFFF\">measurementId</span><span style=\"color:#FFEE80\">}</span><span style=\"color:#3AD900\">`</span><span style=\"color:#E1EFFF\">}</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">/></span></span></code></pre></figure>\n<p>Then use another <code>&#x3C;Script></code> component to initialize the <code>dataLayer</code> and connect it to your <code>measurementId</code>. Again, this will use the <code>afterInteractive</code> strategy to avoid increasing page load time.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"typescript\" data-theme=\"Shades of Purple\"><code data-language=\"typescript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FF9D00\">&#x3C;</span><span style=\"color:#9EFFFF\">Script</span><span style=\"color:#9EFFFF\"> id</span><span style=\"color:#FF9D00\">=</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">google-analytics</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#9EFFFF\"> strategy</span><span style=\"color:#FF9D00\">=</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">afterInteractive</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#FF9D00\">></span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    {</span><span style=\"color:#3AD900\">`</span></span>\n<span data-line=\"\"><span style=\"color:#3AD900\">        window.dataLayer = window.dataLayer || [];</span></span>\n<span data-line=\"\"><span style=\"color:#3AD900\">        function gtag(){dataLayer.push(arguments);}</span></span>\n<span data-line=\"\"><span style=\"color:#3AD900\">        gtag('js', new Date());</span></span>\n<span data-line=\"\"><span style=\"color:#3AD900\">        gtag('config', '</span><span style=\"color:#FFEE80\">${</span><span style=\"color:#9EFFFF\">measurementId</span><span style=\"color:#FFEE80\">}</span><span style=\"color:#3AD900\">');</span></span>\n<span data-line=\"\"><span style=\"color:#3AD900\">    `</span><span style=\"color:#E1EFFF\">}</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">&#x3C;/</span><span style=\"color:#9EFFFF\">Script</span><span style=\"color:#FF9D00\">></span></span></code></pre></figure>\n<p>That's it! Most other articles I read included other steps, like responding to route changes, but Google Analytics 4 does not need that in Next.js applications.</p>\n<h2>✅ confirming it works</h2>\n<p>To ensure that everything is running properly, you can check a few things. First, the <em>Network</em> tab should include a request to retrieve the <code>gtag</code> script with the following url.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"text\" data-theme=\"Shades of Purple\"><code data-language=\"text\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span>https://www.googletagmanager.com/gtag/js?id=&#x3C;measurement-id></span></span></code></pre></figure>\n<p>Next, go to the <em>Console</em> and check for the <code>window.dataLayer</code> object. It should be an array where one of the entries contains your <code>measurementId</code>.</p>\n<p>Finally, change routes inside of your application, then double check the <code>window.dataLayer</code> object. You should see additional <code>gtm.historyChange</code> events being added to the array.</p>\n<h2>📦 custom package</h2>\n<p>If you're like me, and you never want to think about setting this up again, you can use the <a href=\"https://github.com/bradgarropy/next-google-analytics\" rel=\"noopener noreferrer\" target=\"_blank\">@bradgarropy/next-google-analytics</a> package I made specifically for Next.js! It simplifies the configuration into a component that accepts your <code>measurementId</code>.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"typescript\" data-theme=\"Shades of Purple\"><code data-language=\"typescript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FF9D00\">&#x3C;</span><span style=\"color:#9EFFFF\">GoogleAnalytics</span><span style=\"color:#9EFFFF\"> measurementId</span><span style=\"color:#FF9D00\">=</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">G-XXXXXXXXXX</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#FF9D00\"> /></span></span></code></pre></figure>",
            "url": "https://bradgarropy.com/blog/google-analytics-with-nextjs",
            "title": "📊 google analytics with next.js",
            "date_modified": "2022-02-11T00:00:00.000Z",
            "date_published": "2022-02-11T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "googles-inbox-is-going-away",
            "content_html": "<p>Today, <a href=\"https://www.google.com/about/products/\" rel=\"noopener noreferrer\" target=\"_blank\">Google</a> dropped this bomb. As with thousands of others, I'm sad to see <a href=\"https://inbox.google.com/\" rel=\"noopener noreferrer\" target=\"_blank\">Inbox</a> go. It was a fresh take on email, which offered some great features.</p>\n<div class=\"grid justify-center\">\n            <blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Over the past 4 years you’ve helped us make email better. We’ve brought popular Inbox features to <a href=\"https://twitter.com/gmail?ref_src=twsrc%5Etfw\" rel=\"noopener noreferrer\" target=\"_blank\">@Gmail</a> helping 1B+ people get more done. Thank you.<br><br>We’ll be focusing on Gmail &#x26; saying bye to Inbox at the end of March 2019. Here’s a transition guide → <a href=\"https://t.co/6dOxgExpbm\" rel=\"noopener noreferrer\" target=\"_blank\">https://t.co/6dOxgExpbm</a></p>— Inbox by Gmail (@inboxbygmail) <a href=\"https://twitter.com/inboxbygmail/status/1039952354450309121?ref_src=twsrc%5Etfw\" rel=\"noopener noreferrer\" target=\"_blank\">September 12, 2018</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n\n        </div>\n<p>Google does indicate that by shutting down Inbox, they'll be putting more effort into <a href=\"https://gmail.com/\" rel=\"noopener noreferrer\" target=\"_blank\">Gmail</a>. But as we all know, even with it's new look in the browser, Gmail is still far behind Inbox. I want to see a few things come to Gmail.</p>\n<h2>automatic bundling</h2>\n<p>One of the best things that Inbox did automatically was bundle information related to a particular trip for you. It could gather emails about your flight, hotel, and rental car and group them in a bundle. I also created my own bundle for builds and releases of my different software projects.</p>\n<p>Google's <a href=\"https://support.google.com/inbox/answer/9117840\" rel=\"noopener noreferrer\" target=\"_blank\">transition guide</a> suggests using inbox tabs, rules, and labels to create the same effect. But what they're actually doing is asking you to recreate the logic rather than providing it automatically.</p>\n<h2>todos and reminders</h2>\n<p>I never understood Google's strategy when it comes to tasks and/or reminders. They have apps and services all over the place. They've got reminders in <a href=\"https://inbox.google.com/\" rel=\"noopener noreferrer\" target=\"_blank\">Inbox</a>, notes in <a href=\"http://keep.google.com/\" rel=\"noopener noreferrer\" target=\"_blank\">Keep</a>, emails in <a href=\"https://gmail.com/\" rel=\"noopener noreferrer\" target=\"_blank\">Gmail</a>, and appointments in <a href=\"https://calendar.google.com\" rel=\"noopener noreferrer\" target=\"_blank\">Calendar</a>. And Google now offers a standalone app to handle your todo list called <a href=\"https://play.google.com/store/apps/details?id=com.google.android.apps.tasks\" rel=\"noopener noreferrer\" target=\"_blank\">Tasks</a>.</p>\n<p>It seems as though some sense of organization is on its way though. With the updated Gmail site, Google has placed Keep and Tasks in the sidebar. This should be an indication that those will be the go to apps from here on out. The one thing that is missing is integrating the reminders feature of Calendar with the rest of the system. You should be able to create reminders from emails and tasks which show up on the calendar.</p>\n<h2>mobile app</h2>\n<p>While Gmail on the web got a major user interface upgrade, the mobile app was left behind. Gmail still has the same dated utilitarian look as it ever did. But besides looks, it also lacks a really great feature.</p>\n<p>The Inbox app does this awesome thing where it pulls out any attachments from the email and displays them in the email summary, so you can click on them without having to actually open the email. Gmail needs this so bad to make it more usable on mobile devices.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/inbox-gmail.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/inbox-gmail.png\" alt=\"Inbox &#x26; Gmail\" width=\"198\" height=\"172\"></a>\n<h2>switching</h2>\n<p>Even though Gmail isn't where it needs to be, I'm going to switch over to using it sooner rather than later so that I can have my workflows all set up by the time Inbox goes bye bye.</p>\n<p>Are you going to cut the cord on Inbox now, or wait until March 2019?<br>\nAre you switching back to Gmail, or looking for a new client?</p>\n<p>I'm interested to hear your responses, let me know <a href=\"https://twitter.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">@bradgarropy</a>.</p>",
            "url": "https://bradgarropy.com/blog/googles-inbox-is-going-away",
            "title": "📧 google's inbox is going away",
            "date_modified": "2018-09-12T00:00:00.000Z",
            "date_published": "2018-09-12T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "goxlr-review",
            "content_html": "<p>As my <a href=\"https://bradgarropy.com/stream\" rel=\"noopener noreferrer\" target=\"_blank\">stream</a> setup has gotten more complicated, I needed a mixer to control audio levels. I started out with a free software mixer called <a href=\"https://vb-audio.com/Voicemeeter\" rel=\"noopener noreferrer\" target=\"_blank\">Voicemeeter</a>. But after using it for a year, I experienced issues with Bluetooth connectivity and audio crackling. I got fed up with it, so I spent all the money I earned from my side projects on a hardware mixer, the <a href=\"https://www.amazon.com/GoXLR-Mini-Interface-Streamers-Podcasters/dp/B07JKNG4NV?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">TC Helicon GoXLR</a>.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/goxlr.jpg\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/goxlr.jpg\" alt=\"goxlr\" width=\"3840\" height=\"2160\"></a>\n<p>The GoXLR looks like a gaming product out of the box. It has LEDs everywhere which contribute to that aesthetic. The top plate and the faders are made of plastic, but the main frame is metal. It doesn't feel as sturdy as the professional audio equipment I had before, especially the faders, but the rubber buttons are very tactile and satisfying.</p>\n<p>Despite its looks, this little box replaces the <a href=\"https://www.amazon.com/Focusrite-Scarlett-Audio-Interface-Tools/dp/B07QR6Z1JB?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">Focusrite Scarlett Solo</a>, <a href=\"https://www.amazon.com/dbx-286s-Microphone-Channel-Processor/dp/B004LWH79A?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">DBX 286s</a>, and <a href=\"https://vb-audio.com/Voicemeeter\" rel=\"noopener noreferrer\" target=\"_blank\">Voicemeeter</a>! Here is what my audio chain looked like before and after.</p>\n<blockquote>\n<p><strong>BEFORE</strong><br>\nShure SM58 -> DBX 286s -> Focusrite Scarlett Solo -> PC -> Voicemeeter</p>\n<p><strong>AFTER</strong><br>\nShure SM58 -> GoXLR -> PC</p>\n</blockquote>\n<p>I was able to uninstall Voicemeeter, its macro pad for keyboard shortcuts, and all eight of its virtual audio cables. Now the GoXLR handles all of my audio processing, mixing, and routing. Then it exposes five output devices and three input devices to the PC.</p>\n<blockquote>\n<p><strong>Output</strong></p>\n<ul>\n<li>System</li>\n<li>Chat</li>\n<li>Music</li>\n<li>Game</li>\n<li>Sample</li>\n</ul>\n<p><strong>Input</strong></p>\n<ul>\n<li>Broadcast Stream Mix</li>\n<li>Chat Mic</li>\n<li>Sample</li>\n</ul>\n</blockquote>\n<p>This is amazing because now you can assign the different outputs to the GoXLR faders, and use the routing table to determine which inputs go to which outputs. And that's just the beginning, you can customize literally everything on this machine, like the LEDs, faders, mute buttons, and cough button. It even supports multiple banks of samples and voicemods.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/routing.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/routing.png\" alt=\"routing\" width=\"2560\" height=\"1390\"></a>\n<p>Another great feature of the GoXLR is that you can create multiple profiles and save your processor settings, samples, and voicemods to a specific profile. Even better, the GoXLR integrates with the <a href=\"https://www.amazon.com/Elgato-Stream-Deck-Controller-customizable/dp/B07DYRS1WH?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">Elgato Streamdeck</a> so that you can change profiles with the push of a button, or as part of a larger multi-action. I use this feature to switch to my <code>brb</code> profile, which mutes my mic, when I step away from the keyboard during a stream.</p>\n<p>Even with all of the customization options, the GoXLR was incredibly simple to set up. I had the inputs routed, processor adjusted, and audio coming into my stream in about an hour. I didn't have to read any instructions, although TC Helicon has a great <a href=\"https://www.youtube.com/watch?v=6hzHGp4HpV4&#x26;list=PLB-XE8Gvu0g4S3ofFJlhbYbaHrO8QGjik\" rel=\"noopener noreferrer\" target=\"_blank\">YouTube channel</a> with lots of basic and advanced tutorials.</p>\n<p>After configuring everything, I ran a quick sound test. I thought that the GoXLR actually sounded <em>better</em> than the DBX 286s. Here's the footage from the first recording.</p>\n<div class=\"grid justify-center\">\n            <blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">First audio test with the <a href=\"https://twitter.com/tchelicongaming?ref_src=twsrc%5Etfw\" rel=\"noopener noreferrer\" target=\"_blank\">@tchelicongaming</a> <a href=\"https://twitter.com/hashtag/goxlr?src=hash&#x26;ref_src=twsrc%5Etfw\" rel=\"noopener noreferrer\" target=\"_blank\">#goxlr</a>. How do you think it sounds? <a href=\"https://t.co/fnGo6eUkJ7\" rel=\"noopener noreferrer\" target=\"_blank\">pic.twitter.com/fnGo6eUkJ7</a></p>— Brad Garropy (@bradgarropy) <a href=\"https://twitter.com/bradgarropy/status/1387992044430372868?ref_src=twsrc%5Etfw\" rel=\"noopener noreferrer\" target=\"_blank\">April 30, 2021</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n\n        </div>\n<p>Now for the biggest drawback of the GoXLR in my opinion, it doesn't really support wireless headsets. Don't get me wrong, this makes sense as it's impossible to monitor yourself with a 250ms delay. But I was hoping to sit down at the computer and work wirelessly. I can still switch over to bluetooth and connect directly to my computer, but I'm still figuring out the best way to switch back and forth.</p>\n<p>Overall I would highly recommend the <a href=\"https://www.amazon.com/GoXLR-Mini-Interface-Streamers-Podcasters/dp/B07JKNG4NV?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">GoXLR</a> to streamers who are just starting out and have a larger budget. It's one box that does everything you need. I would also recommend this to mid level streamers who are looking to upgrade from their beginner audio setup, as it simplifies every step of your audio chain.</p>\n<p><em>That being said, I'm looking to sell my <a href=\"https://www.amazon.com/Focusrite-Scarlett-Audio-Interface-Tools/dp/B07QR6Z1JB?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">Focusrite Scarlett Solo</a> interface and my <a href=\"https://www.amazon.com/dbx-286s-Microphone-Channel-Processor/dp/B004LWH79A?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">DBX 286s</a> processor. It's a perfect gear combo to get you started in podcasting and/or streaming. If you're interested, shoot me a DM on <a href=\"https://twitter.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">Twitter</a>!</em></p>",
            "url": "https://bradgarropy.com/blog/goxlr-review",
            "title": "🔊 goxlr review",
            "date_modified": "2021-05-05T00:00:00.000Z",
            "date_published": "2021-05-05T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "headless-vs-embedded-cms-livestream",
            "content_html": "<p>I didn't know who <a href=\"https://jamesqquick.com\" rel=\"noopener noreferrer\" target=\"_blank\">James Quick</a> was until I took the <a href=\"https://leveluptutorials.com/tutorials/fullstack-react-and-firebase\" rel=\"noopener noreferrer\" target=\"_blank\">Fullstack React &#x26; Firebase</a> tutorial on <a href=\"https://leveluptutorials.com\" rel=\"noopener noreferrer\" target=\"_blank\">Level Up Tutorials</a>. The course was great, and I wanted additional content so I found his <a href=\"https://twitch.tv/jamesqquick\" rel=\"noopener noreferrer\" target=\"_blank\">Twitch channel</a>.</p>\n<p>He seemed like an approachable guy, and typically he only had a few people in his Twitch chat, so I jumped right into the conversation. Lucky for me his stream schedule fit perfectly with my work and family schedule, so I was hanging in the chat every time he went live.</p>\n<p>After getting to know each other's areas of expertise, we found that we overlapped quite a bit in the <a href=\"https://jamstack.org\" rel=\"noopener noreferrer\" target=\"_blank\">Jamstack</a>, <a href=\"https://staticgen.com\" rel=\"noopener noreferrer\" target=\"_blank\">SSG</a>, and <a href=\"https://headlesscms.org\" rel=\"noopener noreferrer\" target=\"_blank\">CMS</a> space. And as it turns out, I recently migrated to an embedded CMS, and he migrated to a headless CMS. We thought it would make for an interesting stream, so we recorded our conversation about it.</p>\n<iframe class=\"aspect-video w-full rounded my-8\" title=\"6hp-szqbQwg\" src=\"https://www.youtube-nocookie.com/embed/6hp-szqbQwg\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen>\n        </iframe>\n<p>I really appreciated the opportunity, and I had a blast being a guest on stream! It helped advance my public speaking skills, and helped to grow my own audience as well. I've been <a href=\"https://twitch.tv/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">streaming</a> myself, and getting more involved with the developer community on Twitch is a goal of mine. One day I'll have to have James as a guest on my stream to talk about authentication!</p>\n<p>If you didn't know, James is working on a new course called <a href=\"https://jamesqquick.com/courses/react-and-serverless-fullstack-developmnent\" rel=\"noopener noreferrer\" target=\"_blank\">React and Serverless - Fullstack Development</a>. I'm about halfway through it right now and I can say it's very comprehensive, and he shows you every step along the way. Go check it out, it'll be available on May 27!</p>\n<iframe class=\"aspect-video w-full rounded my-8\" title=\"5gLfEX8bnyQ\" src=\"https://www.youtube-nocookie.com/embed/5gLfEX8bnyQ\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen>\n        </iframe>",
            "url": "https://bradgarropy.com/blog/headless-vs-embedded-cms-livestream",
            "title": "📂 headless vs. embedded cms livestream",
            "date_modified": "2020-04-23T00:00:00.000Z",
            "date_published": "2020-04-23T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "homeaway-interview-process-on-site",
            "content_html": "<p>Following my phone interview with <a href=\"https://www.homeaway.com/\" rel=\"noopener noreferrer\" target=\"_blank\">HomeAway</a>, I was invited on site for a more thorough technical interview. The interview took three hours, where I talked with four interviewers from four different teams.</p>\n<h2>round one - full stack with matt</h2>\n<p>Matt did not play around and got straight to the point. He asked me to whiteboard a breadth first search on a binary tree. This definitely took me by surprise, as I hadn't done any kind of algorithms since college (almost 10 years ago)! I was able to explain a binary tree and breadth first traversal, and I drew it all out on the whiteboard.</p>\n<p>I hit a snag when I started to write psuedo code implementing the breadth first traversal. I wasn't able to determine that the traversal relied on a queue, and got stuck. Even with some nudges from Matt, I felt like I wasn't able to reach a complete solution.</p>\n<p>As with all interview questions, I came back home and wrote up a <a href=\"https://github.com/bradgarropy/homeaway-binary-tree\" rel=\"noopener noreferrer\" target=\"_blank\">full solution</a>. The repo contains a JavaScript implementation of breadth first traversal, all variations of depth first traversal (preorder, inorder, postorder), traversal direction options, and a full set of tests.</p>\n<h2>round two - backend with jeff</h2>\n<p>It only took a few minutes for Jeff, a backend Java developer, to realize our skill sets didn't align. So instead of talking technical, we spoke broadly about my career, the projects I've worked on, and the environment at HomeAway. I really enjoyed the conversation with Jeff, as it was low stress compared to the previous session.</p>\n<h2>round three - front end with jeff</h2>\n<p>New Jeff's role and skillset was right up my alley. His job was to leverage HomeAway's component library and lay them out on the website. Jeff and I talked a bit about <a href=\"https://reactjs.org/\" rel=\"noopener noreferrer\" target=\"_blank\">React</a> and the web development ecosystem, then he asked me to implement an infinite scroll component.</p>\n<p>This was particularly challenging for two reasons. First, I've never built an infinite scroll. And second, writing React on a whiteboard is difficult!</p>\n<p>Fortunately I did very well in my design and implementation. My biggest mistake was forgetting a <code>key</code> attribute on an <code>&#x3C;li></code> tag. Just like the other interview questions, I came home and implemented a more fully featured <a href=\"https://github.com/bradgarropy/homeaway-infinite-scroll\" rel=\"noopener noreferrer\" target=\"_blank\">infinite scroll</a>. You can see a live demo <a href=\"https://homeaway-infinite-scroll.netlify.com\" rel=\"noopener noreferrer\" target=\"_blank\">here</a>.</p>\n<h2>round four - component design with drew</h2>\n<p>My last interview was with Drew, who worked on reusable components for HomeAway's front end engineers to use. While his role was similar to Jeff's, he had a higher level view of the site and its architecture. After a bit of chit chat, Drew asked me to design a typeahead. He wanted to see my entire thought process, from a sketch of the rendered component, to the HTML behind it, to the React code that implemented it.</p>\n<p>Similar to the infinite scroll, I had never built a typeahead, but again I did very well conveying my design and implementation. Drew did a great job making the task progressively more difficult. Finally, he asked me to identify different ways of highlighting matches in the typeahead results. I spoke mostly about accomplishing this on the client side, but he enlightened me that doing this server side is more efficient. Turns out he was right, because that's exactly <a href=\"https://developer.github.com/v3/search/#highlighting-user-search-results\" rel=\"noopener noreferrer\" target=\"_blank\">how Github does it</a>!</p>\n<p>I implemented a basic <a href=\"https://github.com/bradgarropy/homeaway-typeahead\" rel=\"noopener noreferrer\" target=\"_blank\">typeahead</a> which searches Github users. You can see it in action <a href=\"https://homeaway-typeahead.netlify.com/\" rel=\"noopener noreferrer\" target=\"_blank\">here</a>. I've still got more work to do on it, like supporting <a href=\"https://github.com/bradgarropy/homeaway-typeahead/issues/1\" rel=\"noopener noreferrer\" target=\"_blank\">keyboard navigation</a> and <a href=\"https://github.com/bradgarropy/homeaway-typeahead/issues/2\" rel=\"noopener noreferrer\" target=\"_blank\">highlighting typeahead results</a>.</p>\n<h2>🤞🏼 fingers crossed</h2>\n<p>After not living up to my own standards during the first interview session, I felt like I came back strong for the last three. I even impressed myself by solving new problems (to me) live on a whiteboard!</p>\n<p>Send me 🍀 &#x26; 💙 on Twitter <a href=\"https://twitter.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">@bradgarropy</a> while I play the waiting game!</p>",
            "url": "https://bradgarropy.com/blog/homeaway-interview-process-on-site",
            "title": "👨🏼‍💼 homeaway interview process - on site",
            "date_modified": "2018-10-22T00:00:00.000Z",
            "date_published": "2018-10-22T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "homeaway-interview-process-phone-screens",
            "content_html": "<p>After learning web development independently for the past two years, I decided it was finally time to see what was available. I've been at <a href=\"https://www.dellemc.com/\" rel=\"noopener noreferrer\" target=\"_blank\">Dell</a> for eight years, so I had to start from scratch. I created a solid portfolio on <a href=\"https://github.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">Github</a>, wrote up my <a href=\"https://docs.google.com/document/d/1sBVOmITw-wZqlSQHwM1cgXSexn10xcUJYx_25Zo0Xug/edit?usp=sharing\" rel=\"noopener noreferrer\" target=\"_blank\">resume</a>, and even made a <a href=\"https://www.linkedin.com/in/bradgarropy/\" rel=\"noopener noreferrer\" target=\"_blank\">LinkedIn</a>. Luckily I have friends at some great Austin based companies, so I started with referrals and got a response from <a href=\"https://www.homeaway.com/\" rel=\"noopener noreferrer\" target=\"_blank\">HomeAway</a> first.</p>\n<h2>hr phone screen</h2>\n<p>The first call was with a human resources representative. She asked me basic questions like if I required sponsorship and what my timeline was. Then she asked some meatier questions about why I wanted to leave my current job and why I wanted to join HomeAway. This led to some discussions about team dynamics, how developer success is determined, and company culture. Finally she walked me through the next steps. She told me I'd have a technical phone screen with an engineer, where some coding would be involved.</p>\n<h2>technical phone screen</h2>\n<p>About a week later I got on a call and was greeted by <a href=\"https://www.linkedin.com/in/chriskarcher/\" rel=\"noopener noreferrer\" target=\"_blank\">Chris Karcher</a>. I was impressed by how thoroughly he reviewed my resume! He went through all of my personal projects and my <a href=\"https://github.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">Github</a> and was eager to talk about my web development learning process, where I started from a <a href=\"https://github.com/bradgarropy/node-only-server\" rel=\"noopener noreferrer\" target=\"_blank\">Node only server</a> and iterated until I built a <a href=\"https://github.com/bradgarropy/node-express-pug-mongodb-server\" rel=\"noopener noreferrer\" target=\"_blank\">full backend web application</a>.</p>\n<p>We talked about the evolution of JavaScript and which of the latest features I used. He asked me to explain callbacks versus promises versus async/await. We had a good discussion about CSS, how to architect it, and how to bring it into front end code.</p>\n<p>I really enjoyed this portion of the interview process, it was nice to talk about JavaScript and web development with someone who not only understands, but who has their own opinions formed by years of working in the industry.</p>\n<h3>coding question</h3>\n<p>Next, Chris and I hopped on a platform called <a href=\"https://www.hirevue.com/\" rel=\"noopener noreferrer\" target=\"_blank\">HireVue</a> which seemed like glorified plain text editor. Honestly, I would have preferred something like <a href=\"https://hackernoon.com/introducing-codesandbox-live-real-time-code-collaboration-in-the-browser-6d508cfc70c9\" rel=\"noopener noreferrer\" target=\"_blank\">CodeSandbox Live</a> or <a href=\"https://code.visualstudio.com/blogs/2017/11/15/live-share\" rel=\"noopener noreferrer\" target=\"_blank\">VSCode Live Share</a>. He asked me to share my thoughts and type out a solution to a coding question. The problem was something like this.</p>\n<blockquote>\n<p>The goal is to write a configuration parser, in the format <code>name=value</code>.<br>\nThis parser should support interpolation of values, denoted by <code>${}</code>.<br>\nThe parser should support nested interpolation.</p>\n</blockquote>\n<p>I managed to talk through the solution decently, although I was definitely nervous. Coding the solution went terribly, as HireVue wasn't actually a code editor. Luckily, Chris never expected me to run the code, he just wanted to hear me think through the problem and see psuedo code.</p>\n<p>But I'm not the type to leave a problem unsolved, so here is my <a href=\"https://github.com/bradgarropy/homeaway-config-parser\" rel=\"noopener noreferrer\" target=\"_blank\">solution</a>.</p>\n<h2>on site interview</h2>\n<p>As Chris and I wrapped up our conversation, I directly asked him how he thought it went, and he was honest and told me he was going to recommend to bring me on site for the last part of the interview process! It's a three hour interview with four different individuals, focusing on both front and back end skills to determine which team I'll fit best in.</p>\n<p>I'm definitely nervous about this portion, and I can't stand whiteboard coding. So I've been preparing by solving problems on <a href=\"https://www.codewars.com/\" rel=\"noopener noreferrer\" target=\"_blank\">Codewars</a> and <a href=\"https://leetcode.com/\" rel=\"noopener noreferrer\" target=\"_blank\">LeetCode</a>.</p>\n<p>Wish me luck on Twitter <a href=\"https://twitter.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">@bradgarropy</a> and stay tuned to find out how it went!</p>",
            "url": "https://bradgarropy.com/blog/homeaway-interview-process-phone-screens",
            "title": "☎️ homeaway interview process - phone screens",
            "date_modified": "2018-10-10T00:00:00.000Z",
            "date_published": "2018-10-10T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "i-am-a-developer",
            "content_html": "<p>First and foremost I consider myself a <code>developer</code>.</p>\n<p>I love breaking down complex problems, understanding how things work, and building on simple concepts.</p>\n<p>For example, when I began learning backend web development, I started from <em>absolute scratch</em> and coded a web server/REST API using only the <a href=\"https://nodejs.org/\" rel=\"noopener noreferrer\" target=\"_blank\">NodeJS</a> standard library. I built up on this idea until I had a basic modern server side web application. You can see the project iterations here:</p>\n<ol>\n<li><a href=\"https://github.com/bradgarropy/node-only-server\" rel=\"noopener noreferrer\" target=\"_blank\">node-only-server</a></li>\n<li><a href=\"https://github.com/bradgarropy/node-express-server\" rel=\"noopener noreferrer\" target=\"_blank\">node-express-server</a></li>\n<li><a href=\"https://github.com/bradgarropy/node-express-pug-server\" rel=\"noopener noreferrer\" target=\"_blank\">node-express-pug-server</a></li>\n<li><a href=\"https://github.com/bradgarropy/node-express-pug-mongodb-server\" rel=\"noopener noreferrer\" target=\"_blank\">node-express-pug-mongo-server</a></li>\n</ol>\n<p>Although these initial projects were a great learning experience, they lacked any real substance. I went on to create a <a href=\"https://weighter-react.herokuapp.com/\" rel=\"noopener noreferrer\" target=\"_blank\">weight tracking app</a> and my wife's <a href=\"https://photogarropy.netlify.app\" rel=\"noopener noreferrer\" target=\"_blank\">photography website</a>. I'm currently working on a fitness application I call <a href=\"https://buildgreatness.herokuapp.com/\" rel=\"noopener noreferrer\" target=\"_blank\">Build Greatness</a> as well as this site.</p>\n<h2>not quite a designer</h2>\n<p>Don't get me wrong, I know CSS. It's not my technical skills that are holding me back. I tell myself, <em>I just don't have the eye for it.</em></p>\n<p>But I think that's a lame excuse. Really I just don't know how to approach learning design. With code it's easy, read the docs. With design, I believe it comes down to <strong>imitation</strong> and <strong>iteration</strong>.</p>\n<p>Find designs that inspire you, understand why you like them, and take elements from them. Once you understand what you like, sketch something out, and make small, iterative changes on it to see how it evolves.</p>\n<h2>not quite a creator</h2>\n<p>For a short period of time I called myself a \"creator\" when I was releasing weekly vlogs and producing other content on my <a href=\"https://www.youtube.com/user/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">YouTube channel</a>. Outside of that, I had a short lived blog (like three posts) reviewing Texas country music and concerts.</p>\n<p>My biggest challenge is overcoming the need for perfection. While writing this, I've leaned over to my wife multiple times and asked her input on sentences, transitions etc. Being a creator is not about perfection, it's about expressing your unique voice, because ultimately that's what will make you stand out.</p>\n<p>Much like design, the only way to find your voice is to keep writing, keep recording, and keep editing until it comes natural. That's when your voice will come through the most.</p>\n<h2>my home on the web</h2>\n<p>Suffice it to say, this site is my new home on the web. It'll go through many iterations and changes, and I'm sure I'll look back on this post and cringe one day, but it's all in the process of becoming a better developer, designer, and creator.</p>",
            "url": "https://bradgarropy.com/blog/i-am-a-developer",
            "title": "⌨️ i am a developer",
            "date_modified": "2018-08-05T00:00:00.000Z",
            "date_published": "2018-08-05T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "jest-over-vitest",
            "content_html": "<p>JavaScript tooling has gotten a lot faster recently with the advent of <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules\" rel=\"noopener noreferrer\" target=\"_blank\">ESModules</a> and the creation of new Rust and Go based compilers. These speed improvements have affected everything from bundlers to test runners. <a href=\"https://vitest.dev\" rel=\"noopener noreferrer\" target=\"_blank\">Vitest</a> is a prime example of a new test runner that leverages <a href=\"https://esbuild.github.io\" rel=\"noopener noreferrer\" target=\"_blank\">esbuild</a> to execute very quickly.</p>\n<p>I use <a href=\"https://jestjs.io\" rel=\"noopener noreferrer\" target=\"_blank\">jest</a> to run tests on this website, but I was curious to see how <a href=\"https://vitest.dev\" rel=\"noopener noreferrer\" target=\"_blank\">vitest</a> performed in comparison. I <a href=\"https://github.com/bradgarropy/bradgarropy.com/pull/334\" rel=\"noopener noreferrer\" target=\"_blank\">converted</a> my entire test suite, and here are my thoughts on how it stacks up.</p>\n<h2>👛 initial changes</h2>\n<p>The first thing I noticed was that <code>vitest</code> does not expose globals like <code>test</code> and <code>expect</code> by default like <code>jest</code> does. This is <a href=\"https://vitest.dev/config/#globals\" rel=\"noopener noreferrer\" target=\"_blank\">configurable</a> to match the <code>jest</code> experience, although I preferred the explicit imports.</p>\n<p>Another main difference is that <code>vitest</code> does not automatically clean up mocks between tests like <code>jest</code> does. I handled this by adding cleanup code to my <code>setup.ts</code> file.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"typescript\" data-theme=\"Shades of Purple\"><code data-language=\"typescript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FAD000\">afterEach</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#FFEE80\">()</span><span style=\"color:#FAD000\"> =></span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FAD000\">    cleanup</span><span style=\"color:#E1EFFF\">()</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">    vi</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">clearAllMocks</span><span style=\"color:#E1EFFF\">()</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">    vi</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">clearAllTimers</span><span style=\"color:#E1EFFF\">()</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">})</span></span></code></pre></figure>\n<p>I have since found a <a href=\"https://vitest.dev/config/#clearmocks\" rel=\"noopener noreferrer\" target=\"_blank\">configuration option</a> that can clear mocks between each test.</p>\n<h2>🟦 types</h2>\n<p>When writing tests, I typically use <a href=\"https://testing-library.com/docs/ecosystem-jest-dom\" rel=\"noopener noreferrer\" target=\"_blank\">jest-dom</a> to add additional DOM matchers. These matchers come with their own types, and extend the <code>expect</code> keyword as expected. While <code>vitest</code> does support TypeScript, it doesn't extend these types correctly by default. In order to get this working I had to manually add the types to the <code>vi</code> object.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"typescript\" data-theme=\"Shades of Purple\"><code data-language=\"typescript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FF9D00;font-style:italic\">declare</span><span style=\"color:#9EFFFF\"> global</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B362FF;font-style:italic\">    // eslint-disable-next-line @typescript-eslint/no-namespace</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    namespace</span><span style=\"color:#80FFBB\"> Vi</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">        interface</span><span style=\"color:#80FFBB\"> JestAssertion</span><span style=\"color:#E1EFFF\">&#x3C;</span><span style=\"color:#80FFBB\">T</span><span style=\"color:#E1EFFF\">></span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00;font-style:italic\">            extends</span><span style=\"color:#80FFBB\"> jest</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FFEE80\">Matchers</span><span style=\"color:#E1EFFF\">&#x3C;</span><span style=\"color:#80FFBB\">void</span><span style=\"color:#E1EFFF\">,</span><span style=\"color:#80FFBB\"> T</span><span style=\"color:#E1EFFF\">>,</span></span>\n<span data-line=\"\"><span style=\"color:#FFEE80\">                TestingLibraryMatchers</span><span style=\"color:#E1EFFF\">&#x3C;</span><span style=\"color:#80FFBB\">T</span><span style=\"color:#E1EFFF\">,</span><span style=\"color:#80FFBB\"> void</span><span style=\"color:#E1EFFF\">></span><span style=\"color:#E1EFFF\"> {}</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span></span></code></pre></figure>\n<h2>🌠 svg modules</h2>\n<p>Another thing I had to adjust was how <code>svg</code> files were loaded into the test runner. With <code>jest</code>, you can use the <code>moduleNameMapper</code> configuration to stub out different file extensions. This was useful for all types of images and even <code>css</code>.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"typescript\" data-theme=\"Shades of Purple\"><code data-language=\"typescript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#E1EFFF\">{</span></span>\n<span data-line=\"\"><span style=\"color:#FAD000\">    moduleNameMapper</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#92FC79\">        \"</span><span style=\"color:#FF628C\">\\\\</span><span style=\"color:#A5FF90\">.module.css$</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#9EFFFF\">: </span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">identity-obj-proxy</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#92FC79\">        \"</span><span style=\"color:#FF628C\">\\\\</span><span style=\"color:#A5FF90\">.css$</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#9EFFFF\">: </span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">&#x3C;rootDir>/src/test-utils/css.ts</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#92FC79\">        \"</span><span style=\"color:#FF628C\">\\\\</span><span style=\"color:#A5FF90\">.jpg$</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#9EFFFF\">: </span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">&#x3C;rootDir>/src/test-utils/image.ts</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#92FC79\">        \"</span><span style=\"color:#FF628C\">\\\\</span><span style=\"color:#A5FF90\">.svg$</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#9EFFFF\">: </span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">&#x3C;rootDir>/src/test-utils/svg.tsx</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span></span></code></pre></figure>\n<p>With <code>vitest</code> I found a <a href=\"https://github.com/lucsky/vite-plugin-svgr\" rel=\"noopener noreferrer\" target=\"_blank\">plugin</a> for importing <code>svg</code> images. This plugin requires some interesting annotations to import statements to differentiate importing the <code>svg</code> as a URL or as a React component. These annotations luckily had no effect on my application build process, and are only used during testing.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"typescript\" data-theme=\"Shades of Purple\"><code data-language=\"typescript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FF9D00\">import</span><span style=\"color:#9EFFFF\"> TwitterIcon </span><span style=\"color:#FF9D00;font-style:italic\">from</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">svg/twitter.svg?component</span><span style=\"color:#92FC79\">\"</span></span></code></pre></figure>\n<h2>🏎 performance</h2>\n<p>Based on everthing I had read, <code>vitest</code> was going to be much faster than <code>jest</code> thanks to <code>esbuild</code>. However, in practice I found that <code>jest</code> completed full test runs 14% faster.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/jest-vs-vitest.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/jest-vs-vitest.png\" alt=\"jest vs vitest\" width=\"383\" height=\"253\"></a>\n<p>I tried everything I could to make <code>vitest</code> faster. I moved from <a href=\"https://github.com/jsdom/jsdom\" rel=\"noopener noreferrer\" target=\"_blank\">jsdom</a> to <a href=\"https://github.com/capricorn86/happy-dom\" rel=\"noopener noreferrer\" target=\"_blank\">happy-dom</a>. While it did increase speed, it came with its own <a href=\"https://github.com/capricorn86/happy-dom/issues/527\" rel=\"noopener noreferrer\" target=\"_blank\">issues</a>. I also tried disabling <a href=\"https://vitest.dev/config/#threads\" rel=\"noopener noreferrer\" target=\"_blank\">threads</a>, which cut the runtime in half! However, it came at the cost of stability, as my tests passed locally, but <a href=\"https://github.com/bradgarropy/bradgarropy.com/actions/runs/3379996975\" rel=\"noopener noreferrer\" target=\"_blank\">failed</a> in GitHub Actions.</p>\n<p>On the positive side, <code>vitest</code> was very fast in watch mode. I don't have specific numbers here, but it felt around two to three times faster than <code>jest</code>. This would be a big upside, but I don't usually do test driven development, or run my tests in watch mode very often.</p>\n<h2>🛑 staying put</h2>\n<p>At the end of this little adventure, I decided that migrating to <a href=\"https://vitest.dev\" rel=\"noopener noreferrer\" target=\"_blank\">vitest</a> wasn't the best choice for me at this time. It's not as fast as I thought it would be, and it came with a few too many quirks for my liking. This makes sense though, as <code>vitest</code> is currently at <code>v0.24.5</code>. I might reevaluate once it hits <code>v1.0.0</code>, but for now I'm sticking with <a href=\"https://jestjs.io\" rel=\"noopener noreferrer\" target=\"_blank\">jest</a>.</p>",
            "url": "https://bradgarropy.com/blog/jest-over-vitest",
            "title": "👌🏼 jest over vitest",
            "date_modified": "2022-11-04T00:00:00.000Z",
            "date_published": "2022-11-04T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "labman",
            "content_html": "<p>Nowadays I use <a href=\"https://github.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">GitHub</a> quite a bit. I'm always making new <a href=\"https://github.com/bradgarropy?tab=repositories\" rel=\"noopener noreferrer\" target=\"_blank\">repositories</a>, improving my project management skills, and open sourcing more <a href=\"https://www.npmjs.com/~bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">packages</a>. One crucial part of my project management strategy is tracking work through <a href=\"https://github.com/issues\" rel=\"noopener noreferrer\" target=\"_blank\">issues</a> and organizing them with labels.</p>\n<p>But each time I start a new repository, I have to manually recreate my labels. Out of the box <a href=\"https://github.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">GitHub</a> doesn't support copying labels, so I created <a href=\"https://www.npmjs.com/package/labman\" rel=\"noopener noreferrer\" target=\"_blank\">labman</a>.</p>\n<iframe class=\"aspect-video w-full rounded my-8\" title=\"l7BmkU9z4BE\" src=\"https://www.youtube-nocookie.com/embed/l7BmkU9z4BE\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen>\n        </iframe>\n<p><a href=\"https://www.npmjs.com/package/labman\" rel=\"noopener noreferrer\" target=\"_blank\">labman</a> is a CLI tool that clones issue labels from repository to repository. I made it executable with <code>npx</code>, so there is no overhead to get up and running. I also wanted to be crystal clear about the changes it makes to your labels, so I included some colored command line output. I made this all happen with the following technologies.</p>\n<ul>\n<li><a href=\"https://nodejs.org\" rel=\"noopener noreferrer\" target=\"_blank\">node</a></li>\n<li><a href=\"https://www.npmjs.com/package/npx\" rel=\"noopener noreferrer\" target=\"_blank\">npx</a></li>\n<li><a href=\"https://developer.github.com/v3/libraries\" rel=\"noopener noreferrer\" target=\"_blank\">octokit</a></li>\n<li><a href=\"https://yargs.js.org\" rel=\"noopener noreferrer\" target=\"_blank\">yargs</a></li>\n<li><a href=\"https://github.com/chalk/chalk\" rel=\"noopener noreferrer\" target=\"_blank\">chalk</a></li>\n</ul>\n<p>So if you spin up a lot of new projects, or just want consistent issue labels across your repositories, give <a href=\"https://www.npmjs.com/package/labman\" rel=\"noopener noreferrer\" target=\"_blank\">labman</a> a shot! I even created my own <a href=\"https://github.com/bradgarropy/labels/labels\" rel=\"noopener noreferrer\" target=\"_blank\">labels</a> repository as a template for the labels I like.</p>",
            "url": "https://bradgarropy.com/blog/labman",
            "title": "👨🏼‍🔬 labman",
            "date_modified": "2020-02-10T00:00:00.000Z",
            "date_published": "2020-02-10T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "learn-and-unlearn-how-to-code",
            "content_html": "<iframe class=\"aspect-video w-full rounded my-8\" title=\"5eJ2a9rn54U\" src=\"https://www.youtube-nocookie.com/embed/5eJ2a9rn54U\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen>\n        </iframe>\n<p>The minute I learned there was a coding livestream called <a href=\"https://www.youtube.com/channel/UC3ob2PbcsXT3IIMX--wLEfg\" rel=\"noopener noreferrer\" target=\"_blank\">Whiskey Wednesday</a>, I had to <a href=\"https://twitter.com/bradgarropy/status/1273611317333688321\" rel=\"noopener noreferrer\" target=\"_blank\">get in on it</a>. And what perfect timing, because just a few days later the hosts needed a guest that fit my description!</p>\n<div class=\"grid justify-center\">\n            <blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">🚨 Opportunity alarm 🚨<br><br>We had some cancelations for this week's Whiskey Wednesday.<br><br>Is any self-taught developer interested in coming to the show and talk about how they learned how to code and what the challenges were?<br><br>It takes place this Wednesday, June 24th at 4 pm UTC.</p>— Marc Backes (@themarcba) <a href=\"https://twitter.com/themarcba/status/1275080737746677762?ref_src=twsrc%5Etfw\" rel=\"noopener noreferrer\" target=\"_blank\">June 22, 2020</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n\n        </div>\n<p>I <a href=\"https://twitter.com/bradgarropy/status/1275091854325714946\" rel=\"noopener noreferrer\" target=\"_blank\">responded immediately</a> on Twitter and hit up one of the hosts in the <a href=\"https://discord.gg/pusds8V\" rel=\"noopener noreferrer\" target=\"_blank\">Learn Build Teach</a> Discord server. I got the response I was hoping for, and I was in! The topic of the show was about being a self taught developer, which is what I pride myself on. I never spent a dime on my web development education and I've done pretty well for myself so far.</p>\n<p>There were six developers on the stream: the hosts <a href=\"https://twitter.com/_marcba\" rel=\"noopener noreferrer\" target=\"_blank\">Marc</a> and <a href=\"https://twitter.com/spences10\" rel=\"noopener noreferrer\" target=\"_blank\">Scott</a>, myself, and three other guests who were self taught as well. <a href=\"https://twitter.com/EddyVinckk\" rel=\"noopener noreferrer\" target=\"_blank\">Eddy Vinck</a>, <a href=\"https://twitter.com/SharpeMartha\" rel=\"noopener noreferrer\" target=\"_blank\">Martha Sharpe</a>, and <a href=\"https://twitter.com/IkegahRuth\" rel=\"noopener noreferrer\" target=\"_blank\">Ruth Ikegah</a> were all at different points in their careers and it was great to hear their learning strategies.</p>\n<p>The episode did an amazing job bringing in an audience, and I got plenty of new followers after it aired. So welcome to everyone new, I hope I can teach you something!</p>",
            "url": "https://bradgarropy.com/blog/learn-and-unlearn-how-to-code",
            "title": "🧠 learn and unlearn how to code",
            "date_modified": "2020-06-24T00:00:00.000Z",
            "date_published": "2020-06-24T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "macbook-monitor-issues",
            "content_html": "<p>In my current <a href=\"https://bradgarropy.com/uses\" rel=\"noopener noreferrer\" target=\"_blank\">desk setup</a>, I've got a MacBook Pro plugged into two monitors via HDMI. Every so often, one or both of the monitors will go black for a few seconds. Usually they recover on their own, but sometimes I have to unplug them to bring them back to life.</p>\n<p>This was super annoying, but I finally found the fix! The laptop was switching graphics modes in order to conserve power. You can disable this by going to <em>Settings</em>, then <em>Battery</em>, clicking <em>Options</em>, and then turning off <em>Automatic graphics switching</em>.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/graphics-switching.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/graphics-switching.png\" alt=\"automatic graphics switching\" width=\"827\" height=\"876\"></a>",
            "url": "https://bradgarropy.com/blog/macbook-monitor-issues",
            "title": "🖥️ macbook monitor issues",
            "date_modified": "2023-02-14T00:00:00.000Z",
            "date_published": "2023-02-14T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "manually-trigger-github-actions",
            "content_html": "<p>Most <a href=\"https://github.com/features/actions\" rel=\"noopener noreferrer\" target=\"_blank\">GitHub Actions</a> run automatically when things happen in the repository. Events like pushes, pull requests, issues, forks, and releases are the most common. But if you've ever wanted to kick off a workflow manually, that is also supported.</p>\n<p>To enable a workflow to be run manually, add the <code>workflow_dispatch</code> entry to the <code>on</code> property. As a result, your action will now have a <em>Run workflow</em> button as shown below.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"yaml\" data-theme=\"Shades of Purple\"><code data-language=\"yaml\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FAD000\">name</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">🏁 manually triggered workflow</span><span style=\"color:#92FC79\">\"</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF628C\">on</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#A5FF90\"> workflow_dispatch</span></span></code></pre></figure>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/manual.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/manual.png\" alt=\"manual\" width=\"936\" height=\"435\"></a>\n<p>Some actions require inputs, so manually triggered workflows also have the ability to accept inputs. Inputs can be added by adding an <code>inputs</code> entry underneath the <code>workflow_dispatch</code> property. Each input has a key, which is mapped directly to the <a href=\"https://docs.github.com/en/actions/learn-github-actions/contexts#inputs-context\" rel=\"noopener noreferrer\" target=\"_blank\">input context</a>. They also have a few other nested properties as shown below.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"yaml\" data-theme=\"Shades of Purple\"><code data-language=\"yaml\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FAD000\">name</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">🏁 manually triggered workflow</span><span style=\"color:#92FC79\">\"</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF628C\">on</span><span style=\"color:#E1EFFF\">:</span></span>\n<span data-line=\"\"><span style=\"color:#FAD000\">    workflow_dispatch</span><span style=\"color:#E1EFFF\">:</span></span>\n<span data-line=\"\"><span style=\"color:#FAD000\">        inputs</span><span style=\"color:#E1EFFF\">:</span></span>\n<span data-line=\"\"><span style=\"color:#FAD000\">            firstName</span><span style=\"color:#E1EFFF\">:</span></span>\n<span data-line=\"\"><span style=\"color:#FAD000\">                description</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">Your first name</span><span style=\"color:#92FC79\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#FAD000\">                type</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#A5FF90\"> string</span></span>\n<span data-line=\"\"><span style=\"color:#FAD000\">                default</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#A5FF90\"> Brad</span></span>\n<span data-line=\"\"><span style=\"color:#FAD000\">                required</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#FF628C\"> true</span></span></code></pre></figure>\n<p>Now the <em>Run workflow</em> button on your action will show a dialog with all of the inputs listed for you to fill out manually before triggering the run.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/manual-inputs.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/manual-inputs.png\" alt=\"manual inputs\" width=\"936\" height=\"435\"></a>\n<p>As an added bonus, the <a href=\"https://cli.github.com\" rel=\"noopener noreferrer\" target=\"_blank\">GitHub CLI</a> also supports workflow commands. Workflows can be viewed, started, and monitored from your terminal. Use the command below to manually trigger a workflow from the CLI. It walks you through selecting the workflow and adding inputs.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"zsh\" data-theme=\"Shades of Purple\"><code data-language=\"zsh\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FAD000\">gh</span><span style=\"color:#A5FF90\"> workflow</span><span style=\"color:#A5FF90\"> run</span></span></code></pre></figure>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/workflow-cli.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/workflow-cli.png\" alt=\"github cli\" width=\"1024\" height=\"151\"></a>\n<p>For more information about manually triggering workflows, check the <a href=\"https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#workflow_dispatch\" rel=\"noopener noreferrer\" target=\"_blank\">documentation</a> or hit me up on <a href=\"https://twitter.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">Twitter</a>!</p>",
            "url": "https://bradgarropy.com/blog/manually-trigger-github-actions",
            "title": "🏁 manually trigger github actions",
            "date_modified": "2022-10-05T00:00:00.000Z",
            "date_published": "2022-10-05T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "migrating-to-nextjs",
            "content_html": "<p>I've attempted to migrate this site from <a href=\"https://gatsbyjs.com\" rel=\"noopener noreferrer\" target=\"_blank\">Gatsby</a> to <a href=\"https://nextjs.org\" rel=\"noopener noreferrer\" target=\"_blank\">Next.js</a> three times now, and have always called it quits for <a href=\"https://bradgarropy.com/blog/gatsby-vs-nextjs-markdown-blog\" rel=\"noopener noreferrer\" target=\"_blank\">one reason or another</a>. Some reasons were backed by data, others were just a gut feeling. At the end of the day, on the fourth attempt, I decided to stop sitting on the fence, and merged the <code>nextjs</code> branch into <code>master</code>.</p>\n<p>I want this post to highlight some of the tradeoffs around making the switch, while not analyzing the numbers too much. At the end of the day, it's a feeling I have that this is the right direction for the site. That's the thing about tradeoffs, there's no such thing as a clear winner.</p>\n<iframe class=\"aspect-video w-full rounded my-8\" title=\"IvubvZ9XUAo\" src=\"https://www.youtube-nocookie.com/embed/IvubvZ9XUAo\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen>\n        </iframe>\n<h2>💜 open source</h2>\n<p>All of the code for this website is <a href=\"https://github.com/bradgarropy/bradgarropy.com\" rel=\"noopener noreferrer\" target=\"_blank\">open source</a>, where you can find the <a href=\"https://github.com/bradgarropy/bradgarropy.com/pull/265\" rel=\"noopener noreferrer\" target=\"_blank\">pull request</a> that implemented the migration. It was a big one. Most importantly though, it was a net negative by around 55k lines.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/pr-diff.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/pr-diff.png\" alt=\"diff\" width=\"327\" height=\"75\"></a>\n<p>I was able to rip out so much Gatsby specific code, like plugins, GraphQL queries, and data hooks. In the following sections, you'll see how wide the impact of the Gatsby <a href=\"https://gatsbyjs.com/plugins\" rel=\"noopener noreferrer\" target=\"_blank\">plugin ecosystem</a> was on the code base. In some cases it was a great help, but when I encountered bugs or wanted more flexibility, it felt like a black box that I couldn't crack open.</p>\n<h2>💾 data sourcing</h2>\n<p>The primary difference between Gatsby and Next.js for a content site is how you source data. In my case, I pull data from local Markdown files, <a href=\"https://webdevweekly.captivate.fm\" rel=\"noopener noreferrer\" target=\"_blank\">Captivate</a>, <a href=\"http://github.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">GitHub</a> and <a href=\"https://youtube.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">YouTube</a>. Gatsby had plugins for all of these, but I had to write my own for Next.js. This was actually very simple, and I liked the control and flexibility I had over my data.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"typescript\" data-theme=\"Shades of Purple\"><code data-language=\"typescript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FF9D00\">const</span><span style=\"color:#FAD000\"> getPostBySlug</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#FF9D00;font-style:italic\"> async</span><span style=\"color:#FFEE80\"> (</span><span style=\"color:#9EFFFF\">slug</span><span style=\"color:#FF9D00\">:</span><span style=\"color:#80FFBB\"> PostFrontmatter</span><span style=\"color:#E1EFFF\">[</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">slug</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">]</span><span style=\"color:#FFEE80\">)</span><span style=\"color:#FF9D00\">:</span><span style=\"color:#80FFBB\"> Promise</span><span style=\"color:#E1EFFF\">&#x3C;</span><span style=\"color:#80FFBB\">Post</span><span style=\"color:#E1EFFF\">></span><span style=\"color:#FAD000\"> =></span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    const</span><span style=\"color:#9EFFFF\"> postPath </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#9EFFFF\"> path</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">join</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#9EFFFF\">process</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">cwd</span><span style=\"color:#E1EFFF\">(),</span><span style=\"color:#3AD900\"> `content/posts/</span><span style=\"color:#FFEE80\">${</span><span style=\"color:#9EFFFF\">slug</span><span style=\"color:#FFEE80\">}</span><span style=\"color:#3AD900\">.md`</span><span style=\"color:#E1EFFF\">)</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    const</span><span style=\"color:#9EFFFF\"> file </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#9EFFFF\"> matter</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">read</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#9EFFFF\">postPath</span><span style=\"color:#E1EFFF\">)</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    const</span><span style=\"color:#9EFFFF\"> html </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#FF9D00\"> await</span><span style=\"color:#FAD000\"> transformMarkdown</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#9EFFFF\">file</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">content</span><span style=\"color:#E1EFFF\">)</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    const</span><span style=\"color:#9EFFFF\"> post</span><span style=\"color:#FF9D00\">:</span><span style=\"color:#80FFBB\"> Post</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">        html</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">        frontmatter</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#9EFFFF\"> file</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">data</span><span style=\"color:#FF9D00\"> as</span><span style=\"color:#80FFBB\"> PostFrontmatter</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    return</span><span style=\"color:#9EFFFF\"> post</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span></span></code></pre></figure>\n<p>Above is an example of a helper method I created to grab a single <code>post</code>. Yep, just a few file system calls in about ten lines of code! Once you have this data it doesn't get stuffed into a complex and unnecessary <a href=\"https://gatsbyjs.com/docs/graphql\" rel=\"noopener noreferrer\" target=\"_blank\">GraphQL data layer</a>. Instead, Next.js passes it directly to the relevant page component as <code>props</code>.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"typescript\" data-theme=\"Shades of Purple\"><code data-language=\"typescript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FF9D00\">const</span><span style=\"color:#FAD000\"> getStaticProps</span><span style=\"color:#FF9D00\">:</span><span style=\"color:#80FFBB\"> GetStaticProps</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#FF9D00;font-style:italic\"> async</span><span style=\"color:#9EFFFF\"> context </span><span style=\"color:#FAD000\">=></span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    const</span><span style=\"color:#9EFFFF\"> slug </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#9EFFFF\"> context</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FFEE80\">params</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">slug</span><span style=\"color:#FF9D00\"> as</span><span style=\"color:#80FFBB\"> PostFrontmatter</span><span style=\"color:#E1EFFF\">[</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">slug</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">]</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    const</span><span style=\"color:#9EFFFF\"> post </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#FF9D00\"> await</span><span style=\"color:#FAD000\"> getPostBySlug</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#9EFFFF\">slug</span><span style=\"color:#E1EFFF\">)</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    return</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">        props</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">            post</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">        },</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span></span></code></pre></figure>\n<h2>🔻 markdown parsing</h2>\n<p>When using local Markdown to store blog posts, it's up to your application to transform it into HTML, or even React components, to be used in your site. Gatsby made this so easy with its plugins, but Next.js leaves this process completely up to the developer. As it turns out, parsing and transforming Markdown is a <a href=\"https://unifiedjs.com\" rel=\"noopener noreferrer\" target=\"_blank\">huge rabbit hole</a>.</p>\n<p>My Markdown parsing solution entails parsing Markdown to HTML on the server (<code>transformMarkdown</code>), and then parsing HTML to React on the client (<code>useMarkdown</code>). They each handle different parts of the transformation.</p>\n<ul>\n<li><a href=\"https://github.com/bradgarropy/bradgarropy.com/blob/main/src/utils/markdown.ts#L36\" rel=\"noopener noreferrer\" target=\"_blank\">Server</a>\n<ul>\n<li>Embedding videos, tweets, streams, etc.</li>\n<li>Syntax highlighting</li>\n<li>Linking to external sites</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/bradgarropy/bradgarropy.com/blob/main/src/hooks/useMarkdown/useMarkdown.tsx\" rel=\"noopener noreferrer\" target=\"_blank\">Client</a>\n<ul>\n<li>Next <code>&#x3C;Link></code> components</li>\n<li>Next <code>&#x3C;Image></code> components</li>\n</ul>\n</li>\n</ul>\n<h2>🟦 typescript support</h2>\n<p>But one area that was much easier was <a href=\"https://nextjs.org/docs/basic-features/typescript\" rel=\"noopener noreferrer\" target=\"_blank\">TypeScript support</a> in Next.js. While they both claim support out of the box, Next.js did a much better job of making TypeScript <em>just work</em> everywhere. For instance, Next.js exports types like <code>NextApiHandler</code> from the library that enabled me to use TypeScript in my API routes without any additional setup.</p>\n<h2>🃏 jest setup</h2>\n<p>Another thing that became super simple was my <a href=\"https://jestjs.io\" rel=\"noopener noreferrer\" target=\"_blank\">Jest</a> setup. Because Next.js is less involved in your application code than Gatsby, I had no reason to mock out the framework. My setup file went from fifty lines of mocking Gatsby and its components down to just one line.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"typescript\" data-theme=\"Shades of Purple\"><code data-language=\"typescript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FF9D00\">import</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">@testing-library/jest-dom</span><span style=\"color:#92FC79\">\"</span></span></code></pre></figure>\n<p>While working in Gatsby, I had a bunch of hooks for data fetching that relied on <code>useStaticQuery</code>. To test these hooks I had to mock out the complex GraphQL responses for each piece of data. Because Next.js allows me to use regular file system and network APIs, I was able to remove all of those complex mocks and replace them with simpler mocks that return plain JSON objects.</p>\n<h2>👨🏼‍💻 development server</h2>\n<p>At the end of the day, developer experience is very important to me, but I have to say that I think the Next.js development server feels slower than Gatsby. Although it starts up almost instantaneously, the Next.js server builds pages on demand, which makes clicking around your site very slow.</p>\n<p>But normally I'm not clicking around my site, I'm usually sitting on one page writing a blog post. Next.js is a bit frustrating here as well beacuse out of the box it doesn't hot reload when changes to the file system are made (although I think <a href=\"https://github.com/hashicorp/next-remote-watch\" rel=\"noopener noreferrer\" target=\"_blank\">it's possible</a>). It also seems to load the <code>&#x3C;Image></code> components at an alarmingly slow pace.</p>\n<h2>🛠 build times</h2>\n<p>On the upside, my production builds have gotten much faster. Building my Gatsby site on <a href=\"https://netlify.com\" rel=\"noopener noreferrer\" target=\"_blank\">Netlify</a> was averaging 3-4 minutes, while building Next.js on <a href=\"https://vercel.com\" rel=\"noopener noreferrer\" target=\"_blank\">Vercel</a> is only taking <em>60-90 seconds</em>. Not to mention, hosting on Vercel gives me other cool stuff like <a href=\"https://vercel.com/docs/concepts/analytics/web-vitals\" rel=\"noopener noreferrer\" target=\"_blank\">Web Vitals</a> analytics and <em>6000 build minutes</em> for free.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/vercel-build-times.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/vercel-build-times.png\" alt=\"build times\" width=\"373\" height=\"571\"></a>\n<h2>🙏🏼 thank you</h2>\n<p>This was a big rewrite, and there was a lot I had to learn to get this done. Thankfully <a href=\"https://twitter.com/crutchcorn\" rel=\"noopener noreferrer\" target=\"_blank\">@crutchcorn</a> was a few steps ahead of me in his migration of <a href=\"https://unicorn-utterances.com\" rel=\"noopener noreferrer\" target=\"_blank\">Unicorn Utterances</a> to Next.js. He answered a ton of questions from me in Discord and even hopped on a few <a href=\"https://twitch.tv/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">Twitch streams</a> with me to talk through any roadblocks. I couldn't have done it without you, thanks man!</p>\n<h2>👍🏼 conclusion</h2>\n<p>Like I said at the beginning, this migration is a tradeoff, but I think I'm making the right choice. My personal website is my playground, and it should always represent the latest technology that I'm using. I also believe that Vercel is heading in the right direction as a company, and won't leave Next.js behind as the company grows. I plan on using Next.js on all of the <a href=\"https://bradgarropy.com/blog/goals-for-2022#products\" rel=\"noopener noreferrer\" target=\"_blank\">SaaS products</a> I build this year, so this was a natural step forward to align on my future technology choices.</p>",
            "url": "https://bradgarropy.com/blog/migrating-to-nextjs",
            "title": "🦆 migrating to next.js",
            "date_modified": "2022-02-08T00:00:00.000Z",
            "date_published": "2022-02-08T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "mocking-gatsby-image",
            "content_html": "<p>In my quest for 100% test coverage, I've had to mock some <a href=\"https://gatsbyjs.com\" rel=\"noopener noreferrer\" target=\"_blank\">gatsby</a> internals to get tests to run in isolation. Since the release of <a href=\"https://gatsbyjs.com/blog/gatsbyconf-product-announcements\" rel=\"noopener noreferrer\" target=\"_blank\">Gatsby v3</a>, I had to take into account the new <a href=\"https://gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image\" rel=\"noopener noreferrer\" target=\"_blank\">gatsby-plugin-image</a>.</p>\n<p>In order to mock the plugin, I essentially copied the original plugin and then overwrote the <code>GatsbyImage</code> and <code>StaticImage</code> components with a function. The function creates a simple <a href=\"https://reactjs.org\" rel=\"noopener noreferrer\" target=\"_blank\">React</a> component that renders a vanilla <code>&#x3C;img></code> tag. This allows me to run assertions in <a href=\"https://jestjs.io\" rel=\"noopener noreferrer\" target=\"_blank\">jest</a> tests like I would expect.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"javascript\" data-theme=\"Shades of Purple\"><code data-language=\"javascript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#9EFFFF\">jest</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">mock</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">gatsby-plugin-image</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">,</span><span style=\"color:#E1EFFF\"> ()</span><span style=\"color:#FAD000\"> =></span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    const</span><span style=\"color:#9EFFFF\"> React </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#FAD000\"> require</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">react</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">)</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    const</span><span style=\"color:#9EFFFF\"> plugin </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#9EFFFF\"> jest</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">requireActual</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">gatsby-plugin-image</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">)</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    const</span><span style=\"color:#FAD000\"> mockImage</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#E1EFFF\"> ({</span><span style=\"color:#9EFFFF\">imgClassName</span><span style=\"color:#E1EFFF\">,</span><span style=\"color:#FF9D00\"> ...</span><span style=\"color:#9EFFFF\">props</span><span style=\"color:#E1EFFF\">})</span><span style=\"color:#FAD000\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">        React</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">createElement</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">img</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">,</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">            ...</span><span style=\"color:#9EFFFF\">props</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80FFBB\">            className</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#9EFFFF\"> imgClassName</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">        })</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    const</span><span style=\"color:#9EFFFF\"> mockPlugin </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">        ...</span><span style=\"color:#9EFFFF\">plugin</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80FFBB\">        GatsbyImage</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#9EFFFF\"> jest</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">fn</span><span style=\"color:#E1EFFF\">().</span><span style=\"color:#FAD000\">mockImplementation</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#9EFFFF\">mockImage</span><span style=\"color:#E1EFFF\">),</span></span>\n<span data-line=\"\"><span style=\"color:#80FFBB\">        StaticImage</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#9EFFFF\"> jest</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">fn</span><span style=\"color:#E1EFFF\">().</span><span style=\"color:#FAD000\">mockImplementation</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#9EFFFF\">mockImage</span><span style=\"color:#E1EFFF\">),</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    return</span><span style=\"color:#9EFFFF\"> mockPlugin</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">})</span></span></code></pre></figure>\n<p>You can place this code snippet in your <a href=\"https://github.com/bradgarropy/bradgarropy.com/blob/main/src/test-utils/setup.js#L9\" rel=\"noopener noreferrer\" target=\"_blank\">jest setup file</a> like I did. While this mock doesn't cover all of the functionality of <code>gatsby-plugin-image</code>, it certainly handles the features that I use in my daily development.</p>\n<p>Feel free to give this mock a try, and if there's enough interest I can package this up and release it on <a href=\"https://npmjs.com\" rel=\"noopener noreferrer\" target=\"_blank\">npm</a>.</p>",
            "url": "https://bradgarropy.com/blog/mocking-gatsby-image",
            "title": "😜 mocking gatsby image",
            "date_modified": "2021-06-25T00:00:00.000Z",
            "date_published": "2021-06-25T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "mocking-gatsby",
            "content_html": "<p>I recently started adding <a href=\"https://jestjs.io\" rel=\"noopener noreferrer\" target=\"_blank\">Jest</a> tests to all of my <a href=\"https://gatsbyjs.com\" rel=\"noopener noreferrer\" target=\"_blank\">Gatsby</a> projects. Right off the bat I didn't know how to mock <code>gatsby</code> so that I could test components that performed <code>graphql</code> calls with <code>useStaticQuery</code>.</p>\n<p>I went searching on the Gatsby site and found <a href=\"https://gatsbyjs.com/docs/unit-testing/#mocking-gatsby\" rel=\"noopener noreferrer\" target=\"_blank\">some documentation</a> showing how to mock <code>gatsby</code>. The documentation suggested to use <code>jest</code> manual mocks, which call for a <code>__mocks__</code> directory placed next to the module to be mocked. But I hated the thought of having an ugly <code>__mocks__</code> directory at the root of my project.</p>\n<p>So I kept digging until I found <a href=\"https://jestjs.io/docs/en/es6-class-mocks#calling-jestmockdocsenjest-objectjestmockmodulename-factory-options-with-the-module-factory-parameter\" rel=\"noopener noreferrer\" target=\"_blank\">this example</a> in the <code>jest</code> documentation. The example showed me that the <code>jest.mock()</code> function takes a <a href=\"https://jestjs.io/docs/en/jest-object#jestmockmodulename-factory-options\" rel=\"noopener noreferrer\" target=\"_blank\">second argument</a> which can output any object used to mock the module!</p>\n<p>The result is a fairly simple <code>gatsby</code> mock that I placed in my test setup file.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"javascript\" data-theme=\"Shades of Purple\"><code data-language=\"javascript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#9EFFFF\">jest</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">mock</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">gatsby</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">,</span><span style=\"color:#E1EFFF\"> ()</span><span style=\"color:#FAD000\"> =></span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    const</span><span style=\"color:#9EFFFF\"> React </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#FAD000\"> require</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">react</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">)</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    const</span><span style=\"color:#9EFFFF\"> gatsby </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#9EFFFF\"> jest</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">requireActual</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">gatsby</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">)</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    return</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">        ...</span><span style=\"color:#9EFFFF\">gatsby</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80FFBB\">        graphql</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#9EFFFF\"> jest</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">fn</span><span style=\"color:#E1EFFF\">(),</span></span>\n<span data-line=\"\"><span style=\"color:#80FFBB\">        Link</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#9EFFFF\"> jest</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">            .</span><span style=\"color:#FAD000\">fn</span><span style=\"color:#E1EFFF\">()</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">            .</span><span style=\"color:#FAD000\">mockImplementation</span><span style=\"color:#E1EFFF\">(</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">                ({</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">                    activeClassName</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">                    activeStyle</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">                    getProps</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">                    innerRef</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">                    partiallyActive</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">                    ref</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">                    replace</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">                    to</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">                    ...</span><span style=\"color:#9EFFFF\">rest</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">                })</span><span style=\"color:#FAD000\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">                    React</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">createElement</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">a</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">,</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">                        ...</span><span style=\"color:#9EFFFF\">rest</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80FFBB\">                        href</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#9EFFFF\"> to</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#80FFBB\">                        gatsby</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">true</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">                    }),</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">            ),</span></span>\n<span data-line=\"\"><span style=\"color:#80FFBB\">        StaticQuery</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#9EFFFF\"> jest</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">fn</span><span style=\"color:#E1EFFF\">(),</span></span>\n<span data-line=\"\"><span style=\"color:#80FFBB\">        useStaticQuery</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#9EFFFF\"> jest</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">fn</span><span style=\"color:#E1EFFF\">(),</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">})</span></span></code></pre></figure>\n<p>And don't forget to tell <code>jest</code> to run your setup file in <code>jest.config.js</code>.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"javascript\" data-theme=\"Shades of Purple\"><code data-language=\"javascript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FF9D00\">const</span><span style=\"color:#9EFFFF\"> config </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B362FF;font-style:italic\">    // ...</span></span>\n<span data-line=\"\"><span style=\"color:#80FFBB\">    setupFilesAfterEnv</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#E1EFFF\"> [</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">&#x3C;rootDir>/src/test-utils/setup</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">],</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#80FFBB\">module</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#80FFBB\">exports</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#9EFFFF\"> config</span></span></code></pre></figure>\n<p>If you're looking for more context, you can check out the <a href=\"https://github.com/bradgarropy/bradgarropy.com\" rel=\"noopener noreferrer\" target=\"_blank\">repository</a> for this site where I implemented this mock. Do you test your Gastby sites? If so, share your testing tips with me on <a href=\"https://twitter.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">Twitter</a>!</p>",
            "url": "https://bradgarropy.com/blog/mocking-gatsby",
            "title": "😜 mocking gatsby",
            "date_modified": "2020-11-16T00:00:00.000Z",
            "date_published": "2020-11-16T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "mocking-nextjs",
            "content_html": "<p>Previously I covered how to mock <a href=\"https://bradgarropy.com/blog/mocking-gatsby\" rel=\"noopener noreferrer\" target=\"_blank\">gatsby</a> and <a href=\"https://bradgarropy.com/blog/mocking-gatsby-image\" rel=\"noopener noreferrer\" target=\"_blank\">gatsby image</a> in <code>jest</code> tests. Lately I've been using <a href=\"https://nextjs.org\" rel=\"noopener noreferrer\" target=\"_blank\">Next.js</a> for new projects, and with that I've had to reimplement a few things that I had built specifically for <a href=\"https://gatsbyjs.com\" rel=\"noopener noreferrer\" target=\"_blank\">Gatsby</a>. For instance, I'll have to create new versions of my <a href=\"https://github.com/bradgarropy/gatsby-plugin-seo\" rel=\"noopener noreferrer\" target=\"_blank\">gatsby-plugin-seo</a> and <a href=\"https://github.com/bradgarropy/gatsby-link\" rel=\"noopener noreferrer\" target=\"_blank\">gatsby-link</a> packages for Next.js.</p>\n<p>However, I have been able to maintain very high test coverage with these new Next.js applications. But along the way I ran into functionality that I had to mock out so tests can run independently of the framework. The <code>next/head</code> and <code>next/image</code> components were the first two that came up.</p>\n<p>Mocking <code>next/head</code> was very simple, just a passthrough of the child nodes, which are usually <code>meta</code> tags. This works well for testing purposes because you can write assertions that target the child nodes as you would expect.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"javascript\" data-theme=\"Shades of Purple\"><code data-language=\"javascript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#9EFFFF\">jest</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">mock</span><span style=\"color:#E1EFFF\">(</span></span>\n<span data-line=\"\"><span style=\"color:#92FC79\">    \"</span><span style=\"color:#A5FF90\">next/head</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    ()</span><span style=\"color:#FAD000\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#FB94FF\">        function</span><span style=\"color:#FAD000\"> Head</span><span style=\"color:#E1EFFF\">({</span><span style=\"color:#9EFFFF\">children</span><span style=\"color:#E1EFFF\">})</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">            return</span><span style=\"color:#9EFFFF\"> &#x3C;></span><span style=\"color:#E1EFFF\">{</span><span style=\"color:#9EFFFF\">children</span><span style=\"color:#E1EFFF\">}</span><span style=\"color:#9EFFFF\">&#x3C;/></span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">        },</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">)</span></span></code></pre></figure>\n<p>While the <code>next/image</code> component is much more complicated, the mock remains simple. I defined the mock as an <code>img</code> tag and passed through only the <code>src</code> and <code>alt</code> attributes. This is a subset of the possible props, but you can add more if you like. Now I can treat the <code>&#x3C;Image></code> component just like a vanilla <code>img</code> tag in my tests!</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"javascript\" data-theme=\"Shades of Purple\"><code data-language=\"javascript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#9EFFFF\">jest</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">mock</span><span style=\"color:#E1EFFF\">(</span></span>\n<span data-line=\"\"><span style=\"color:#92FC79\">    \"</span><span style=\"color:#A5FF90\">next/image</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    ()</span><span style=\"color:#FAD000\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#FB94FF\">        function</span><span style=\"color:#FAD000\"> Image</span><span style=\"color:#E1EFFF\">({</span><span style=\"color:#9EFFFF\">src</span><span style=\"color:#E1EFFF\">,</span><span style=\"color:#9EFFFF\"> alt</span><span style=\"color:#E1EFFF\">})</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#B362FF;font-style:italic\">            // eslint-disable-next-line @next/next/no-img-element</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">            return</span><span style=\"color:#9EFFFF\"> &#x3C;img </span><span style=\"color:#FAD000;font-style:italic\">src</span><span style=\"color:#FF9D00\">=</span><span style=\"color:#E1EFFF\">{</span><span style=\"color:#9EFFFF\">src</span><span style=\"color:#E1EFFF\">}</span><span style=\"color:#FAD000;font-style:italic\"> alt</span><span style=\"color:#FF9D00\">=</span><span style=\"color:#E1EFFF\">{</span><span style=\"color:#9EFFFF\">alt</span><span style=\"color:#E1EFFF\">}</span><span style=\"color:#9EFFFF\"> /></span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">        },</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">)</span></span></code></pre></figure>\n<p>If you find these mocks useful, let me know and I can publish them as an <code>npm</code> package. What kind of mocks do you use when testing <a href=\"https://nextjs.org\" rel=\"noopener noreferrer\" target=\"_blank\">Next.js</a>? Let me know on <a href=\"https://twitter.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">Twitter</a>!</p>",
            "url": "https://bradgarropy.com/blog/mocking-nextjs",
            "title": "😜 mocking next.js",
            "date_modified": "2021-06-28T00:00:00.000Z",
            "date_published": "2021-06-28T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "modular-eslint-configuration",
            "content_html": "<p>I feel like I revamp my <a href=\"https://eslint.org\" rel=\"noopener noreferrer\" target=\"_blank\">eslint</a> configuration almost annually nowadays. This year the focus was on modularizing the configuration to support different technologies. Here's what I currently support.</p>\n<ul>\n<li><a href=\"https://npmjs.com/package/@bradgarropy/eslint-config-react\" rel=\"noopener noreferrer\" target=\"_blank\">React</a></li>\n<li><a href=\"https://npmjs.com/package/@bradgarropy/eslint-config-svelte\" rel=\"noopener noreferrer\" target=\"_blank\">Svelte</a></li>\n<li><a href=\"https://npmjs.com/package/@bradgarropy/eslint-config\" rel=\"noopener noreferrer\" target=\"_blank\">JavaScript</a></li>\n<li><a href=\"https://npmjs.com/package/@bradgarropy/eslint-config-typescript\" rel=\"noopener noreferrer\" target=\"_blank\">Typescript</a></li>\n</ul>\n<p>The configurations are intended to extend one another, starting from the base <a href=\"https://npmjs.com/package/@bradgarropy/eslint-config\" rel=\"noopener noreferrer\" target=\"_blank\">JavaScript</a> configuration. It can be installed like this.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"zsh\" data-theme=\"Shades of Purple\"><code data-language=\"zsh\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FAD000\">npx</span><span style=\"color:#A5FF90\"> install-peerdeps</span><span style=\"color:#FF628C\"> --dev</span><span style=\"color:#A5FF90\"> @bradgarropy/eslint-config</span></span></code></pre></figure>\n<p>Then you can create an <code>.eslintrc</code> file to extend the base configuration.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"json\" data-theme=\"Shades of Purple\"><code data-language=\"json\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#E1EFFF\">{</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    \"</span><span style=\"color:#FAD000\">extends</span><span style=\"color:#E1EFFF\">\"</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#E1EFFF\"> [</span><span style=\"color:#92FC79\">\"@bradgarropy/eslint-config\"</span><span style=\"color:#E1EFFF\">]</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span></span></code></pre></figure>\n<p>But let's say you were working in a <a href=\"https://reactjs.org\" rel=\"noopener noreferrer\" target=\"_blank\">React</a> project using <a href=\"https://www.typescriptlang.org\" rel=\"noopener noreferrer\" target=\"_blank\">TypeScript</a>. You can enable linting for those technologies by first downloading the packages.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"zsh\" data-theme=\"Shades of Purple\"><code data-language=\"zsh\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FAD000\">npx</span><span style=\"color:#A5FF90\"> install-peerdeps</span><span style=\"color:#FF628C\"> --dev</span><span style=\"color:#A5FF90\"> @bradgarropy/eslint-config-react</span></span>\n<span data-line=\"\"><span style=\"color:#FAD000\">npx</span><span style=\"color:#A5FF90\"> install-peerdeps</span><span style=\"color:#FF628C\"> --dev</span><span style=\"color:#A5FF90\"> @bradgarropy/eslint-config-typescript</span></span></code></pre></figure>\n<p>Then modify the <code>.eslintrc</code> file to further extend the base configuration.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"json\" data-theme=\"Shades of Purple\"><code data-language=\"json\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#E1EFFF\">{</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    \"</span><span style=\"color:#FAD000\">extends</span><span style=\"color:#E1EFFF\">\"</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#E1EFFF\"> [</span></span>\n<span data-line=\"\"><span style=\"color:#92FC79\">        \"@bradgarropy/eslint-config\"</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#92FC79\">        \"@bradgarropy/eslint-config-react\"</span></span>\n<span data-line=\"\"><span style=\"color:#92FC79\">        \"@bradgarropy/eslint-config-typescript\"</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    ]</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span></span></code></pre></figure>\n<p>It's important to note that order matters in the <code>extends</code> property. Configurations coming later will take precendence over configurations earlier in the list. However this shouldn't matter with my <code>eslint</code> packages, as they modify independent lint rules.</p>\n<p>You can find all of my <a href=\"https://npmjs.com/search?q=%40bradgarropy%2Feslint-config\" rel=\"noopener noreferrer\" target=\"_blank\">eslint configurations</a> on <code>npm</code>. If you have any questions or issues getting them set up, reach out on <a href=\"https://twitter.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">Twitter</a> or <a href=\"https://bradgarropy.com/discord\" rel=\"noopener noreferrer\" target=\"_blank\">Discord</a>, or create an <a href=\"https://github.com/bradgarropy/eslint-config/issues/new\" rel=\"noopener noreferrer\" target=\"_blank\">issue</a>!</p>",
            "url": "https://bradgarropy.com/blog/modular-eslint-configuration",
            "title": "💎 modular eslint configuration",
            "date_modified": "2020-12-16T00:00:00.000Z",
            "date_published": "2020-12-16T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "murphy",
            "content_html": "<p>Recently my buddy <a href=\"https://twitter.com/austintoddj\" rel=\"noopener noreferrer\" target=\"_blank\">Todd Austin</a> challenged me to do half a <a href=\"https://themurphchallenge.com/pages/the-workout\" rel=\"noopener noreferrer\" target=\"_blank\">murph</a> every day for a week. I accepted, and quickly learned that counting reps and rounds while you're sweating and breathing heavy is not easy. So I did what every developer would do, I built an app.</p>\n<p><a href=\"https://play.google.com/store/apps/details?id=com.bradgarropy.murphy.twa\" rel=\"noopener noreferrer\" target=\"_blank\">MURPHY</a> is a workout timer specifically designed for murph. It splits the workout into multiple rounds of pull ups, push ups, and squats, and tracks your time for each exercise. Registered users can save their workouts, view past workouts, and track their performance over time!</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/murphy.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/murphy.png\" alt=\"murphy\" width=\"1080\" height=\"1080\"></a>\n<p>I began building <a href=\"https://play.google.com/store/apps/details?id=com.bradgarropy.murphy.twa\" rel=\"noopener noreferrer\" target=\"_blank\">MURPHY</a> as a learning experience, using a completely new technology stack. While new frameworks and tools are fun to explore, they definitely slowed me down in the beginning. Here's what I went with.</p>\n<ul>\n<li><a href=\"https://svelte.dev\" rel=\"noopener noreferrer\" target=\"_blank\">Svelte</a></li>\n<li><a href=\"http://tailwindcss.com\" rel=\"noopener noreferrer\" target=\"_blank\">Tailwind</a></li>\n<li><a href=\"https://fauna.com\" rel=\"noopener noreferrer\" target=\"_blank\">FaunaDB</a></li>\n<li><a href=\"https://netlify.com\" rel=\"noopener noreferrer\" target=\"_blank\">Netlify</a></li>\n<li><a href=\"https://docs.netlify.com/visitor-access/identity\" rel=\"noopener noreferrer\" target=\"_blank\">Netlify Identity</a></li>\n</ul>\n<p>I found <a href=\"https://svelte.dev\" rel=\"noopener noreferrer\" target=\"_blank\">Svelte</a> very easy to work with, and animations were a breeze. <a href=\"http://tailwindcss.com\" rel=\"noopener noreferrer\" target=\"_blank\">Tailwind</a> was also very easy, except for the lack of <code>grid</code> properties. Lucky for me <a href=\"https://tailwindcss.com/docs/release-notes#tailwind-css-v1-8\" rel=\"noopener noreferrer\" target=\"_blank\">v1.8</a> released and added the missing properties. I still felt a bit weird every time I had to edit the <code>tailwind.config.js</code> file just to use a custom <code>grid</code> layout. <a href=\"https://fauna.com\" rel=\"noopener noreferrer\" target=\"_blank\">FaunaDB</a> is amazing, as was their developer relations team who provided me tons of help (shoutout <a href=\"https://twitter.com/databrecht\" rel=\"noopener noreferrer\" target=\"_blank\">@databrecht</a>). After getting over the <code>FQL</code> learning curve, I felt like I had super powers.</p>\n<p>But one thing is for sure, I didn't feel powerful when using <a href=\"https://docs.netlify.com/visitor-access/identity\" rel=\"noopener noreferrer\" target=\"_blank\">Netlify Identity</a> at all. For every one feature Identity gives you, it makes another difficult. For example, there is no way to differentiate a <code>login</code> event from a <code>signup</code> event. Morever, there's no way to tell if a user logged in with their username and password, or from a saved token.</p>\n<p>In the end, this new tech stack got me to where I needed to go, and I learned a ton along the way. The process of taking a PWA to the <a href=\"https://play.google.com/store/apps/details?id=com.bradgarropy.murphy.twa\" rel=\"noopener noreferrer\" target=\"_blank\">Google Play Store</a> was particularly challenging, but so incredibly rewarding to see my app somewhere so <em>official</em>.</p>\n<p>If you want to improve your health, consider supporting me and purchasing <a href=\"https://play.google.com/store/apps/details?id=com.bradgarropy.murphy.twa\" rel=\"noopener noreferrer\" target=\"_blank\">MURPHY</a>!</p>",
            "url": "https://bradgarropy.com/blog/murphy",
            "title": "⏱ murphy",
            "date_modified": "2020-10-13T00:00:00.000Z",
            "date_published": "2020-10-13T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "my-atypical-day",
            "content_html": "<p>Lately folks like <a href=\"https://chriscoyier.net/2021/01/08/my-typical-day\" rel=\"noopener noreferrer\" target=\"_blank\">Chris Coyier</a>, <a href=\"https://danmall.me/articles/my-typical-day\" rel=\"noopener noreferrer\" target=\"_blank\">Dan Mall</a>, and <a href=\"https://daverupert.com/2021/01/my-typical-day\" rel=\"noopener noreferrer\" target=\"_blank\">Dave Rupert</a> have been sharing what their typical day looks like. I figured I'd do the same, although this is not my typical day. With the pandemic and my <a href=\"https://www.instagram.com/stories/highlights/18178341115045580\" rel=\"noopener noreferrer\" target=\"_blank\">torn achilles</a>, things are a bit different for me. But here it is nonethless.</p>\n<p><strong><code>6:45AM</code></strong> Wake up, brush my teeth, and wash my face.</p>\n<p><strong><code>7:00AM</code></strong> Do my physical therapy exercises while my wife gets the kids up. These exercises include stretching my leg and ankle, and then working on weight bearing.</p>\n<p><strong><code>7:30AM</code></strong> Do my best at wrangling the kids while my wife makes breakfast.</p>\n<p><strong><code>8:00AM</code></strong> Breakfast with the family. Five eggs and a cup of coffee every day.</p>\n<p><strong><code>8:30AM</code></strong> Post my daily goals on <a href=\"https://twitter.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">Twitter</a>, then start work at <a href=\"https://www.adobe.com\" rel=\"noopener noreferrer\" target=\"_blank\">Adobe</a>. I have just enough time to clear my inbox, answer some Slack messages, and review the Jira board before morning standup. Then it's coding until lunch time.</p>\n<p><strong><code>12:00PM</code></strong> Lunch with the family. Beef, rice, and some veggies every day. Lunch is more relaxed than breakfast because my wife and I meal prep, so it's just a matter of microwaving some tupperware.</p>\n<p><strong><code>12:30PM</code></strong> Another session of physical therapy exercises, still focusing on stretching the leg and ankle, and then weight bearing.</p>\n<p><strong><code>1:00PM</code></strong> Back to work. More coding, maybe a meeting but usually not.</p>\n<p><strong><code>4:00PM</code></strong> Family time! We take the kids out in the yard to play when the weather is nice and try to tire them out. This is usually where I give my wife a break.</p>\n<p><strong><code>5:00PM</code></strong> More physical therapy exercises, again with the focus on stretching and weight bearing.</p>\n<p><strong><code>5:30PM</code></strong> Do my best at wrangling the kids while my wife makes dinner. The TV is usually on at this time, but their attention span is limited.</p>\n<p><strong><code>6:00PM</code></strong> Dinner with the family. Chicken, rice, and some veggies every day.</p>\n<p><strong><code>6:30PM</code></strong> Bath time, get the kids ready for bed.</p>\n<p><strong><code>7:00PM</code></strong> Put down our son. Our daughter gets to stay up another hour and watch a movie or do whatever mommy and daddy are doing. I do one final session of physical therapy exercises, this time focusing on banded resistance movements for ankle strength.</p>\n<p><strong><code>8:00PM</code></strong> Put down our daughter. Freedom! Usually I head back to the computer to work on side projects. This means <a href=\"https://github.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">coding</a>, <a href=\"https://bradgarropy.com/blog\" rel=\"noopener noreferrer\" target=\"_blank\">blogging</a>, <a href=\"https://twitch.tv/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">streaming</a>, or <a href=\"https://youtube.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">recording</a>. On nights where I just don't feel like being productive, I'll watch some tutorials or a TV show. On rare occasions I'll play a video game, lately it's been <a href=\"https://www.tonyhawkthegame.com\" rel=\"noopener noreferrer\" target=\"_blank\">Tony Hawks' Pro Skater</a>. At least once a week my wife and I eat a cheat meal and spend time together.</p>\n<p><strong><code>12:00AM</code></strong> Lights out.</p>\n<p>Usually I work out from <strong><code>7:00PM</code></strong> to <strong><code>8:30PM</code></strong> and then start the rest of my night, but the <a href=\"https://www.instagram.com/stories/highlights/18178341115045580\" rel=\"noopener noreferrer\" target=\"_blank\">achilles injury</a> is putting a damper on that. Once things get back to normal maybe I'll write a post called <strong>my typical day</strong>.</p>\n<p><em>I'd like to see what a typical day looks like for <a href=\"https://www.jamesqquick.com\" rel=\"noopener noreferrer\" target=\"_blank\">James Quick</a> and <a href=\"https://brianmorrison.me\" rel=\"noopener noreferrer\" target=\"_blank\">Brian Morrison</a>.</em></p>",
            "url": "https://bradgarropy.com/blog/my-atypical-day",
            "title": "⏰ my atypical day",
            "date_modified": "2021-01-23T00:00:00.000Z",
            "date_published": "2021-01-23T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "my-favorite-layout",
            "content_html": "<p>Every time I spin up a new website, I find myself settling on the same layout: a tried and true three row header / content / footer design. With the widespread support of <a href=\"https://css-tricks.com/snippets/css/complete-guide-grid\" rel=\"noopener noreferrer\" target=\"_blank\">CSS grid</a>, it's gotten much easier to implement. I'll show you how!</p>\n<p>Before we get started, here is a <a href=\"https://codesandbox.io/embed/my-favorite-layout-h3fpz?autoresize=1&#x26;fontsize=14&#x26;hidenavigation=1&#x26;module=%2Fsrc%2Fcomponents%2FApp.js\" rel=\"noopener noreferrer\" target=\"_blank\">CodeSandbox</a> of the final layout. I like this layout because the footer aways sits at the bottom of the viewport, regardless of the content height. Short bits of content remain vertically centered, while long chunks of content cause the page to scroll.</p>\n<iframe class=\"aspect-video w-full rounded my-8 h-[500px]\" src=\"https://codesandbox.io/embed/my-favorite-layout-h3fpz?fontsize=14&#x26;hidenavigation=1&#x26;module=%2Fsrc%2Fcomponents%2FApp.js&#x26;view=preview\" frameborder=\"0\" allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\" sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\">\n        </iframe>\n<p>I start by scaffolding out the <code>App</code> component into the three main sections: <code>Header</code>, <code>Content</code>, and <code>Footer</code>.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"javascript\" data-theme=\"Shades of Purple\"><code data-language=\"javascript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FF9D00\">const</span><span style=\"color:#FAD000\"> App</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#E1EFFF\"> ()</span><span style=\"color:#FAD000\"> =></span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    return</span><span style=\"color:#E1EFFF\"> (</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">        &#x3C;</span><span style=\"color:#80FFBB\">BrowserRouter</span><span style=\"color:#9EFFFF\">></span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">            &#x3C;div </span><span style=\"color:#FAD000;font-style:italic\">className</span><span style=\"color:#FF9D00\">=</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">app</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#9EFFFF\">></span></span>\n<span data-line=\"\" data-highlighted-line=\"\"><span style=\"color:#9EFFFF\">                &#x3C;</span><span style=\"color:#80FFBB\">Header</span><span style=\"color:#9EFFFF\"> /></span></span>\n<span data-line=\"\" data-highlighted-line=\"\"><span style=\"color:#9EFFFF\">                &#x3C;</span><span style=\"color:#80FFBB\">Content</span><span style=\"color:#9EFFFF\"> /></span></span>\n<span data-line=\"\" data-highlighted-line=\"\"><span style=\"color:#9EFFFF\">                &#x3C;</span><span style=\"color:#80FFBB\">Footer</span><span style=\"color:#9EFFFF\"> /></span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">            &#x3C;/div></span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">        &#x3C;/</span><span style=\"color:#80FFBB\">BrowserRouter</span><span style=\"color:#9EFFFF\">></span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    )</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span></span></code></pre></figure>\n<p>Then I define a row based grid, where the <code>Header</code> and <code>Footer</code> take up only the space they need with <code>auto</code>, and the <code>Content</code> takes up the rest of the space with <code>1fr</code>. It's also very important to specify <code>min-height: 100vh</code>. This ensures that no matter how short the content is, the grid will take up the entire height of the viewport, keeping the <code>Footer</code> at the bottom.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"css\" data-theme=\"Shades of Purple\"><code data-language=\"css\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#E1EFFF;font-style:italic\">.</span><span style=\"color:#9EFFFF;font-style:italic\">app</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#A5FF90\">    font-family</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#FFEE80\"> sans-serif</span><span style=\"color:#E1EFFF\">;</span></span>\n<span data-line=\"\" data-highlighted-line=\"\"><span style=\"color:#A5FF90\">    display</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#FFEE80\"> grid</span><span style=\"color:#E1EFFF\">;</span></span>\n<span data-line=\"\" data-highlighted-line=\"\"><span style=\"color:#A5FF90\">    grid-template-rows</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#FFEE80\"> auto</span><span style=\"color:#FFEE80\"> 1</span><span style=\"color:#FF9D00\">fr</span><span style=\"color:#FFEE80\"> auto</span><span style=\"color:#E1EFFF\">;</span></span>\n<span data-line=\"\" data-highlighted-line=\"\"><span style=\"color:#A5FF90\">    min-height</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#FFEE80\"> 100</span><span style=\"color:#FF9D00\">vh</span><span style=\"color:#E1EFFF\">;</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span></span></code></pre></figure>\n<p>And that's all it takes to code my favorite layout.\nWhat are your go to designs? Share them with me on <a href=\"https://twitter.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">Twitter</a>!</p>",
            "url": "https://bradgarropy.com/blog/my-favorite-layout",
            "title": "👙 my favorite layout",
            "date_modified": "2019-05-29T00:00:00.000Z",
            "date_published": "2019-05-29T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "netlify-to-vercel",
            "content_html": "<p>After running out of build minutes on <a href=\"https://www.netlify.com\" rel=\"noopener noreferrer\" target=\"_blank\">Netlify</a>, and considering moving this site to <a href=\"https://nextjs.org\" rel=\"noopener noreferrer\" target=\"_blank\">Next.js</a> for so long, I decided to give <a href=\"https://vercel.com\" rel=\"noopener noreferrer\" target=\"_blank\">Vercel</a> a shot for hosting my portfolio. The process turned out to be very simple, and now I've got this <a href=\"https://www.gatsbyjs.org\" rel=\"noopener noreferrer\" target=\"_blank\">Gatsby</a> site deployed on both Netlify and Vercel.</p>\n<p>Here's the merged <a href=\"https://github.com/bradgarropy/bradgarropy.com/pull/258\" rel=\"noopener noreferrer\" target=\"_blank\">pull request</a>, but I'll describe each step, then compare the two hosts at the end.</p>\n<h2>⚡ serverless functions</h2>\n<p>The biggest change was to my serverless functions. Netlify expected them to be in the <code>functions</code> directory, and Vercel wants them to be in the <code>api</code> directory with a <code>default</code> export.</p>\n<p>The function signature is also a bit different. Vercel uses <code>request</code> and <code>response</code> objects as inputs, which mirror the <a href=\"https://expressjs.com\" rel=\"noopener noreferrer\" target=\"_blank\">Express</a> API. I prefer this to Netlify's <code>event</code> input, which is the same as AWS Lambda functions. Vercel also provides some really nice <a href=\"https://vercel.com/docs/runtimes#official-runtimes/node-js/node-js-request-and-response-objects/node-js-helpers\" rel=\"noopener noreferrer\" target=\"_blank\">helper methods</a> for dealing with the <code>request</code> body and sending different types of responses.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"typescript\" data-theme=\"Shades of Purple\"><code data-language=\"typescript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FF9D00\">import</span><span style=\"color:#E1EFFF\"> {</span><span style=\"color:#9EFFFF\">VercelRequest</span><span style=\"color:#E1EFFF\">,</span><span style=\"color:#9EFFFF\"> VercelResponse</span><span style=\"color:#E1EFFF\">}</span><span style=\"color:#FF9D00;font-style:italic\"> from</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">@vercel/node</span><span style=\"color:#92FC79\">\"</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">const</span><span style=\"color:#FAD000\"> handler</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#FF9D00;font-style:italic\"> async</span><span style=\"color:#FFEE80\"> (</span><span style=\"color:#9EFFFF\">req</span><span style=\"color:#FF9D00\">:</span><span style=\"color:#80FFBB\"> VercelRequest</span><span style=\"color:#E1EFFF\">,</span><span style=\"color:#9EFFFF\"> res</span><span style=\"color:#FF9D00\">:</span><span style=\"color:#80FFBB\"> VercelResponse</span><span style=\"color:#FFEE80\">)</span><span style=\"color:#FAD000\"> =></span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">    res</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">status</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#FF628C\">200</span><span style=\"color:#E1EFFF\">).</span><span style=\"color:#FAD000\">json</span><span style=\"color:#E1EFFF\">({})</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">export</span><span style=\"color:#FF9D00\"> default</span><span style=\"color:#9EFFFF\"> handler</span></span></code></pre></figure>\n<p>And bonus, Vercel supports <a href=\"https://www.typescriptlang.org\" rel=\"noopener noreferrer\" target=\"_blank\">TypeScript</a> out of the box!</p>\n<h2>⤴️ redirects</h2>\n<p>I never liked Netlify's options for <a href=\"https://docs.netlify.com/routing/redirects\" rel=\"noopener noreferrer\" target=\"_blank\">configuring redirects</a>. The <code>toml</code> file seemed like an odd choice, and the <code>_redirects</code> file felt very non-standard. Thankfully, Vercel has an easy to understand <code>json</code> file to <a href=\"https://vercel.com/docs/cli#project-configuration/redirects\" rel=\"noopener noreferrer\" target=\"_blank\">customize redirects</a>.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"json\" data-theme=\"Shades of Purple\"><code data-language=\"json\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#E1EFFF\">{</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    \"</span><span style=\"color:#FAD000\">redirects</span><span style=\"color:#E1EFFF\">\"</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#E1EFFF\"> [</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">            \"</span><span style=\"color:#FAD000\">source</span><span style=\"color:#E1EFFF\">\"</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#92FC79\"> \"/sponsor\"</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">            \"</span><span style=\"color:#FAD000\">destination</span><span style=\"color:#E1EFFF\">\"</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#92FC79\"> \"https://github.com/sponsors/bradgarropy\"</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">            \"</span><span style=\"color:#FAD000\">permanent</span><span style=\"color:#E1EFFF\">\"</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#FF628C\"> true</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    ]</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span></span></code></pre></figure>\n<p>All of my redirects are considered <code>permanent</code>, except for the rewrite I had to use for Netlify's serverless functions. But it is no longer needed on Vercel because their functions are already served at the sensible <code>/api</code> endpoint.</p>\n<h2>🌳 environment variables</h2>\n<p>The last piece of the puzzle was moving my environment variables over to Vercel. The UI was easy to find and was almost identical to the Netlify UI.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/environment-variables.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/environment-variables.png\" alt=\"environment variables\" width=\"1540\" height=\"950\"></a>\n<p>Even better, environment variables on Vercel are searchable and configurable based on the different environments (<code>production</code>, <code>preview</code>, <code>development</code>)</p>\n<h2>📊 comparison</h2>\n<p>Now that the conversion is done, I'm running deploys on both hosts for the time being until I make up my mind on which I prefer. The build times seems to be much faster on Vercel, where they average about three minutes compared to an average of five minutes on Netlify.</p>\n<p>Both platforms integrate very well with <a href=\"https://github.com\" rel=\"noopener noreferrer\" target=\"_blank\">GitHub</a>, and show comments on pull requests. Although for some weird reason Netlify is linking to a different page on my site instead of the home page.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/pr-comments.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/pr-comments.png\" alt=\"pull request comments\" width=\"1854\" height=\"886\"></a>\n<p>Both hosts also provide CLIs with a <code>dev</code> command that's used for starting a development environment. They both pull in environment variables defined in the UI, so you don't need local <code>.env</code> files, and they both have access to local serverless functions and redirects.</p>\n<p>One thing that Vercel offers for free that Netlify doesn't is <a href=\"https://vercel.com/bradgarropy/bradgarropy/analytics\" rel=\"noopener noreferrer\" target=\"_blank\">web vitals monitoring</a>. It keeps track of things like first contentful paint, largest contentful paint, cumulative layout shift, and first input delay, and graphs them over time.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/analytics.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/analytics.png\" alt=\"analytics\" width=\"2054\" height=\"1624\"></a>\n<p>At this point in time, Vercel seems to be the clear winner. It's got feature parity, better build performance, web vitals monitoring, and easier configuration. Plus, if I <em>ever</em> decide to migrate this site to <a href=\"https://nextjs.org\" rel=\"noopener noreferrer\" target=\"_blank\">Next.js</a>, it pairs perfectly with <a href=\"https://vercel.com\" rel=\"noopener noreferrer\" target=\"_blank\">Vercel</a>.</p>\n<p>Where do you host your websites? Let me know on <a href=\"https://twitter.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">Twitter</a>!</p>",
            "url": "https://bradgarropy.com/blog/netlify-to-vercel",
            "title": "▲ netlify to vercel",
            "date_modified": "2021-12-13T00:00:00.000Z",
            "date_published": "2021-12-13T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "new-macbook-setup",
            "content_html": "<p>I recently got a new <a href=\"https://www.apple.com/macbook-pro\" rel=\"noopener noreferrer\" target=\"_blank\">M1 MacBook Pro</a>, and I wanted to document exactly how I set it up. Not only do I want to share this with you, but I also want to use it as a reference for myself in the future.</p>\n<h2>🔺 install updates</h2>\n<ul>\n<li>Check for system updates</li>\n<li>Check for app store updates</li>\n</ul>\n<h2>🗑️ uninstall applications</h2>\n<ul>\n<li>GarageBand</li>\n<li>iMovie</li>\n<li>Keynote</li>\n<li>Numbers</li>\n<li>Pages</li>\n</ul>\n<h2>🎛️ adjust settings</h2>\n<h3>icloud</h3>\n<ul>\n<li>Login to iCloud</li>\n</ul>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/icloud.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/icloud.png\" alt=\"iCloud\" width=\"827\" height=\"1204\"></a>\n<h3>siri &#x26; spotlight</h3>\n<ul>\n<li>Enable <em>Listen for \"Hey Siri\"</em></li>\n</ul>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/siri-and-spotlight.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/siri-and-spotlight.png\" alt=\"Siri &#x26; Spotlight\" width=\"827\" height=\"1202\"></a>\n<h3>desktop &#x26; dock</h3>\n<ul>\n<li>\n<p>Enable <em>Automatically hide and show the Dock</em></p>\n</li>\n<li>\n<p>Setup <em>Mission Control</em> hot corners</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><em>Mission Control</em></td><td><em>Mission Control</em></td></tr><tr><td><em>Desktop</em></td><td><em>Desktop</em></td></tr></tbody></table>\n</li>\n</ul>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/desktop-and-dock.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/desktop-and-dock.png\" alt=\"Desktop &#x26; Dock\" width=\"827\" height=\"1359\"></a>\n<h3>wallpaper</h3>\n<ul>\n<li>Select <em>Dynamic</em> wallpaper</li>\n</ul>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/wallpaper.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/wallpaper.png\" alt=\"Wallpaper\" width=\"827\" height=\"985\"></a>\n<h3>touch id &#x26; password</h3>\n<ul>\n<li>Enable <em>Touch ID</em></li>\n<li>Allow unlocking with Apple Watch</li>\n</ul>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/touch-id-and-password.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/touch-id-and-password.png\" alt=\"Touch ID &#x26; Password\" width=\"827\" height=\"783\"></a>\n<h3>internet accounts</h3>\n<ul>\n<li>Add <code>bradgarropy@gmail.com</code> account\n<ul>\n<li>Select <em>Mail</em> and <em>Calendar</em></li>\n</ul>\n</li>\n</ul>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/internet-accounts.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/internet-accounts.png\" alt=\"Internet Accounts\" width=\"827\" height=\"582\"></a>\n<h3>keyboard</h3>\n<ul>\n<li>Keyboard Shortcuts > Modifier\n<ul>\n<li>Swap the <em>Control</em> and <em>Command</em> keys on external keyboard</li>\n</ul>\n</li>\n</ul>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/keyboard.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/keyboard.png\" alt=\"Keyboard\" width=\"827\" height=\"1029\"></a>\n<h3>mouse</h3>\n<ul>\n<li>Increase <em>Tracking speed</em> to <em>Fast</em></li>\n<li>Uncheck <em>Natural scrolling</em></li>\n<li>Increase <em>Scrolling speed</em></li>\n</ul>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/mouse.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/mouse.png\" alt=\"Mouse\" width=\"827\" height=\"582\"></a>\n<h3>applications</h3>\n<ul>\n<li>Photos > View > Show\n<ul>\n<li>Uncheck <em>Shared with You</em></li>\n</ul>\n</li>\n<li>Photos > View\n<ul>\n<li>Check <em>Show Hidden Photo Album</em></li>\n</ul>\n</li>\n<li>Messages > Settings > iMessage\n<ul>\n<li>Check <em>Enable Messages in iCloud</em></li>\n</ul>\n</li>\n<li>Safari > Settings > Advanced\n<ul>\n<li>Check <em>Show Develop menu in menu bar</em></li>\n</ul>\n</li>\n<li>Podcasts > Settings > General\n<ul>\n<li>Uncheck <em>Download When Saving</em></li>\n<li>Select <em>Off</em> for <em>Automatically Download</em></li>\n</ul>\n</li>\n<li>Podcasts > Settings > Playback\n<ul>\n<li>Select <em>Stop when an episode ends</em></li>\n</ul>\n</li>\n<li>Finder > Settings > Tags\n<ul>\n<li>Delete all tags</li>\n</ul>\n</li>\n<li>Finder > Settings > Sidebar\n<ul>\n<li>Select <em>Hard Disks</em></li>\n</ul>\n</li>\n</ul>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/finder.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/finder.png\" alt=\"Finder\" width=\"489\" height=\"879\"></a>\n<h2>📥 install applications</h2>\n<ul>\n<li><a href=\"https://www.google.com/chrome/dr/download\" rel=\"noopener noreferrer\" target=\"_blank\">Google Chrome</a>\n<ul>\n<li>Sign in</li>\n<li>Set as default browser</li>\n</ul>\n</li>\n<li><a href=\"https://discord.com/download\" rel=\"noopener noreferrer\" target=\"_blank\">Discord</a></li>\n<li><a href=\"https://www.elgato.com/en/downloads\" rel=\"noopener noreferrer\" target=\"_blank\">Elgato Camera Hub</a></li>\n<li><a href=\"https://www.elgato.com/en/downloads\" rel=\"noopener noreferrer\" target=\"_blank\">Elgato Control Center</a></li>\n<li><a href=\"https://www.elgato.com/en/downloads\" rel=\"noopener noreferrer\" target=\"_blank\">Elgato Stream Deck</a></li>\n<li><a href=\"https://www.elgato.com/en/downloads\" rel=\"noopener noreferrer\" target=\"_blank\">Elgato Wave Link</a></li>\n<li><a href=\"https://obsproject.com/download\" rel=\"noopener noreferrer\" target=\"_blank\">OBS</a></li>\n<li><a href=\"https://code.visualstudio.com/download\" rel=\"noopener noreferrer\" target=\"_blank\">vscode</a>\n<ul>\n<li>Update</li>\n<li>Sign in with GitHub</li>\n<li><a href=\"https://code.visualstudio.com/docs/setup/mac#_launching-from-the-command-line\" rel=\"noopener noreferrer\" target=\"_blank\">Install shell command</a></li>\n</ul>\n</li>\n</ul>\n<h2>🖋️ fonts</h2>\n<ul>\n<li><a href=\"https://github.com/microsoft/cascadia-code\" rel=\"noopener noreferrer\" target=\"_blank\">Cascadia Code</a></li>\n</ul>\n<h2>📦 development packages</h2>\n<ul>\n<li><a href=\"https://brew.sh\" rel=\"noopener noreferrer\" target=\"_blank\">homebrew</a></li>\n<li><a href=\"https://git-scm.com\" rel=\"noopener noreferrer\" target=\"_blank\">git</a></li>\n<li><a href=\"https://github.com/nvm-sh/nvm\" rel=\"noopener noreferrer\" target=\"_blank\">nvm</a></li>\n<li><a href=\"https://cli.github.com\" rel=\"noopener noreferrer\" target=\"_blank\">GitHub CLI</a></li>\n<li><a href=\"https://www.netlify.com/products/cli\" rel=\"noopener noreferrer\" target=\"_blank\">Netlify CLI</a></li>\n<li><a href=\"https://ngrok.com\" rel=\"noopener noreferrer\" target=\"_blank\">ngrok</a></li>\n<li><a href=\"https://vercel.com/docs/cli\" rel=\"noopener noreferrer\" target=\"_blank\">Vercel CLI</a></li>\n</ul>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"zsh\" data-theme=\"Shades of Purple\"><code data-language=\"zsh\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#B362FF;font-style:italic\"># brew</span></span>\n<span data-line=\"\"><span style=\"color:#FAD000\">/bin/bash</span><span style=\"color:#FF628C\"> -c</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#E1EFFF\">$(</span><span style=\"color:#FAD000\">curl</span><span style=\"color:#FF628C\"> -fsSL</span><span style=\"color:#A5FF90\"> https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh</span><span style=\"color:#E1EFFF\">)</span><span style=\"color:#92FC79\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#FAD000\">brew</span><span style=\"color:#A5FF90\"> install</span><span style=\"color:#A5FF90\"> git</span></span>\n<span data-line=\"\"><span style=\"color:#FAD000\">brew</span><span style=\"color:#A5FF90\"> install</span><span style=\"color:#A5FF90\"> gh</span></span>\n<span data-line=\"\"><span style=\"color:#FAD000\">brew</span><span style=\"color:#A5FF90\"> install</span><span style=\"color:#A5FF90\"> ngrok/ngrok/ngrok</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B362FF;font-style:italic\"># npm</span></span>\n<span data-line=\"\"><span style=\"color:#FAD000\">curl</span><span style=\"color:#FF628C\"> -o-</span><span style=\"color:#A5FF90\"> https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh</span><span style=\"color:#FF9D00\"> |</span><span style=\"color:#FAD000\"> bash</span></span>\n<span data-line=\"\"><span style=\"color:#FAD000\">npm</span><span style=\"color:#A5FF90\"> install</span><span style=\"color:#FF628C\"> --global</span><span style=\"color:#A5FF90\"> netlify-cli</span></span>\n<span data-line=\"\"><span style=\"color:#FAD000\">npm</span><span style=\"color:#A5FF90\"> install</span><span style=\"color:#FF628C\"> --global</span><span style=\"color:#A5FF90\"> vercel</span></span></code></pre></figure>",
            "url": "https://bradgarropy.com/blog/new-macbook-setup",
            "title": "💻 new macbook setup",
            "date_modified": "2023-04-19T00:00:00.000Z",
            "date_published": "2023-04-19T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "new-years-resolutions",
            "content_html": "<p>Welcome to <strong>2019</strong> ya'll! Another year means another set of goals to focus on. While I don't advise setting specific goals for a year out, I do suggest picking some areas in life to improve upon over the course of the year. Here are mine.</p>\n<h2>💏 marriage</h2>\n<p>No matter how hectic life gets with our two kids, I want to ensure my wife knows how much I love and appreciate her. I'd like to focus on expressing that more clearly. So my goal is to make a comment that reminds her of how I feel daily.</p>\n<h2>🏋🏼 fitness</h2>\n<p>After having our second child, working out and proper nutrition took a backseat. But now that the kids have a nice schedule, it's time to get back on board. My goal is to workout five days a week in our home gym, and meal prep weekly.</p>\n<h2>👨🏼‍💻 career</h2>\n<p>As you've seen from some of my past posts, I've been interviewing with <a href=\"https://www.homeaway.com/\" rel=\"noopener noreferrer\" target=\"_blank\">HomeAway</a>. No matter what happens with them, I want to spend this year aligning my career with my interests in web development, both front and back end.</p>\n<h2>💻 coding</h2>\n<p>There's a lot I want to learn and build this year to grow my coding skills, so I'll break this down into three sections.</p>\n<h3>learning</h3>\n<p>I recently purchased <a href=\"https://advancedreact.com/\" rel=\"noopener noreferrer\" target=\"_blank\">Advanced React</a> by <a href=\"https://twitter.com/wesbos\" rel=\"noopener noreferrer\" target=\"_blank\">Wes Bos</a>. I started working my way through the course and plan to finish it this year. My goal is to become comfortable working with <a href=\"https://graphql.org/\" rel=\"noopener noreferrer\" target=\"_blank\">GraphQL</a> and <a href=\"https://www.styled-components.com/\" rel=\"noopener noreferrer\" target=\"_blank\">styled-components</a>. Additionally, I want to gain the skills required to make multi-user applications, with proper authentication.</p>\n<h3>freelancing</h3>\n<p>I'm currently working on a marketing and ecommerce website for <a href=\"https://ironjimmy.com/\" rel=\"noopener noreferrer\" target=\"_blank\">Iron Jimmy</a>, a barbell sleeve company. It's my first real paid freelancing job! My goal is to gain one more paid client by the end of of the year.</p>\n<h3>open source</h3>\n<p>I recently <a href=\"https://github.com/styled-components/styled-components-website/pull/410\" rel=\"noopener noreferrer\" target=\"_blank\">contributed</a> to open source and it felt great knowing that my changes, however small, have an impact on project such as <a href=\"https://www.styled-components.com/\" rel=\"noopener noreferrer\" target=\"_blank\">styled-components</a>. I want to keep that trend going with at least three other contributions throughout the year.</p>\n<h2>🌱 marketing</h2>\n<p>My primary social media platform is <a href=\"https://twitter.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">Twitter</a>, where I tweet mostly about coding. I want to grow my social media presence on <a href=\"https://www.instagram.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">Instagram</a> and <a href=\"https://www.facebook.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">Facebook</a> to help market myself as a web developer and gain new clients. I haven't yet set any concrete goals in this area, but it's something I want to get better at.</p>\n<h2>📝 blogging</h2>\n<p>This blog is my home on the web, it's my best opportunity to show others who I am and what I can do. I want to continue writing posts, with a goal of one per month. I also want to improve the website by expanding it to more than just a blog. My goal is to close all of these <a href=\"https://github.com/bradgarropy/bradgarropy.com/issues\" rel=\"noopener noreferrer\" target=\"_blank\">issues</a> during the year.</p>",
            "url": "https://bradgarropy.com/blog/new-years-resolutions",
            "title": "🍾 new year's resolutions",
            "date_modified": "2019-01-01T00:00:00.000Z",
            "date_published": "2019-01-01T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "next-over-remix",
            "content_html": "<p>According to my <a href=\"https://bradgarropy.com/blog/goals-for-2023#bradgarropy.com\" rel=\"noopener noreferrer\" target=\"_blank\">2023 goals</a>, my first task of the year was to convert my website to <a href=\"https://remix.run\" rel=\"noopener noreferrer\" target=\"_blank\">Remix</a> and <a href=\"https://tailwindcss.com\" rel=\"noopener noreferrer\" target=\"_blank\">Tailwind</a>. I completed the <a href=\"https://bradgarropy.com/blog/css-modules-to-tailwind\" rel=\"noopener noreferrer\" target=\"_blank\">Tailwind conversion</a> back in February, and the Remix conversion took me just over a month. Here's how it went.</p>\n<h2>🍰 conversion process</h2>\n<p>Converting from <a href=\"https://nextjs.org\" rel=\"noopener noreferrer\" target=\"_blank\">Next.js</a> to <a href=\"https://remix.run\" rel=\"noopener noreferrer\" target=\"_blank\">Remix</a> was pretty straightforward. I started by swapping out the <code>next.config.js</code> for a <code>remix.config.js</code>. Then I had to map the <code>_app.tsx</code> and <code>_document.tsx</code> files to the Remix equivalent <code>root.tsx</code> file.</p>\n<p>Next I moved all of my <code>pages</code> into the <code>routes</code> folder and modified the structure slightly. All of the <code>getStaticProps</code> calls had to be converted to Remix <code>loader</code> functions, and I had to use the Remix <code>meta</code> function for SEO information. Then I swapped out the Next <code>&#x3C;Link></code> component for the Remix one.</p>\n<p>Ultimately the <a href=\"https://github.com/bradgarropy/bradgarropy.com/pull/353\" rel=\"noopener noreferrer\" target=\"_blank\">pull request</a> was only a four line difference if you don't count the <code>package-lock.json</code> file. Both frameworks were structured in a similar manner, but something about Remix felt simpler.</p>\n<h2>😖 issues</h2>\n<p>The project wasn't without issues though. The first problem I noticed was that sometimes page transitions weren't loading data correctly. That's because the <code>loader</code> functions must be exported inline, rather than at the bottom of the file.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"typescript\" data-theme=\"Shades of Purple\"><code data-language=\"typescript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FF9D00\">export</span><span style=\"color:#FF9D00\"> const</span><span style=\"color:#FAD000\"> loader</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#FFEE80\"> ()</span><span style=\"color:#FAD000\"> =></span><span style=\"color:#E1EFFF\"> {}</span></span></code></pre></figure>\n<p>The next issue I hit was a very weird one. Once deployed to <a href=\"https://vercel.com\" rel=\"noopener noreferrer\" target=\"_blank\">Vercel</a>, I was no longer able to read my local <code>markdown</code> files. After some <a href=\"https://www.themosaad.com/blog/loading-static-file-remix-vercel\" rel=\"noopener noreferrer\" target=\"_blank\">deep searching</a>, I found that referencing <code>process.cwd()</code> does not work the same in Remix as it does in Next.js when hosted on Vercel. The solution was to use <code>__dirname</code> to construct paths, so that they can be statically analyzed by the hosting platform.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"typescript\" data-theme=\"Shades of Purple\"><code data-language=\"typescript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FF9D00\">const</span><span style=\"color:#9EFFFF\"> postsPath </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#3AD900\"> `</span><span style=\"color:#FFEE80\">${</span><span style=\"color:#9EFFFF\">__dirname</span><span style=\"color:#FFEE80\">}</span><span style=\"color:#3AD900\">/../content/posts`</span></span></code></pre></figure>\n<p>Another similar problem I ran into was with <a href=\"https://github.com/andrewbranch/gatsby-remark-vscode\" rel=\"noopener noreferrer\" target=\"_blank\">gatsby-remark-vscode</a> causing build failures. Internally it looks for some other files in nearby directories, which were not in their expected locations because I had told Remix to bundle all server dependencies. Unfortunately I never found a solution to this problem.</p>\n<p>But the last issue I ran into was enough to put a stop to the project. Because Remix is an SSR framework, I was sending API requests to fetch my latest YouTube videos on every page load, which depleted my quota and caused me to get rate limited for the rest of the day.</p>\n<p>I investigated using cache headers on the request sent from the server and from the browser, but nothing seemed to have any effect. Instead of go further down the caching rabbit hole with something like <a href=\"https://redis.com\" rel=\"noopener noreferrer\" target=\"_blank\">Redis</a>, or set up a cron job to pull my latest videos, I decided that it was too much infrastructure for a static site.</p>\n<h2>🏎️ performance</h2>\n<p>But regardless, I wanted to see how a fully server rended application performed when compared to my existing Next.js site.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th></th><th align=\"right\">Next.js</th><th align=\"left\">Remix</th></tr></thead><tbody><tr><td>Requests</td><td align=\"right\"><code>52</code></td><td align=\"left\"><code>27</code></td></tr><tr><td>Transferred</td><td align=\"right\"><code>992kb</code></td><td align=\"left\"><code>990kb</code></td></tr><tr><td>Resources</td><td align=\"right\"><code>2mb</code></td><td align=\"left\"><code>2mb</code></td></tr><tr><td>Finish</td><td align=\"right\"><code>1.2s</code></td><td align=\"left\"><code>1.5s</code></td></tr><tr><td>DOMContentLoaded</td><td align=\"right\"><code>500ms</code></td><td align=\"left\"><code>750ms</code></td></tr><tr><td>Load</td><td align=\"right\"><code>850ms</code></td><td align=\"left\"><code>1.2s</code></td></tr></tbody></table>\n<p>Despite the fact that Next.js had many more network requests to fetch neighboring pages, it was faster in nearly every way! The loading experience was identical in both applications, with no noticable differences in layout shift or perceived loading time.</p>\n<h2>🎬 conclusion</h2>\n<p>Given the issues I ran into, it showed me that <a href=\"https://remix.run\" rel=\"noopener noreferrer\" target=\"_blank\">Remix</a> isn't the right choice for a static blog. While the simplicity and developer experience is amazing, Remix really shines for authenticated web applications. That's why we're using it at <a href=\"https://www.atlassian.com\" rel=\"noopener noreferrer\" target=\"_blank\">Atlassian</a> for our latest internal tools.</p>\n<p>With that being said, I'm going to stick with <a href=\"https://nextjs.org\" rel=\"noopener noreferrer\" target=\"_blank\">Next.js</a> for now. I'm still hosting on <a href=\"https://vercel.com\" rel=\"noopener noreferrer\" target=\"_blank\">Vercel</a>, and they go together like peanut butter and jelly. However, I'm still debating on how far I push into the Next.js ecosystem. I recently made an effort to remove the <code>&#x3C;Image></code> component from my codebase, as it locked me into using Next.js. But their new <code>@next/font</code> module is very enticing...</p>\n<p>At the end of the day, I should stop rewriting my website and start finishing all of the blog ideas I have!</p>",
            "url": "https://bradgarropy.com/blog/next-over-remix",
            "title": "🔼 next over remix",
            "date_modified": "2023-04-03T00:00:00.000Z",
            "date_published": "2023-04-03T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "nextjs-dark-mode",
            "content_html": "<p>The dark mode on my website was always pretty half baked, so while I was <a href=\"https://bradgarropy.com/blog/css-modules-to-tailwind\" rel=\"noopener noreferrer\" target=\"_blank\">converting to Tailwind</a>, I spent some time improving it. There were a few major requirements I wanted to implement.</p>\n<ul>\n<li>The color theme can be modified by the user.</li>\n<li>The color theme is persisted across reloads.</li>\n<li>The color theme is persisted across page transitions.</li>\n<li>There is no light mode flicker.</li>\n</ul>\n<p>The rest of the post will go into more detail explaining how I accomplished this. You can also reference the <a href=\"https://github.com/bradgarropy/bradgarropy.com/pull/349\" rel=\"noopener noreferrer\" target=\"_blank\">pull request</a> for the full implementation.</p>\n<h2>♟️ strategy</h2>\n<p>My overall strategy involved a few different aspects. First, I maintained the <code>theme</code> state in a <a href=\"https://reactjs.org/docs/context.html\" rel=\"noopener noreferrer\" target=\"_blank\">React context</a>. Next, I persisted the theme across reloads using <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage\" rel=\"noopener noreferrer\" target=\"_blank\">local storage</a>. Finally, I applied the theme by adding a <code>dark</code> class to the <code>html</code> element, and <a href=\"https://tailwindcss.com/\" rel=\"noopener noreferrer\" target=\"_blank\">Tailwind</a> handled the rest of the styling.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/dark-mode-diagram.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/dark-mode-diagram.png\" alt=\"dark mode diagram\" width=\"1359\" height=\"702\"></a>\n<p>Anytime the <code>theme</code> changes, both <code>localStorage</code> and the <code>html</code> class are updated to reflect the current value. When the application loads, it checks <code>localStorage</code> for an existing user preference before defaulting to light mode. And last but not least, a prerender script is run to initialize the <code>html</code> class to match the value in <code>localStorage</code> in order to prevent light mode flicker.</p>\n<h2>🤲🏼 theme provider</h2>\n<p>I started by creating the <code>ThemeContext</code> and <code>ThemeProvider</code> so that the theme could be used freely throughout the application without prop drilling. At it's core, it just holds the <code>theme</code> value in state.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"tsx\" data-theme=\"Shades of Purple\"><code data-language=\"tsx\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FF9D00\">const</span><span style=\"color:#FAD000\"> ThemeProvider</span><span style=\"color:#FF9D00\">:</span><span style=\"color:#9EFFFF\"> FC</span><span style=\"color:#E1EFFF\">&#x3C;</span><span style=\"color:#9EFFFF\">ThemeProviderProps</span><span style=\"color:#E1EFFF\">></span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#FFEE80\"> (</span><span style=\"color:#E1EFFF\">{</span><span style=\"color:#9EFFFF\">children</span><span style=\"color:#E1EFFF\">}</span><span style=\"color:#FFEE80\">)</span><span style=\"color:#FAD000\"> =></span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    const</span><span style=\"color:#E1EFFF\"> [</span><span style=\"color:#9EFFFF\">theme</span><span style=\"color:#E1EFFF\">,</span><span style=\"color:#9EFFFF\"> setTheme</span><span style=\"color:#E1EFFF\">]</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#FAD000\"> useState</span><span style=\"color:#E1EFFF\">&#x3C;</span><span style=\"color:#9EFFFF\">Theme</span><span style=\"color:#E1EFFF\">>()</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    const</span><span style=\"color:#9EFFFF\"> context</span><span style=\"color:#FF9D00\">:</span><span style=\"color:#9EFFFF\"> ThemeContextType </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">        theme</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">        setTheme</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    return</span><span style=\"color:#E1EFFF\"> (</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">        &#x3C;</span><span style=\"color:#9EFFFF\">ThemeContext.Provider </span><span style=\"color:#FAD000;font-style:italic\">value</span><span style=\"color:#FF9D00\">=</span><span style=\"color:#E1EFFF\">{</span><span style=\"color:#9EFFFF\">context</span><span style=\"color:#E1EFFF\">}></span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">            {</span><span style=\"color:#9EFFFF\">children</span><span style=\"color:#E1EFFF\">}</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">        &#x3C;/</span><span style=\"color:#9EFFFF\">ThemeContext.Provider</span><span style=\"color:#E1EFFF\">></span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    )</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span></span></code></pre></figure>\n<p>In order for this context to be shared with the rest of the application, I created a custom <code>_app.tsx</code> to wrap everything in the <code>ThemeProvider</code>.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"tsx\" data-theme=\"Shades of Purple\"><code data-language=\"tsx\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FF9D00\">import</span><span style=\"color:#E1EFFF\"> {</span><span style=\"color:#9EFFFF\">ThemeProvider</span><span style=\"color:#E1EFFF\">}</span><span style=\"color:#FF9D00;font-style:italic\"> from</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">context</span><span style=\"color:#92FC79\">\"</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">const</span><span style=\"color:#FAD000\"> App</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#FFEE80\"> (</span><span style=\"color:#E1EFFF\">{</span><span style=\"color:#9EFFFF\">Component</span><span style=\"color:#E1EFFF\">,</span><span style=\"color:#9EFFFF\"> pageProps</span><span style=\"color:#E1EFFF\">}</span><span style=\"color:#FF9D00\">:</span><span style=\"color:#9EFFFF\"> AppProps</span><span style=\"color:#FFEE80\">)</span><span style=\"color:#FAD000\"> =></span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    return</span><span style=\"color:#E1EFFF\"> (</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">        &#x3C;</span><span style=\"color:#9EFFFF\">ThemeProvider</span><span style=\"color:#E1EFFF\">></span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">            &#x3C;</span><span style=\"color:#9EFFFF\">Component </span><span style=\"color:#E1EFFF\">{</span><span style=\"color:#FF9D00\">...</span><span style=\"color:#9EFFFF\">pageProps</span><span style=\"color:#E1EFFF\">}</span><span style=\"color:#E1EFFF\"> /></span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">        &#x3C;/</span><span style=\"color:#9EFFFF\">ThemeProvider</span><span style=\"color:#E1EFFF\">></span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    )</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span></span></code></pre></figure>\n<p>Once the provider was in place, I was able to access the <code>theme</code> from anywhere by using the <code>useTheme</code> hook shown below.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"tsx\" data-theme=\"Shades of Purple\"><code data-language=\"tsx\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FF9D00\">const</span><span style=\"color:#FAD000\"> useTheme</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#FFEE80\"> ()</span><span style=\"color:#FF9D00\">:</span><span style=\"color:#9EFFFF\"> ThemeContextType </span><span style=\"color:#FAD000\">=></span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    const</span><span style=\"color:#9EFFFF\"> themeCtx </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#FAD000\"> useContext</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#9EFFFF\">ThemeContext</span><span style=\"color:#E1EFFF\">)</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    return</span><span style=\"color:#9EFFFF\"> themeCtx</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span></span></code></pre></figure>\n<p>Next I started making the theme respond to user interactions.</p>\n<h2>🌗 theme toggle</h2>\n<p>In the header of my site I have a theme toggle. This is where I used <code>useTheme</code> to respond to user interactions. Now the newly selected theme would be populated in the context.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"tsx\" data-theme=\"Shades of Purple\"><code data-language=\"tsx\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FF9D00\">import</span><span style=\"color:#E1EFFF\"> {</span><span style=\"color:#9EFFFF\">useTheme</span><span style=\"color:#E1EFFF\">}</span><span style=\"color:#FF9D00;font-style:italic\"> from</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">hooks</span><span style=\"color:#92FC79\">\"</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">const</span><span style=\"color:#FAD000\"> ColorTheme</span><span style=\"color:#FF9D00\">:</span><span style=\"color:#9EFFFF\"> FC </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#FFEE80\"> ()</span><span style=\"color:#FAD000\"> =></span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    const</span><span style=\"color:#E1EFFF\"> {</span><span style=\"color:#9EFFFF\">theme</span><span style=\"color:#E1EFFF\">,</span><span style=\"color:#9EFFFF\"> setTheme</span><span style=\"color:#E1EFFF\">}</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#FAD000\"> useTheme</span><span style=\"color:#E1EFFF\">()</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    const</span><span style=\"color:#FAD000\"> onClick</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#FFEE80\"> ()</span><span style=\"color:#FAD000\"> =></span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">        if</span><span style=\"color:#E1EFFF\"> (</span><span style=\"color:#9EFFFF\">theme </span><span style=\"color:#FF9D00\">===</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">light</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">)</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FAD000\">            setTheme</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">dark</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">)</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">        }</span><span style=\"color:#FF9D00\"> else</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FAD000\">            setTheme</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">light</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">)</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    return</span><span style=\"color:#E1EFFF\"> (</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">        &#x3C;</span><span style=\"color:#9EFFFF\">button </span><span style=\"color:#FAD000;font-style:italic\">onClick</span><span style=\"color:#FF9D00\">=</span><span style=\"color:#E1EFFF\">{</span><span style=\"color:#9EFFFF\">onClick</span><span style=\"color:#E1EFFF\">}></span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">            {</span><span style=\"color:#9EFFFF\">theme </span><span style=\"color:#FF9D00\">===</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">light</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#FF9D00\"> ?</span><span style=\"color:#E1EFFF\"> &#x3C;</span><span style=\"color:#9EFFFF\">Moon </span><span style=\"color:#E1EFFF\">/></span><span style=\"color:#FF9D00\"> :</span><span style=\"color:#FF628C\"> null</span><span style=\"color:#E1EFFF\">}</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">            {</span><span style=\"color:#9EFFFF\">theme </span><span style=\"color:#FF9D00\">===</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">dark</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#FF9D00\"> ?</span><span style=\"color:#E1EFFF\"> &#x3C;</span><span style=\"color:#9EFFFF\">Sun </span><span style=\"color:#E1EFFF\">/></span><span style=\"color:#FF9D00\"> :</span><span style=\"color:#FF628C\"> null</span><span style=\"color:#E1EFFF\">}</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">        &#x3C;/</span><span style=\"color:#9EFFFF\">button</span><span style=\"color:#E1EFFF\">></span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    )</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span></span></code></pre></figure>\n<p>Anytime the theme changed, I updated both the <code>localStorage</code> value and the <code>html</code> class to match. This process was managed with a <code>useEffect</code> that ran anytime <code>theme</code> changed.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"tsx\" data-theme=\"Shades of Purple\"><code data-language=\"tsx\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FAD000\">useEffect</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#FFEE80\">()</span><span style=\"color:#FAD000\"> =></span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    if</span><span style=\"color:#E1EFFF\"> (</span><span style=\"color:#9EFFFF\">theme </span><span style=\"color:#FF9D00\">===</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">dark</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">)</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">        window</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FFEE80\">localStorage</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">setItem</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">theme</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">,</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">dark</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">)</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">        document</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FFEE80\">documentElement</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FFEE80\">classList</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">add</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">dark</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">)</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    if</span><span style=\"color:#E1EFFF\"> (</span><span style=\"color:#9EFFFF\">theme </span><span style=\"color:#FF9D00\">===</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">light</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">)</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">        window</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FFEE80\">localStorage</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">setItem</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">theme</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">,</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">light</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">)</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">        document</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FFEE80\">documentElement</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FFEE80\">classList</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">remove</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">dark</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">)</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">},</span><span style=\"color:#E1EFFF\"> [</span><span style=\"color:#9EFFFF\">theme</span><span style=\"color:#E1EFFF\">])</span></span></code></pre></figure>\n<h2>⏳ theme loading</h2>\n<p>Now I had to handle initializing the theme. Because the user's latest choice was in <code>localStorage</code>, I created a <code>useEffect</code> that runs when the provider is mounted that pulled the persisted value and initialized the context. However, if no theme was stored, I defaulted to light mode.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"tsx\" data-theme=\"Shades of Purple\"><code data-language=\"tsx\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FAD000\">useEffect</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#FFEE80\">()</span><span style=\"color:#FAD000\"> =></span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    const</span><span style=\"color:#9EFFFF\"> localTheme </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#9EFFFF\"> window</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FFEE80\">localStorage</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">getItem</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">theme</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">)</span></span>\n<span data-line=\"\"><span style=\"color:#FAD000\">    setTheme</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#9EFFFF\">localTheme </span><span style=\"color:#FF9D00\">??</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">light</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">)</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">},</span><span style=\"color:#E1EFFF\"> [])</span></span></code></pre></figure>\n<h2>📸 preventing flicker</h2>\n<p>So far the implementation was pretty straight forward, but there was still one glaring problem. If the user preferred dark mode, there was a flash of light mode before React kicked in and initialized the context to match <code>localStorage</code>. In order to prevent this flicker, I needed a script to run <em>before</em> React rendered.</p>\n<p><a href=\"https://nextjs.org/\" rel=\"noopener noreferrer\" target=\"_blank\">Next.js</a> had me covered here with their <code>&#x3C;Script></code> component. This allowed me to inject some custom JavaScript that executed in the <code>&#x3C;Head></code> prior to the application rendering.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"tsx\" data-theme=\"Shades of Purple\"><code data-language=\"tsx\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FF9D00\">import</span><span style=\"color:#9EFFFF\"> Document</span><span style=\"color:#E1EFFF\">,</span><span style=\"color:#E1EFFF\"> {</span><span style=\"color:#9EFFFF\">Head</span><span style=\"color:#E1EFFF\">,</span><span style=\"color:#9EFFFF\"> Html</span><span style=\"color:#E1EFFF\">,</span><span style=\"color:#9EFFFF\"> Main</span><span style=\"color:#E1EFFF\">,</span><span style=\"color:#9EFFFF\"> NextScript</span><span style=\"color:#E1EFFF\">}</span><span style=\"color:#FF9D00;font-style:italic\"> from</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">next/document</span><span style=\"color:#92FC79\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">import</span><span style=\"color:#9EFFFF\"> Script </span><span style=\"color:#FF9D00;font-style:italic\">from</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">next/script</span><span style=\"color:#92FC79\">\"</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">const</span><span style=\"color:#FAD000\"> Document</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#FFEE80\"> ()</span><span style=\"color:#FAD000\"> =></span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    return</span><span style=\"color:#E1EFFF\"> (</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">        &#x3C;</span><span style=\"color:#9EFFFF\">Html</span><span style=\"color:#E1EFFF\">></span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">            &#x3C;</span><span style=\"color:#9EFFFF\">Head </span><span style=\"color:#E1EFFF\">/></span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">            &#x3C;</span><span style=\"color:#9EFFFF\">body</span><span style=\"color:#E1EFFF\">></span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">                &#x3C;</span><span style=\"color:#9EFFFF\">Main </span><span style=\"color:#E1EFFF\">/></span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">                &#x3C;</span><span style=\"color:#9EFFFF\">NextScript </span><span style=\"color:#E1EFFF\">/></span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">                &#x3C;</span><span style=\"color:#9EFFFF\">Script </span><span style=\"color:#FAD000;font-style:italic\">src</span><span style=\"color:#FF9D00\">=</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">/theme.js</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#FAD000;font-style:italic\"> strategy</span><span style=\"color:#FF9D00\">=</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">beforeInteractive</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\"> /></span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">            &#x3C;/</span><span style=\"color:#9EFFFF\">body</span><span style=\"color:#E1EFFF\">></span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">        &#x3C;/</span><span style=\"color:#9EFFFF\">Html</span><span style=\"color:#E1EFFF\">></span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    )</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span></span></code></pre></figure>\n<p>The prerender script was very short, all it had to do was make the initial <code>html</code> class match whatever <code>localStorage</code> had, so no flicker would occur once React rendered.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"javascript\" data-theme=\"Shades of Purple\"><code data-language=\"javascript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FF9D00\">const</span><span style=\"color:#9EFFFF\"> localTheme </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#9EFFFF\"> window</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FFEE80\">localStorage</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">getItem</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">theme</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">)</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">if</span><span style=\"color:#E1EFFF\"> (</span><span style=\"color:#9EFFFF\">localTheme</span><span style=\"color:#FF9D00\"> ===</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">light</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">)</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">    document</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FFEE80\">documentElement</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FFEE80\">classList</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">remove</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">dark</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">)</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">if</span><span style=\"color:#E1EFFF\"> (</span><span style=\"color:#9EFFFF\">localTheme</span><span style=\"color:#FF9D00\"> ===</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">dark</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">)</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">    document</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FFEE80\">documentElement</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FFEE80\">classList</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">add</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">dark</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">)</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span></span></code></pre></figure>\n<h2>🔫 perfect dark mode</h2>\n<p>Although this implementation was a bit confusing, the result was exactly what I was looking for. I took a lot of inspiration from <a href=\"https://twitter.com/JoshWComeau\" rel=\"noopener noreferrer\" target=\"_blank\">Josh Comeau's</a> post titled <a href=\"https://joshwcomeau.com/react/dark-mode\" rel=\"noopener noreferrer\" target=\"_blank\">The Quest for the Perfect Dark Mode</a>, and made some changes to adjust the solution to fit <a href=\"https://nextjs.org/\" rel=\"noopener noreferrer\" target=\"_blank\">Next.js</a>.</p>\n<p>This isn't a problem I'd like to solve twice, so I'm considering publishing this solution on <a href=\"https://www.npmjs.com/\" rel=\"noopener noreferrer\" target=\"_blank\">npm</a> for reuse in my other projects. Let me know if that's something you'd be interested in!</p>",
            "url": "https://bradgarropy.com/blog/nextjs-dark-mode",
            "title": "🌑 next.js dark mode",
            "date_modified": "2023-02-27T00:00:00.000Z",
            "date_published": "2023-02-27T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "npm-publish-with-github-actions",
            "content_html": "<p>I recently published my first package to <a href=\"https://www.npmjs.com\" rel=\"noopener noreferrer\" target=\"_blank\">npm</a>, <a href=\"https://www.npmjs.com/package/eslint-config-bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">eslint-config-bradgarropy</a>. But now that it's had a few version bumps, eight to be exact, I wanted to automate the release process. Turns out I could do this without even leaving <a href=\"https://github.com\" rel=\"noopener noreferrer\" target=\"_blank\">GitHub</a> with the <em>relatively</em> new <a href=\"https://github.com/features/actions\" rel=\"noopener noreferrer\" target=\"_blank\">GitHub Actions</a> feature.</p>\n<p>I set up the workflow by creating a <code>.github/main.workflow</code> file in the project. From there I had the choice to edit the <code>main.workflow</code> file manually, or use the visual editor on GitHub. I went with the visual editor.</p>\n<p>I clicked the <strong>create a new workflow</strong> button, gave it a name, and configured it to run when a release is created.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/configure-workflow.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/configure-workflow.png\" alt=\"configure-workflow\" width=\"353\" height=\"442\"></a>\n<p>Next it was time to hook up an action. I dragged the blue arrow into the next box and found that GitHub already had an <a href=\"https://github.com/marketplace/actions/github-action-for-npm\" rel=\"noopener noreferrer\" target=\"_blank\">npm action</a>. I edited the <strong>label</strong>, changed the <strong>args</strong> field to <code>publish</code>, and added my <code>NPM_AUTH_TOKEN</code>.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/configure-action.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/configure-action.png\" alt=\"configure-action\" width=\"337\" height=\"566\"></a>\n<p>I clicked <strong>Done</strong> and the final workflow looks like this.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/main-workflow.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/main-workflow.png\" alt=\"main-workflow\" width=\"275\" height=\"358\"></a>\n<p>I checked the <code>main.workflow</code> file and found that the visual editor had generated the following code.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"toml\" data-theme=\"Shades of Purple\"><code data-language=\"toml\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#EC3A37F5\">workflow \"🚀 release\" {</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    on</span><span style=\"color:#E1EFFF\"> =</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">release</span><span style=\"color:#92FC79\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    resolves</span><span style=\"color:#E1EFFF\"> =</span><span style=\"color:#E1EFFF\"> [</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">📦 npm publish</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">]</span></span>\n<span data-line=\"\"><span style=\"color:#EC3A37F5\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#EC3A37F5\">action \"📦 npm publish\" {</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    uses</span><span style=\"color:#E1EFFF\"> =</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">actions/npm@master</span><span style=\"color:#92FC79\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    secrets</span><span style=\"color:#E1EFFF\"> =</span><span style=\"color:#E1EFFF\"> [</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">NPM_AUTH_TOKEN</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">]</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    args</span><span style=\"color:#E1EFFF\"> =</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">publish</span><span style=\"color:#92FC79\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#EC3A37F5\">}</span></span></code></pre></figure>\n<p>Makes sense! Then I made some releases and headed over to the <strong>Actions</strong> tab of my repository and took a look. The tab showed each run of the <code>🚀 release</code> workflow, where you can drill down and see the logs from each <code>📦 npm publish</code> action!</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/actions.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/actions.png\" alt=\"actions\" width=\"686\" height=\"327\"></a>\n<p>This process coudn't have been easier, and now I'm looking for other automation opportunities for GitHub Actions. Head over to <a href=\"https://twitter.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">Twitter</a> and link me your favorite or custom actions!</p>",
            "url": "https://bradgarropy.com/blog/npm-publish-with-github-actions",
            "title": "📦 npm publish with github actions",
            "date_modified": "2019-04-27T00:00:00.000Z",
            "date_published": "2019-04-27T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "prisma-crud-operations",
            "content_html": "<p>Lately I've been working with <a href=\"https://postgresql.org\" rel=\"noopener noreferrer\" target=\"_blank\">PostgreSQL</a> databases, using <a href=\"https://prisma.io\" rel=\"noopener noreferrer\" target=\"_blank\">Prisma</a> as the ORM to make life easier. I always forget how to do basic CRUD operations, so here's a little reference post that hopefully helps you as much as it helps me!</p>\n<h2>🆕 create</h2>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"typescript\" data-theme=\"Shades of Purple\"><code data-language=\"typescript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FF9D00\">const</span><span style=\"color:#FAD000\"> createTodo</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#FF9D00;font-style:italic\"> async</span><span style=\"color:#FFEE80\"> (</span><span style=\"color:#9EFFFF\">userId</span><span style=\"color:#FF9D00\">:</span><span style=\"color:#80FFBB\"> string</span><span style=\"color:#E1EFFF\">,</span><span style=\"color:#9EFFFF\"> content</span><span style=\"color:#FF9D00\">:</span><span style=\"color:#80FFBB\"> string</span><span style=\"color:#FFEE80\">)</span><span style=\"color:#FAD000\"> =></span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    const</span><span style=\"color:#9EFFFF\"> todo </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#FF9D00\"> await</span><span style=\"color:#9EFFFF\"> db</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FFEE80\">todo</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">create</span><span style=\"color:#E1EFFF\">({</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">        data</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">            content</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">            userId</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">        },</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    })</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    return</span><span style=\"color:#9EFFFF\"> todo</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span></span></code></pre></figure>\n<h2>📚 read</h2>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"typescript\" data-theme=\"Shades of Purple\"><code data-language=\"typescript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FF9D00\">const</span><span style=\"color:#FAD000\"> getTodos</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#FF9D00;font-style:italic\"> async</span><span style=\"color:#FFEE80\"> (</span><span style=\"color:#9EFFFF\">userId</span><span style=\"color:#FF9D00\">:</span><span style=\"color:#80FFBB\"> string</span><span style=\"color:#FFEE80\">)</span><span style=\"color:#FAD000\"> =></span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    const</span><span style=\"color:#9EFFFF\"> todos </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#FF9D00\"> await</span><span style=\"color:#9EFFFF\"> db</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FFEE80\">todo</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">findMany</span><span style=\"color:#E1EFFF\">({</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">        where</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">            userId</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">                equals</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#9EFFFF\"> userId</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">            },</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">        },</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    })</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    return</span><span style=\"color:#9EFFFF\"> todos</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span></span></code></pre></figure>\n<h2>☝🏼 update</h2>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"typescript\" data-theme=\"Shades of Purple\"><code data-language=\"typescript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FF9D00\">const</span><span style=\"color:#FAD000\"> updateTodo</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#FF9D00;font-style:italic\"> async</span><span style=\"color:#FFEE80\"> (</span><span style=\"color:#9EFFFF\">id</span><span style=\"color:#FF9D00\">:</span><span style=\"color:#80FFBB\"> string</span><span style=\"color:#E1EFFF\">,</span><span style=\"color:#9EFFFF\"> data</span><span style=\"color:#FF9D00\">:</span><span style=\"color:#80FFBB\"> Partial</span><span style=\"color:#E1EFFF\">&#x3C;</span><span style=\"color:#80FFBB\">Todo</span><span style=\"color:#E1EFFF\">></span><span style=\"color:#FFEE80\">)</span><span style=\"color:#FAD000\"> =></span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    const</span><span style=\"color:#9EFFFF\"> todo </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#FF9D00\"> await</span><span style=\"color:#9EFFFF\"> db</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FFEE80\">todo</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">update</span><span style=\"color:#E1EFFF\">({</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">        where</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">            id</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">        },</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">        data</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    })</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    return</span><span style=\"color:#9EFFFF\"> todo</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span></span></code></pre></figure>\n<h2>⛔ delete</h2>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"typescript\" data-theme=\"Shades of Purple\"><code data-language=\"typescript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FF9D00\">const</span><span style=\"color:#FAD000\"> deleteTodo</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#FF9D00;font-style:italic\"> async</span><span style=\"color:#FFEE80\"> (</span><span style=\"color:#9EFFFF\">id</span><span style=\"color:#FF9D00\">:</span><span style=\"color:#80FFBB\"> string</span><span style=\"color:#FFEE80\">)</span><span style=\"color:#FAD000\"> =></span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    const</span><span style=\"color:#9EFFFF\"> todo </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#FF9D00\"> await</span><span style=\"color:#9EFFFF\"> db</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FFEE80\">todo</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">delete</span><span style=\"color:#E1EFFF\">({</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">        where</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">            id</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">        },</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    })</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    return</span><span style=\"color:#9EFFFF\"> todo</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span></span></code></pre></figure>",
            "url": "https://bradgarropy.com/blog/prisma-crud-operations",
            "title": "💩 prisma crud operations",
            "date_modified": "2022-10-01T00:00:00.000Z",
            "date_published": "2022-10-01T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "profiling-node-scripts",
            "content_html": "<p>If you're looking to improve the performance of a <a href=\"https://nodejs.org\" rel=\"noopener noreferrer\" target=\"_blank\">Node.js</a> script, a <a href=\"https://brendangregg.com/flamegraphs.html\" rel=\"noopener noreferrer\" target=\"_blank\">flamegraph</a> is a great way to visualize where time is spent during execution.</p>\n<p>Node supports generating data from scripts that is required to create a flamegraph. To start profiling a script, run it with the <code>inspect</code> command to begin a debugging session.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"zsh\" data-theme=\"Shades of Purple\"><code data-language=\"zsh\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FAD000\">node</span><span style=\"color:#A5FF90\"> inspect</span><span style=\"color:#A5FF90\"> index.js</span></span></code></pre></figure>\n<p>You'll see that Node starts an interactive debugging session, halted at the first line of your script. Here you can run the script as many times as you need with features like breakpoints and step by step execution. Type <code>help</code> at the <code>debug></code> prompt to see all available options.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/node-devtools.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/node-devtools.png\" alt=\"node devtools\" width=\"1088\" height=\"302\"></a>\n<p>In order to view the flamegraph, open the Node.js DevTools in Chrome by clicking the green Node.js icon in the top left of the DevTools window. This will open open a window where you can select your JavaScript VM instance to record.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/profiler.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/profiler.png\" alt=\"profiler\" width=\"993\" height=\"337\"></a>\n<p>To begin profiling, click the blue <em>Start</em> button at the bottom of the <em>Profiler</em> tab. Then go to your terminal and type <code>cont</code> to continue your script execution. Once completed, go back to the <em>Profiler</em> tab and click <em>Stop</em>.</p>\n<p>Then you'll see an interactive flamegraph that you can use to view which function calls took the most time during the execution. It can be viewed as a chart, a tree, or a list, but I prefer the chart.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/flamegraph-chart.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/flamegraph-chart.png\" alt=\"flamegraph chart\" width=\"2157\" height=\"611\"></a>\n<p>Between each profiling run, you must clear all profiles in the <em>Profiler</em> tab and restart your Node debugger with the <code>restart</code> command. Then go back and select your JavaScript VM instance to begin profiling again.</p>\n<p>While I found the restart process to be a little inconvenient, it was the most reliable way to get a profile capture across multiple runs of my script.</p>",
            "url": "https://bradgarropy.com/blog/profiling-node-scripts",
            "title": "🟢 profiling node scripts",
            "date_modified": "2022-09-13T00:00:00.000Z",
            "date_published": "2022-09-13T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "project-fi-first-look",
            "content_html": "<p>After making the big switch from an <a href=\"https://www.apple.com/shop/buy-iphone/iphone-7\" rel=\"noopener noreferrer\" target=\"_blank\">Apple iPhone 7</a> to the <a href=\"https://store.google.com/us/product/pixel_2\" rel=\"noopener noreferrer\" target=\"_blank\">Google Pixel 2</a>, I was downright pissed when I realized that AT&#x26;T does not support WiFi calling on the Pixel 2. This was just one more reason to leave AT&#x26;T, as we get terrible cell reception at our house. So I went searching for a new cell provider and <a href=\"https://fi.google.com/about/\" rel=\"noopener noreferrer\" target=\"_blank\">Project Fi</a> naturally seemed like a good fit.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/project-fi-furry.jpg\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/project-fi-furry.jpg\" alt=\"Project Fi Furry\" width=\"1440\" height=\"680\"></a>\n<h2>enticing features</h2>\n<p>Unlike some of the other major carriers who try to entice you with streaming subscriptions, Project Fi focuses on getting the basics done right.</p>\n<h3>google's customer service</h3>\n<p>If you've ever called in to Google's customer service for any product at all, you know that it's second to none. And if you've ever called into AT&#x26;T's customer service then you know what it feels like to be punched in the gut. I know that Google will do what is right to solve any issue that may come up.</p>\n<h3>great mobile app</h3>\n<p>One thing I never liked about cell service providers is how it always felt like a guessing game when it came to how much data was used by what apps and how that affected my bill. Project Fi's mobile app is a simple and straightforward way to manage your data usage. You can set alerts at certain thresholds, see your usage history, and sort by application.</p>\n<h3>pricing structure</h3>\n<p>I love the pricing structure, it couldn't get any simpler! $20 for my line and $10 per gigabyte that I use. I typically travel been home and work, both of which are extremely \"connected\" environments, so I have WiFi everywhere. I used Project Fi's <a href=\"https://fi.google.com/about/plan/#calculator\" rel=\"noopener noreferrer\" target=\"_blank\">calculator</a> to estimate my average monthly cost, which was around $40.</p>\n<p>What's even better is that there's a built in unlimited plan. If you use more than 6gb ($60) of data, it's free after that! That means you'll never get a bill higher than $80! This puts Project Fi in direct competition with the unlimited plans from <a href=\"https://www.att.com/plans/unlimited-data-plans.html/#dmgUnlimited--packages\" rel=\"noopener noreferrer\" target=\"_blank\">AT&#x26;T</a> and <a href=\"https://www.t-mobile.com/cell-phone-plans/#plans\" rel=\"noopener noreferrer\" target=\"_blank\">T-Mobile</a>.</p>\n<h3>no sim required</h3>\n<p>If you have a <a href=\"https://fi.google.com/about/phones/#compare\" rel=\"noopener noreferrer\" target=\"_blank\">compatible phone</a>, you don't have to go into a store to activate Project Fi. Just download the app, sign up, and you immediately have service.</p>\n<h2>just the beginning</h2>\n<p>It may seem like I'm gushing about Project Fi even though I just signed up, but Google's Project Fi is making everything about cell service convenient for the user. And to me, that's what makes a great wireless provider. So far I'm loving the service, and I'm looking forward to watching my bills go down in the coming months.</p>",
            "url": "https://bradgarropy.com/blog/project-fi-first-look",
            "title": "📱 project fi first look",
            "date_modified": "2018-08-07T00:00:00.000Z",
            "date_published": "2018-08-07T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "project-fi-one-month-in",
            "content_html": "<p>my bill was six dollars.</p>\n<p>I can pretty much end the post here, but I'm going to keep writing anyways 😁</p>\n<p>I've spent one month with <a href=\"https://fi.google.com/about/\" rel=\"noopener noreferrer\" target=\"_blank\">Project Fi</a> and its been a great experience so far. My bill was low, I had no reception issues, and I got an unexpected suprise from <a href=\"https://twitter.com/BrandonHassler\" rel=\"noopener noreferrer\" target=\"_blank\">@BrandonHassler</a>.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/project-fi-ice-cream.jpg\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/project-fi-ice-cream.jpg\" alt=\"Project Fi Ice Cream\" width=\"1440\" height=\"680\"></a>\n<h2>reception</h2>\n<p>Of course the first thing that should be talked about is cell reception. Project Fi uses a combination of Sprint, T-Mobile, and US Cellular towers for their network, and I gotta say, this blows AT&#x26;T out of the water. I used to have zero signal in my house, but with Project Fi, I'm all good. Moreover, Project Fi allows me to use WiFi calling on my <a href=\"https://store.google.com/us/product/pixel_2\" rel=\"noopener noreferrer\" target=\"_blank\">Pixel 2</a>, so calls are crystal clear while I'm connected.</p>\n<h2>voicemail</h2>\n<p>When I was on AT&#x26;T I had to download this <a href=\"https://play.google.com/store/apps/details?id=com.att.mobile.android.vvm\" rel=\"noopener noreferrer\" target=\"_blank\">cruddy application</a> to see my voicemails. Now, voicemail is integrated within the Google's <a href=\"https://play.google.com/store/apps/details?id=com.google.android.dialer\" rel=\"noopener noreferrer\" target=\"_blank\">Phone</a> app just like it should be! Integrations like these make Project Fi feel like home on a Google phone.</p>\n<h2>minimizing data</h2>\n<p>Although Project Fi turns into an unlimited plan after 6gb, it's pay as you go up until then. So you have a huge incentive to use the least amount of data possible. I kept my eyes peeled for open WiFi networks while out with the family on weekends, and Google helps out by automatically connecting you to networks you've joined in the past. I was also conscious of using my phone in the car, no social media scrolling to that eats up data. And for podcasts, I just download the latest episodes to listen to while I'm out.</p>\n<p>While this may sound like a lot of micromanagement, it didn't feel that way. I was happy using my phone less in the car, and obviously it's much safer. The times that did require data usage (directions, googling necessary information, etc) didn't cause a big spike.</p>\n<h2>the bill</h2>\n<p>All that being said, I used 0.264gb which brought my bill to <strong>$26.81</strong>. But out of the blue I noticed I had a $20 referral credit from none other than <a href=\"https://twitter.com/BrandonHassler\" rel=\"noopener noreferrer\" target=\"_blank\">@BrandonHassler</a>, bringing my bill down to <strong>six dollars.</strong> I don't know him personally, but I owe him a giant 👍🏼</p>\n<h2>referral</h2>\n<p>On that note, I highly recommend Project Fi, and if you want to try it out, use my <a href=\"https://g.co/fi/r/K9M8M3\" rel=\"noopener noreferrer\" target=\"_blank\">referral code</a> and we'll <em>both</em> get twenty bucks.</p>\n<h1>K9M8M3</h1>",
            "url": "https://bradgarropy.com/blog/project-fi-one-month-in",
            "title": "📅 project fi one month in",
            "date_modified": "2018-09-07T00:00:00.000Z",
            "date_published": "2018-09-07T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "publishing-npm-packages-webinar",
            "content_html": "<p><a href=\"https://jamesqquick.com\" rel=\"noopener noreferrer\" target=\"_blank\">James Quick</a> invited me back to his stream to talk about how to publish packages to <a href=\"https://npmjs.com\" rel=\"noopener noreferrer\" target=\"_blank\">npm</a>. In about an hour I give a walkthrough on the basics of creating a package, how to test it locally, and how to deploy it to npm.</p>\n<iframe class=\"aspect-video w-full rounded my-8\" title=\"xleL7v7yBmM\" src=\"https://www.youtube-nocookie.com/embed/xleL7v7yBmM\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen>\n        </iframe>\n<p>Check out the webinar, then let me know what awesome packages you've published! Mention me on <a href=\"https://twitter.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">Twitter</a>, or join me in James' new <a href=\"https://discord.gg/w8FHC7d\" rel=\"noopener noreferrer\" target=\"_blank\">Discord server</a> to continue the conversation.</p>",
            "url": "https://bradgarropy.com/blog/publishing-npm-packages-webinar",
            "title": "📦 publishing npm packages webinar",
            "date_modified": "2020-06-13T00:00:00.000Z",
            "date_published": "2020-06-13T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "react-image-slider",
            "content_html": "<p>When building my wife's photography website, <a href=\"https://photogarropy.netlify.app\" rel=\"noopener noreferrer\" target=\"_blank\">photogarropy</a>, I knew I wanted the home page to prominently feature her work, so I made an image slider and placed it on the landing page of the site. I'll walk you through how to build it below.</p>\n<p>First thing's first, our component will accept a list of images as props, and track the currently displayed image as state. If the snippet below looks a little odd to you, note that I'm using <a href=\"https://codeburst.io/use-class-properties-to-clean-up-your-classes-and-react-components-93185879f688\" rel=\"noopener noreferrer\" target=\"_blank\">class properties</a>, which I highly recommend.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"javascript\" data-theme=\"Shades of Purple\"><code data-language=\"javascript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FF9D00\">class</span><span style=\"color:#FB94FF\"> Carousel</span><span style=\"color:#FF9D00;font-style:italic\"> extends</span><span style=\"color:#FAD000\"> React</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FFEE80\">Component</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00;font-style:italic\">    static</span><span style=\"color:#9EFFFF\"> propTypes </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#80FFBB\">        images</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#9EFFFF\"> PropTypes</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">arrayOf</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#9EFFFF\">PropTypes</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">string</span><span style=\"color:#E1EFFF\">).</span><span style=\"color:#FAD000\">isRequired</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">    state </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#E1EFFF\"> {</span><span style=\"color:#80FFBB\">index</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#FF628C\"> 0</span><span style=\"color:#E1EFFF\">}</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span></span></code></pre></figure>\n<p>Next we need to actually render an image in the slider. Use a CSS <code>background-image</code> property so you can render the image. You should also create a reference to this element to use later when we modify what image is displayed.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"javascript\" data-theme=\"Shades of Purple\"><code data-language=\"javascript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#9EFFFF\">carousel</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#9EFFFF\"> React</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">createRef</span><span style=\"color:#E1EFFF\">()</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FAD000\">render</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#E1EFFF\"> ()</span><span style=\"color:#FAD000\"> =></span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    const</span><span style=\"color:#9EFFFF\"> index </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#FB94FF\"> this</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FFEE80\">state</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">index</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    const</span><span style=\"color:#9EFFFF\"> image </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#FB94FF\"> this</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FFEE80\">props</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">images</span><span style=\"color:#E1EFFF\">[</span><span style=\"color:#9EFFFF\">index</span><span style=\"color:#E1EFFF\">]</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    return</span><span style=\"color:#E1EFFF\"> (</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">        &#x3C;div</span></span>\n<span data-line=\"\"><span style=\"color:#FAD000;font-style:italic\">            ref</span><span style=\"color:#FF9D00\">=</span><span style=\"color:#E1EFFF\">{</span><span style=\"color:#FB94FF\">this</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">carousel</span><span style=\"color:#E1EFFF\">}</span></span>\n<span data-line=\"\"><span style=\"color:#FAD000;font-style:italic\">            className</span><span style=\"color:#FF9D00\">=</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">carousel</span><span style=\"color:#92FC79\">\"</span></span>\n<span data-line=\"\" data-highlighted-line=\"\"><span style=\"color:#FAD000;font-style:italic\">            style</span><span style=\"color:#FF9D00\">=</span><span style=\"color:#E1EFFF\">{{</span><span style=\"color:#80FFBB\">backgroundImage</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#3AD900\"> `url(</span><span style=\"color:#FFEE80\">${</span><span style=\"color:#9EFFFF\">image</span><span style=\"color:#FFEE80\">}</span><span style=\"color:#3AD900\">)`</span><span style=\"color:#E1EFFF\">}}</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">        /></span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    )</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span></span></code></pre></figure>\n<p>In order to actually trigger the image change, use the <code>componentDidMount</code> lifecycle method to set an interval. In the code below, I'm calling the <code>changeImage</code> method every five seconds. Don't forget to clear the interval when the component unmounts!</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"javascript\" data-theme=\"Shades of Purple\"><code data-language=\"javascript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FAD000\">componentDidMount</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#E1EFFF\"> ()</span><span style=\"color:#FAD000\"> =></span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FB94FF\">    this</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">id</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#FAD000\"> setInterval</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#FB94FF\">this</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">changeImage</span><span style=\"color:#E1EFFF\">,</span><span style=\"color:#FF628C\"> 5000</span><span style=\"color:#E1EFFF\">)</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FAD000\">componentWillUnmount</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#E1EFFF\"> ()</span><span style=\"color:#FAD000\"> =></span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FAD000\">    clearInterval</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#FB94FF\">this</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">id</span><span style=\"color:#E1EFFF\">)</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span></span></code></pre></figure>\n<p>Now it's time to write the core method for our slider component. Create a <code>changeImage</code> method that grabs the carousel reference, increments the index, and sets the new image. Be sure to take into account wrapping after the last image!</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"javascript\" data-theme=\"Shades of Purple\"><code data-language=\"javascript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FAD000\">changeImage</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#E1EFFF\"> ()</span><span style=\"color:#FAD000\"> =></span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    const</span><span style=\"color:#9EFFFF\"> carousel </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#FB94FF\"> this</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FFEE80\">carousel</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">current</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    const</span><span style=\"color:#9EFFFF\"> index </span><span style=\"color:#FF9D00\">=</span></span>\n<span data-line=\"\"><span style=\"color:#FB94FF\">        this</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FFEE80\">state</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">index</span><span style=\"color:#FF9D00\"> ===</span><span style=\"color:#FB94FF\"> this</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FFEE80\">props</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FFEE80\">images</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#80FFBB\">length</span><span style=\"color:#FF9D00\"> -</span><span style=\"color:#FF628C\"> 1</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">            ?</span><span style=\"color:#FF628C\"> 0</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">            :</span><span style=\"color:#FB94FF\"> this</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FFEE80\">state</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">index</span><span style=\"color:#FF9D00\"> +</span><span style=\"color:#FF628C\"> 1</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    const</span><span style=\"color:#9EFFFF\"> image </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#FB94FF\"> this</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FFEE80\">props</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">images</span><span style=\"color:#E1EFFF\">[</span><span style=\"color:#9EFFFF\">index</span><span style=\"color:#E1EFFF\">]</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">    carousel</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FFEE80\">style</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">backgroundImage</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#3AD900\"> `url(</span><span style=\"color:#FFEE80\">${</span><span style=\"color:#9EFFFF\">image</span><span style=\"color:#FFEE80\">}</span><span style=\"color:#3AD900\">)`</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FB94FF\">    this</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">setState</span><span style=\"color:#E1EFFF\">({</span><span style=\"color:#9EFFFF\">index</span><span style=\"color:#E1EFFF\">})</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span></span></code></pre></figure>\n<p>In my use case, I had one final thing to consider. The website was meant to showcase my wife's photography, so I expected the images to be high quality. To ensure smooth carousel transitions, I preloaded the images when the component mounted.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"javascript\" data-theme=\"Shades of Purple\"><code data-language=\"javascript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FAD000\">componentDidMount</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#E1EFFF\"> ()</span><span style=\"color:#FAD000\"> =></span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FB94FF\">    this</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">id</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#FAD000\"> setInterval</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#FB94FF\">this</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">changeImage</span><span style=\"color:#E1EFFF\">,</span><span style=\"color:#FF628C\"> 5000</span><span style=\"color:#E1EFFF\">)</span></span>\n<span data-line=\"\" data-highlighted-line=\"\"><span style=\"color:#FB94FF\">    this</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">preloadImages</span><span style=\"color:#E1EFFF\">()</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FAD000\">preloadImages</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#E1EFFF\"> ()</span><span style=\"color:#FAD000\"> =></span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FB94FF\">    this</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FFEE80\">props</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FFEE80\">images</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">forEach</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#9EFFFF\">image </span><span style=\"color:#FAD000\">=></span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">        let</span><span style=\"color:#9EFFFF\"> img </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#9EFFFF\"> document</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">createElement</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">img</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">)</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">        img</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">src</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#9EFFFF\"> image</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    })</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span></span></code></pre></figure>\n<p>And that's it! Check out the full slider <a href=\"https://github.com/bradgarropy/photogarropy.com/blob/master/src/components/Carousel.js\" rel=\"noopener noreferrer\" target=\"_blank\">source code</a> and see it in action on the <a href=\"https://photogarropy.netlify.app\" rel=\"noopener noreferrer\" target=\"_blank\">photogarropy</a> site.</p>\n<p>Tweet me your sliders <a href=\"https://twitter.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">@bradgarropy</a>!</p>",
            "url": "https://bradgarropy.com/blog/react-image-slider",
            "title": "🎥 react image slider",
            "date_modified": "2018-12-15T00:00:00.000Z",
            "date_published": "2018-12-15T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "reactathon-2022-recap",
            "content_html": "<p>Over the past few days I was lucky enough to attend <a href=\"https://www.reactathon.com\" rel=\"noopener noreferrer\" target=\"_blank\">Reactathon</a> thanks to <a href=\"https://www.atlassian.com\" rel=\"noopener noreferrer\" target=\"_blank\">Atlassian</a>! The conference was held in Berkeley, California at the <a href=\"https://calshakes.org/experience/welcome-to-the-bruns\" rel=\"noopener noreferrer\" target=\"_blank\">Bruns Ampitheater</a>, which was absolutely gorgeous! Reactathon is a conference focused on frontend web development, React, JavaScript, and the frameworks and tools that support it.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/reactathon-stage.jpg\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/reactathon-stage.jpg\" alt=\"reactathon stage\" width=\"4032\" height=\"2268\"></a>\n<p><a href=\"https://twitter.com/leeerob\" rel=\"noopener noreferrer\" target=\"_blank\">Lee Robinson</a> kicked off the conference by emphasizing just how foundational <a href=\"https://reactjs.org\" rel=\"noopener noreferrer\" target=\"_blank\">React</a> is in web development. However, React isn’t the complete solution, it is just the foundation. Meta frameworks like <a href=\"https://nextjs.org\" rel=\"noopener noreferrer\" target=\"_blank\">Next.js</a> and <a href=\"https://remix.run\" rel=\"noopener noreferrer\" target=\"_blank\">Remix</a> provide much needed opinions around the primitive tools. <a href=\"https://twitter.com/lydiahallie\" rel=\"noopener noreferrer\" target=\"_blank\">Lydia Hallie</a> later detailed all of the rendering patterns that <a href=\"https://vercel.com\" rel=\"noopener noreferrer\" target=\"_blank\">Vercel</a> supports. From CSR to SSR, and even ISR and DSR, there are so many options (and acronyms). Her <a href=\"https://www.lydiahallie.io/talks/rendering-patterns\" rel=\"noopener noreferrer\" target=\"_blank\">blog post</a> captures all of these in great detail.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/reactathon-vercel.jpg\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/reactathon-vercel.jpg\" alt=\"reactathon vercel\" width=\"4032\" height=\"2268\"></a>\n<p><a href=\"https://twitter.com/shrutikapoor08\" rel=\"noopener noreferrer\" target=\"_blank\">Shruti Kapoor</a> taught us all about <a href=\"https://reactjs.org/blog/2022/03/29/react-v18.html\" rel=\"noopener noreferrer\" target=\"_blank\">React 18</a>, the new APIs, and what the upgrade path looks like. As it turns out, React 18 is faster out of the box, and can be upgraded in an afternoon. <a href=\"https://twitter.com/DavidKPiano\" rel=\"noopener noreferrer\" target=\"_blank\">David Khourshid</a> later went into more detail about what problems you might run into when using <code>StrictMode</code> to unlock concurrency in React 18. For instance, the <code>useEffect</code> hook will be run multiple times, and we should change our perspectives on the purpose of <code>useEffect</code> to think about it only for data synchronization.</p>\n<p><a href=\"https://twitter.com/gurlcode\" rel=\"noopener noreferrer\" target=\"_blank\">Jenn Creighton</a> explained effective methods of debugging asynchronous JavaScript. <a href=\"https://twitter.com/Swizec\" rel=\"noopener noreferrer\" target=\"_blank\">Swizec Teller</a> proclaimed that the modern backend is a JavaScript function thanks to serverless deployments. <a href=\"https://twitter.com/chantastic\" rel=\"noopener noreferrer\" target=\"_blank\">Michael Chan</a> demonstrated just how complicated a single component can be when you take into account all of its variations, like loading states, error states, viewport sizes, authorization, user abilities, locations, and more.</p>\n<p><a href=\"https://twitter.com/kentcdodds\" rel=\"noopener noreferrer\" target=\"_blank\">Kent C. Dodds</a> began by explaining what exactly edge servers are and why they matter to frontend developers, and then showed how <a href=\"https://remix.run\" rel=\"noopener noreferrer\" target=\"_blank\">Remix</a> takes advantage of them to improve performance. <a href=\"https://twitter.com/ryanflorence\" rel=\"noopener noreferrer\" target=\"_blank\">Ryan Florence</a> spoke about when you should fetch your data, and what you need to know before doing so. He explained that you really only need the URL and the user’s authentication state to determine what needs to be fetched. With this knowledge, fetches can be initiated in parallel before starting to render your components, resulting in large performance improvements.</p>\n<p><a href=\"https://twitter.com/swyx\" rel=\"noopener noreferrer\" target=\"_blank\">Shawn Wang</a> zoomed out and enlightened us to the <em>Third Age of JavaScript</em>. This new era of JavaScript is characterized by the death of Internet Explorer 11, a new <code>esmodule</code> system, and faster tooling written in server languages. These changes mature JavaScript as a language overall.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/reactathon-syntax.jpg\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/reactathon-syntax.jpg\" alt=\"reactathon syntax\" width=\"4032\" height=\"2268\"></a>\n<p>Finally, the conference finished up with a live episode of <a href=\"https://syntax.fm\" rel=\"noopener noreferrer\" target=\"_blank\">Syntax.fm</a> where <a href=\"https://twitter.com/stolinski\" rel=\"noopener noreferrer\" target=\"_blank\">Scott Tolinski</a> and <a href=\"https://twitter.com/wesbos\" rel=\"noopener noreferrer\" target=\"_blank\">Wes Bos</a> answered some audience questions and Scott showed off his break dancing skills.</p>\n<p>From a networking perspective the conference was great. I got to meet all of the speakers, and even went out to dinner with <a href=\"https://twitter.com/bradgarropy/status/1522277230809808904\" rel=\"noopener noreferrer\" target=\"_blank\">Scott</a> and <a href=\"https://twitter.com/bradgarropy/status/1522277417695412235\" rel=\"noopener noreferrer\" target=\"_blank\">Wes</a>. These were all folks I’ve talked to online, but there’s nothing like cementing those relationships in person. Of course, there was tons of swag. I think I carried home a couple coffee mugs, more than ten shirts, and about a million stickers!</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/reactathon-lee.jpg\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/reactathon-lee.jpg\" alt=\"reactathon lee\" width=\"4032\" height=\"2268\"></a>\n<p>If you want to learn more about the talks and topics at <a href=\"https://www.reactathon.com\" rel=\"noopener noreferrer\" target=\"_blank\">Reactathon</a>, all of them were streamed live on their <a href=\"https://www.youtube.com/c/RealWorldReact\" rel=\"noopener noreferrer\" target=\"_blank\">YouTube channel</a>. I also took notes on each talk on <a href=\"https://bradgarropy.notion.site/reactathon-8628d6eb7f2348e99b9b7a27883170b9\" rel=\"noopener noreferrer\" target=\"_blank\">Notion</a>.</p>\n<p>If you haven’t been to a conference, or have been missing them since the pandemic started, I highly recommend going to one as soon as you can. You should consider <a href=\"https://smashingconf.com/austin-2022\" rel=\"noopener noreferrer\" target=\"_blank\">Smashing Conf</a> in Austin, I’ll be attending as well!</p>",
            "url": "https://bradgarropy.com/blog/reactathon-2022-recap",
            "title": "⚛️ reactathon 2022 recap",
            "date_modified": "2022-05-10T00:00:00.000Z",
            "date_published": "2022-05-10T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "remix-simplifies-things",
            "content_html": "<p>I've got an new idea for an application, so naturally I started thinking about what tech stack I want to use to build it. Lately I've been a bit bothered by the growing complexity of <a href=\"https://nextjs.org\" rel=\"noopener noreferrer\" target=\"_blank\">Next.js</a>, and I've been hearing so many good things about <a href=\"https://remix.run\" rel=\"noopener noreferrer\" target=\"_blank\">Remix</a>, so I jumped in a gave it a shot.</p>\n<p>When learning any new framework, I start by going through the tutorials and creating my own <a href=\"https://github.com/bradgarropy/remix-starter\" rel=\"noopener noreferrer\" target=\"_blank\">starter</a> template. Then I extend the starter template into an <a href=\"https://github.com/bradgarropy/remix-app\" rel=\"noopener noreferrer\" target=\"_blank\">application</a> to get a feel for how data and authentication work. Here are a few of my thoughts along the way.</p>\n<h2>👨🏼‍🏫 amazing tutorials</h2>\n<p>Hands down Remix has the best tutorials I've ever come across for a framework. Taught by the legendary <a href=\"https://kentcdodds.com\" rel=\"noopener noreferrer\" target=\"_blank\">Kent C. Dodds</a>, there are written and video versions of a beginner and advanced tutorial.</p>\n<p>The beginner tutorial has you create a <a href=\"https://remix.run/docs/en/v1/tutorials/blog\" rel=\"noopener noreferrer\" target=\"_blank\">developer blog</a>. But this tutorial doesn't just cover rendering static <code>markdown</code> files, it's a full blown application with the ability to manage posts and store them in a database. The advanced tutorial takes it one step futher and has you building a <a href=\"https://remix.run/docs/en/v1/tutorials/jokes\" rel=\"noopener noreferrer\" target=\"_blank\">jokes application</a> that includes user authentication and a database to store user submitted jokes.</p>\n<p>I've never had a tutorial teach me how to build a full blown application in the span of a few hours. No other framework goes this far in showing you how to use their product to build on the web.</p>\n<h2>🎶 stacks</h2>\n<p>Once I went through the tutorials and had built applications from scratch, Remix provided an easy way to bootstrap my next project: <a href=\"https://remix.run/docs/en/v1/pages/stacks\" rel=\"noopener noreferrer\" target=\"_blank\">Remix Stacks</a>.</p>\n<p>They have three pre-built stacks that come with linting, unit testing, end to end testing, TypeScript, a CSS library, authentication, a database ORM, and a deployment strategy out of the box. These are ready to go application frameworks that literally solve all of the most difficult parts for you.</p>\n<h2>✨ data loading and mutations</h2>\n<p>After more experience with Remix, I realized that Next.js only delivers half of the data story. Sure, Next.js offers multiple ways to load data, but once the page has been rendered it's up to the developer to figure out how to mutate that data. This leaves you with an overwhelming amount of choices like <a href=\"https://tanstack.com/query\" rel=\"noopener noreferrer\" target=\"_blank\">react-query</a>, <a href=\"https://swr.vercel.app\" rel=\"noopener noreferrer\" target=\"_blank\">SWR</a>, <a href=\"https://apollographql.com/apollo-client\" rel=\"noopener noreferrer\" target=\"_blank\">apollo</a>, or any of the other client side libraries, all of which still require you to handle loading and error states.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/remix-vs-next.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/remix-vs-next.png\" alt=\"remix vs next\" width=\"989\" height=\"670\"></a>\n<p>Remix implements data loading through a <a href=\"https://remix.run/docs/en/v1/api/conventions#loader\" rel=\"noopener noreferrer\" target=\"_blank\">loader</a> function, and data mutations through an <a href=\"https://remix.run/docs/en/v1/api/conventions#action\" rel=\"noopener noreferrer\" target=\"_blank\">action</a> function. Simple as that. Both of these functions are run on the server, and cause no loading state in the application. While the default server rendered page may seem limiting, Remix doesn't block you from <em>progressively enhancing</em> your application with other Remix functions like <a href=\"https://remix.run/docs/en/v1/api/remix#usefetcher\" rel=\"noopener noreferrer\" target=\"_blank\">useFetcher</a> or <a href=\"https://remix.run/docs/en/v1/api/remix#usetransition\" rel=\"noopener noreferrer\" target=\"_blank\">useTransition</a>.</p>\n<h2>🛑 less react</h2>\n<p>The more I worked in Remix, the more I realized I was writing less React and less JavaScript. Remix enabled me to write more HTML and leverage the web platform. I no longer needed <code>useEffect</code> to load data, I had the <code>loader</code> function for that. I didn't use <code>onClick</code> handlers to respond to user interactions, I had <code>&#x3C;form></code> elements for that.</p>\n<p>I also found that I didn't need to create React components nearly as often. Outside of my design system, nearly all of the shared UI components were distributed with nested routes. For example, instead of creating a <code>&#x3C;Header></code> component and rendering it on multiple pages, I had a single parent route that rendered the header, which then automatically included on all nested routes.</p>\n<p>This URL based separation of concerns felt very natural, and caused me to jump between files while coding much less than before.</p>\n<h2>🤔 interesting css methodology</h2>\n<p>This router based system does lead to some oddities though, particularly around styling. If you do wind up creating components that need styles that cross route boundaries, like a design system, surfacing those styles is not very straightforward.</p>\n<p>The simplest way that Remix suggests is to create a <code>shared.css</code> file that is loaded at the root for every page. However, I typically like to keep any styles colocated with the associated component.</p>\n<p>If that's the case, for every use of the component you have to trace the CSS up to the parent route and include the component styles in the <code>links</code> function. This becomes confusing very quickly, as it gets hard to keep track of what route uses what component.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"typescript\" data-theme=\"Shades of Purple\"><code data-language=\"typescript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FF9D00\">import</span><span style=\"color:#9EFFFF\"> globalStyles </span><span style=\"color:#FF9D00;font-style:italic\">from</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">~/styles/global.css</span><span style=\"color:#92FC79\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">import</span><span style=\"color:#E1EFFF\"> {</span><span style=\"color:#9EFFFF\">links </span><span style=\"color:#FF9D00\">as</span><span style=\"color:#9EFFFF\"> modalLinks</span><span style=\"color:#E1EFFF\">}</span><span style=\"color:#FF9D00;font-style:italic\"> from</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">~/components/modal</span><span style=\"color:#92FC79\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">import</span><span style=\"color:#E1EFFF\"> {</span><span style=\"color:#9EFFFF\">links </span><span style=\"color:#FF9D00\">as</span><span style=\"color:#9EFFFF\"> buttonLinks</span><span style=\"color:#E1EFFF\">}</span><span style=\"color:#FF9D00;font-style:italic\"> from</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">~/components/button</span><span style=\"color:#92FC79\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">import</span><span style=\"color:#E1EFFF\"> {</span><span style=\"color:#9EFFFF\">links </span><span style=\"color:#FF9D00\">as</span><span style=\"color:#9EFFFF\"> dropdownLinks</span><span style=\"color:#E1EFFF\">}</span><span style=\"color:#FF9D00;font-style:italic\"> from</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">~/components/dropdown</span><span style=\"color:#92FC79\">\"</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">const</span><span style=\"color:#FAD000\"> links</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#FFEE80\"> ()</span><span style=\"color:#FAD000\"> =></span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    return</span><span style=\"color:#E1EFFF\"> [</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">            rel</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">stylesheet</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">            href</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#9EFFFF\"> globalStyles</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">        },</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">        ...</span><span style=\"color:#FAD000\">buttonLinks</span><span style=\"color:#E1EFFF\">(),</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">        ...</span><span style=\"color:#FAD000\">modalLinks</span><span style=\"color:#E1EFFF\">(),</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">        ...</span><span style=\"color:#FAD000\">dropdownLinks</span><span style=\"color:#E1EFFF\">(),</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    ]</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">export</span><span style=\"color:#E1EFFF\"> {</span><span style=\"color:#9EFFFF\">links</span><span style=\"color:#E1EFFF\">}</span></span></code></pre></figure>\n<p>Ultimately I decided on <a href=\"https://tailwindcss.com\" rel=\"noopener noreferrer\" target=\"_blank\">Tailwind</a> for styling. This allows me to load a single CSS file at the root that contains all the utility classes I need for every route. It's low mental overhead, and I still get all the great benefits of developing with Tailwind.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"typescript\" data-theme=\"Shades of Purple\"><code data-language=\"typescript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FF9D00\">import</span><span style=\"color:#9EFFFF\"> styles </span><span style=\"color:#FF9D00;font-style:italic\">from</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">~/styles/tailwind.css</span><span style=\"color:#92FC79\">\"</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">const</span><span style=\"color:#FAD000\"> links</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#FFEE80\"> ()</span><span style=\"color:#FAD000\"> =></span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    return</span><span style=\"color:#E1EFFF\"> [</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">            rel</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">stylesheet</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">            href</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#9EFFFF\"> styles</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">        },</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    ]</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">export</span><span style=\"color:#E1EFFF\"> {</span><span style=\"color:#9EFFFF\">links</span><span style=\"color:#E1EFFF\">}</span></span></code></pre></figure>\n<h2>🗃️ typescript inconsistencies</h2>\n<p>One last thing that bugged me was typing the <code>loader</code> data. When sending data over HTTP, everything is serialized into a string. Knowing that, Remix wraps whatever data type you have with a <code>SerializeObject</code> type, making every field in your data type optional.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"typescript\" data-theme=\"Shades of Purple\"><code data-language=\"typescript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#B362FF;font-style:italic\">// original type</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">type</span><span style=\"color:#80FFBB\"> Todo</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">    id</span><span style=\"color:#FF9D00\">:</span><span style=\"color:#80FFBB\"> number</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">    userId</span><span style=\"color:#FF9D00\">:</span><span style=\"color:#80FFBB\"> number</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">    createdAt</span><span style=\"color:#FF9D00\">:</span><span style=\"color:#80FFBB\"> Date</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">    updatedAt</span><span style=\"color:#FF9D00\">:</span><span style=\"color:#80FFBB\"> Date</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">    content</span><span style=\"color:#FF9D00\">:</span><span style=\"color:#80FFBB\"> string</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">    isComplete</span><span style=\"color:#FF9D00\">:</span><span style=\"color:#80FFBB\"> boolean</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B362FF;font-style:italic\">// serialized type</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">type</span><span style=\"color:#80FFBB\"> SerializedTodo</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#80FFBB\"> SerializeObject</span><span style=\"color:#E1EFFF\">&#x3C;</span></span>\n<span data-line=\"\"><span style=\"color:#80FFBB\">    Simplify</span><span style=\"color:#E1EFFF\">&#x3C;</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">        {}</span><span style=\"color:#FF9D00\"> &#x26;</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">            id</span><span style=\"color:#FF9D00\">?:</span><span style=\"color:#80FFBB\"> number</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">            content</span><span style=\"color:#FF9D00\">?:</span><span style=\"color:#80FFBB\"> string</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">            createdAt</span><span style=\"color:#FF9D00\">?:</span><span style=\"color:#80FFBB\"> Date</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">            updatedAt</span><span style=\"color:#FF9D00\">?:</span><span style=\"color:#80FFBB\"> Date</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">            isComplete</span><span style=\"color:#FF9D00\">?:</span><span style=\"color:#80FFBB\"> boolean</span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">            userId</span><span style=\"color:#FF9D00\">?:</span><span style=\"color:#80FFBB\"> number</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    ></span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">></span></span></code></pre></figure>\n<p>While I know they did this with the best of intentions in order to account for real life failures, it made me want to cast the <code>useLoader</code> response to my desired type. It may not be the safest option, but it was so much easier to work with.</p>\n<p><em>After <a href=\"https://twitter.com/bradgarropy/status/1576294073958248448\" rel=\"noopener noreferrer\" target=\"_blank\">talking</a> with some Remix contributors, this was actually caused by a configuration in my <code>tsconfig.json</code> file. Setting <code>\"strict\": true</code> generated the correct types!</em></p>\n<h2>🤓 onward with remix</h2>\n<p>Overall I'm very happy working in <a href=\"https://remix.run\" rel=\"noopener noreferrer\" target=\"_blank\">Remix</a>, and I plan to build all of my future applications with it. Instead of integrating services, installing JavaScript libraries, and writing client code, Remix shifts backs to the traditional client / server model. This shift simplifies the process of building applications on the web, and improves the user experience by doing most of the work on the server.</p>",
            "url": "https://bradgarropy.com/blog/remix-simplifies-things",
            "title": "💿 remix simplifies things",
            "date_modified": "2022-10-01T00:00:00.000Z",
            "date_published": "2022-10-01T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "securing-webhooks",
            "content_html": "<p>The thing about webhooks is that they need to be accessible from everywhere. But what if you want to secure them so that only authorized callers can execute them? We can lock down webhooks using an <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Authorization\" rel=\"noopener noreferrer\" target=\"_blank\">HTTP Authorization header</a> and a server side secret.</p>\n<p>In the example below, I'm using a <a href=\"https://vercel.com/docs/concepts/functions/serverless-functions\" rel=\"noopener noreferrer\" target=\"_blank\">Vercel serverless function</a> as a webhook, although the same can be accomplished on any other platform. The first thing you'll have to do is set up a server side secret. This acts like a password that the caller must provide in order to execute the webhook. Create an environment variable under the <em>Settings</em> tab of your <a href=\"https://vercel.com\" rel=\"noopener noreferrer\" target=\"_blank\">Vercel</a> project to store the secret on the server.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/vercel-environment-variables.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/vercel-environment-variables.png\" alt=\"vercel environment variables\" width=\"912\" height=\"294\"></a>\n<p>We'll expect the caller to send the secret in the <code>authorization</code> header. Then our webhook will grab the secret from request headers, and compare it against the server side secret stored in <code>process.env.TOKEN</code>. If the secret matches we execute the webhook and return a <code>200</code> status. If the secret does not match we return a <code>401</code> unauthorized error.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"typescript\" data-theme=\"Shades of Purple\"><code data-language=\"typescript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FF9D00\">import</span><span style=\"color:#E1EFFF\"> {</span><span style=\"color:#9EFFFF\">VercelApiHandler</span><span style=\"color:#E1EFFF\">}</span><span style=\"color:#FF9D00;font-style:italic\"> from</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">@vercel/node</span><span style=\"color:#92FC79\">\"</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">const</span><span style=\"color:#FAD000\"> handler</span><span style=\"color:#FF9D00\">:</span><span style=\"color:#80FFBB\"> VercelApiHandler</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#FFEE80\"> (</span><span style=\"color:#9EFFFF\">request</span><span style=\"color:#E1EFFF\">,</span><span style=\"color:#9EFFFF\"> response</span><span style=\"color:#FFEE80\">)</span><span style=\"color:#FAD000\"> =></span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    if</span><span style=\"color:#E1EFFF\"> (</span><span style=\"color:#9EFFFF\">request</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FFEE80\">headers</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">authorization</span><span style=\"color:#FF9D00\"> !==</span><span style=\"color:#9EFFFF\"> process</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FFEE80\">env</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#9EFFFF\">TOKEN</span><span style=\"color:#E1EFFF\">)</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">        return</span><span style=\"color:#9EFFFF\"> response</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">status</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#FF628C\">400</span><span style=\"color:#E1EFFF\">).</span><span style=\"color:#FAD000\">send</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">Unauthorized</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">)</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    return</span><span style=\"color:#9EFFFF\"> response</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">status</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#FF628C\">200</span><span style=\"color:#E1EFFF\">).</span><span style=\"color:#FAD000\">send</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">Authorized</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">)</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">export</span><span style=\"color:#FF9D00\"> default</span><span style=\"color:#9EFFFF\"> handler</span></span></code></pre></figure>\n<p>Once the serverless function is deployed, or running locally in my case, we can test it out using a REST client like <a href=\"https://insomnia.rest\" rel=\"noopener noreferrer\" target=\"_blank\">Insomnia</a>. In the example below I'm sending the <code>authorization</code> header from the client that matches the server secret and getting an <em>Authorized</em> response.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/authorized-webhook.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/authorized-webhook.png\" alt=\"authorized webhook\" width=\"2628\" height=\"1483\"></a>\n<p>In this example no <code>authorization</code> header is sent and the webhook is correctly responding with a <code>401</code> status to indicate that the caller is unauthorized to execute the hook.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/unauthorized-webhook.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/unauthorized-webhook.png\" alt=\"unauthorized webhook\" width=\"2672\" height=\"1527\"></a>\n<p>Now you can deploy webhooks without worrying about unauthorized access!</p>",
            "url": "https://bradgarropy.com/blog/securing-webhooks",
            "title": "🔒 securing webhooks",
            "date_modified": "2022-10-06T00:00:00.000Z",
            "date_published": "2022-10-06T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "serverless-functions-with-netlify-cli",
            "content_html": "<p>The other day I read a tweet from <a href=\"https://twitter.com/jamesqquick\" rel=\"noopener noreferrer\" target=\"_blank\">James Quick</a> which asked a question that I definitely had some input on.</p>\n<div class=\"grid justify-center\">\n            <blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">What do you think the easiest way is to write and run a Hello World <a href=\"https://twitter.com/hashtag/serverless?src=hash&#x26;ref_src=twsrc%5Etfw\" rel=\"noopener noreferrer\" target=\"_blank\">#serverless</a> function?! For me, it's using <a href=\"https://twitter.com/Netlify?ref_src=twsrc%5Etfw\" rel=\"noopener noreferrer\" target=\"_blank\">@Netlify</a> and running `netlify dev`.</p>— James Q Quick (@jamesqquick) <a href=\"https://twitter.com/jamesqquick/status/1254817585633333248?ref_src=twsrc%5Etfw\" rel=\"noopener noreferrer\" target=\"_blank\">April 27, 2020</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n\n        </div>\n<p>He's right, <code>netlify dev</code> is the best way to run your serverless functions locally. But did you know that the <a href=\"https://cli.netlify.com\" rel=\"noopener noreferrer\" target=\"_blank\">Netlify CLI</a> can scaffold out functions for you based on a bunch of different templates? Let me walk you through it.</p>\n<p>First, you're going to want to install the command line tool globally. And if that's not your style, you can always run it with <code>npx</code>.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"zsh\" data-theme=\"Shades of Purple\"><code data-language=\"zsh\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FAD000\">npm</span><span style=\"color:#A5FF90\"> install</span><span style=\"color:#FF628C\"> --global</span><span style=\"color:#A5FF90\"> netlify-cli</span></span></code></pre></figure>\n<p>Next, create a directory for your project, I called mine <code>bg-serverless</code>, and create a <code>netlify.toml</code> file in there. The <code>functions</code> property tells Netlify where to find and create your serverless functions.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"toml\" data-theme=\"Shades of Purple\"><code data-language=\"toml\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#E1EFFF\">[</span><span style=\"color:#FAD000\">build</span><span style=\"color:#E1EFFF\">]</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    functions</span><span style=\"color:#E1EFFF\"> =</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">functions</span><span style=\"color:#92FC79\">\"</span></span></code></pre></figure>\n<p>Now let's use Netlify CLI to create a serverless function for us. Enter the command below and notice how you are prompted to choose from one of many different <a href=\"https://github.com/netlify/cli/tree/main/src/functions-templates/js\" rel=\"noopener noreferrer\" target=\"_blank\">serverless function templates</a>!</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"zsh\" data-theme=\"Shades of Purple\"><code data-language=\"zsh\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FAD000\">netlify</span><span style=\"color:#A5FF90\"> function:create</span><span style=\"color:#A5FF90\"> hello</span></span></code></pre></figure>\n<p>You'll see that Netlify created a <code>hello</code> directory inside of the <code>functions</code> folder, containing a handler function which returns a response object. This is the most basic of serverless functions, but Netlify also has templates for a <a href=\"https://www.apollographql.com\" rel=\"noopener noreferrer\" target=\"_blank\">GraphQL</a> server, <a href=\"https://stripe.com\" rel=\"noopener noreferrer\" target=\"_blank\">Stripe</a> payments, <a href=\"https://fauna.com\" rel=\"noopener noreferrer\" target=\"_blank\">FaunaDB</a> operations, and <a href=\"https://www.sanity.io\" rel=\"noopener noreferrer\" target=\"_blank\">Sanity</a> integrations!</p>\n<p>Run <code>netlify dev</code> to serve your functions locally at <code>/.netlify/functions/hello</code>. But typing this URL sucks, so let's define a redirect in <code>netlify.toml</code> to simplify the endpoint.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"toml\" data-theme=\"Shades of Purple\"><code data-language=\"toml\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#E1EFFF\">[[</span><span style=\"color:#FAD000\">redirects</span><span style=\"color:#E1EFFF\">]]</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    from</span><span style=\"color:#E1EFFF\"> =</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">/api/*</span><span style=\"color:#92FC79\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    to</span><span style=\"color:#E1EFFF\"> =</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">/.netlify/functions/:splat</span><span style=\"color:#92FC79\">\"</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    status</span><span style=\"color:#E1EFFF\"> =</span><span style=\"color:#FF628C\"> 200</span></span></code></pre></figure>\n<p>Now we can hit <code>/api/hello</code> instead of the ugly default Netlify URL.</p>\n<p>Let's make this site live! Use the Netlify CLI one more time to create a site, and deploy your serverless functions.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"zsh\" data-theme=\"Shades of Purple\"><code data-language=\"zsh\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FAD000\">netlify</span><span style=\"color:#A5FF90\"> deploy</span><span style=\"color:#FF628C\"> --prod</span></span></code></pre></figure>\n<p>If you learn best from watching instead of reading, here is the video version of this post.</p>\n<iframe class=\"aspect-video w-full rounded my-8\" title=\"jEi22V1A2HM\" src=\"https://www.youtube-nocookie.com/embed/jEi22V1A2HM\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen>\n        </iframe>\n<p>Now you're all set to build some awesome things using serverless functions! Hit me up <a href=\"https://twitter.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">@bradgarropy</a> on Twitter and show me what you create!</p>",
            "url": "https://bradgarropy.com/blog/serverless-functions-with-netlify-cli",
            "title": "⚡ serverless functions with netlify cli",
            "date_modified": "2020-04-28T00:00:00.000Z",
            "date_published": "2020-04-28T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "standing-desk-cable-management",
            "content_html": "<p>During the midst of COVID while I was working from home, I decided to purchase an <a href=\"https://upliftdesk.com\" rel=\"noopener noreferrer\" target=\"_blank\">UPLIFT</a> standing desk. As you probably know, I have a lot of <a href=\"https://bradgarropy.com/uses\" rel=\"noopener noreferrer\" target=\"_blank\">equipment</a> on my desk because I create content. Due to the insane amount of cables, I wasn't able to use the desk in the standing position. Months later, I finally got around to managing the mess, and I think the final result looks beautiful.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/desk.jpg\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/desk.jpg\" alt=\"desk\" width=\"4032\" height=\"2268\"></a>\n<p>I had a few goals in mind when I started this project.</p>\n<ul>\n<li>No visible wires</li>\n<li>Minimize outgoing wires</li>\n<li>Desk mounted peripherals</li>\n<li>No wires touching my feet or legs while sitting</li>\n<li>Usable in both the sitting and standing position</li>\n</ul>\n<p>With so many power cords and USB cables, I needed some special hardware, plenty of zip ties, and tons of patience to get it done.</p>\n<h2>⚡ power supply</h2>\n<p>The first obstacle was supporting all 10 of my power cables. Some of them had heavy adapters on the plug, and I didn't want them to fall out of a power supply attached under the desk. So I purchased a <a href=\"https://amazon.com/gp/product/B00006B83A?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">Tripp Lite</a> rack mount power supply, and a <a href=\"https://amazon.com/gp/product/B0822MJRT9?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">1U rack mount</a>.</p>\n<p>The rack mount kept a low profile on the power supply by mounting it horizontally. The power supply has two sides, one of which has gaps for the larger adapters. It also comes with a built in surge protector, which is nice for peace of mind.</p>\n<p>I drilled pilot holes and used screws to mount the rack to the underside of the desk. Then the power supply fastened securely to the front of the rack. The biggest drawback was the 15 foot long power cable coming from the power supply. I'll show you how I managed that in a later section.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/power.jpg\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/power.jpg\" alt=\"power\" width=\"4032\" height=\"2268\"></a>\n<h2>🚍 usb hub</h2>\n<p>To minimize the number of cables coming down from the desk and into my computer, I bought an <a href=\"https://amazon.com/gp/product/B005NGQWL2?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">Anker USB hub</a>. It's powered independently, so I don't lose any bandwidth over the 10 ports. I positioned it directly over my computer so I could easily run a single cable from the hub into the computer.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/usb.jpg\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/usb.jpg\" alt=\"usb\" width=\"4032\" height=\"2268\"></a>\n<h2>🔌 cable management</h2>\n<p>This was the hard part. It took a lot of patience over about six hours to manage all of the cables. I used zip tie mounts and <a href=\"https://amazon.com/Adhesive-Management-Anchors-Organizer-Holders/dp/B08F77YVYB?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">zip ties</a> to attach the cables to the desk, and a mixture of zip ties and <a href=\"https://amazon.com/gp/product/B001E1Y5O6?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">velcro strips</a> to keep them bundled up. I ran cables one at a time, and zip tied them into place as I went. While I wasted a ton of zip ties this way, it was the only effective way to keep the cables in place while I was working.</p>\n<p>I used the channels at the front and back of the desk to run cables horizontally, using plenty of zip tie mounts as support. For cables that needed to cross through the center of the desk, I had a single laneway close to the desk controller to keep things tidy. The 15 foot power supply cable was tricky, it was so thick that I didn't want to use any of the previous lanes, so I wrapped it in a circle near the power supply.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/cables.jpg\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/cables.jpg\" alt=\"cables\" width=\"4032\" height=\"2268\"></a>\n<p>The only real problem I encountered while doing this was the audio cable. I got everything connected, then sat down at my computer to test everything. My microphone was very noisy, with a ton of background hiss. I realized that the XLR cable was experiencing interference by being bundled with all of the other wires. So I removed it from the major lanes that I had created and strung it up on the side of the desk.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/audio.jpg\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/audio.jpg\" alt=\"audio\" width=\"4032\" height=\"2268\"></a>\n<p>If you're curious about how everything is actually wired up, I created a <a href=\"https://figma.com/file/zZRndHhjo3waexZliYR9Yt/desk\" rel=\"noopener noreferrer\" target=\"_blank\">wiring diagram</a> of the entire setup if you want to check it out.</p>\n<h2>🤩 finished</h2>\n<p>Overall, everything worked according to plan! Now I have a picturesque workspace that I can use sitting or standing. Now it's time for you to share your setups! Post a photo of your desk and tag me on <a href=\"https://twitter.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">Twitter</a> or in <a href=\"https://bradgarropy.com/discord\" rel=\"noopener noreferrer\" target=\"_blank\">Discord</a>, I'd love to see what your workspace looks like!</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/chair.jpg\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/chair.jpg\" alt=\"chair\" width=\"4032\" height=\"2268\"></a>",
            "url": "https://bradgarropy.com/blog/standing-desk-cable-management",
            "title": "🔌 standing desk cable management",
            "date_modified": "2021-11-10T00:00:00.000Z",
            "date_published": "2021-11-10T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "stuff-coming-soon",
            "content_html": "<p>Yea, you heard it right. There's stuff coming soon.</p>",
            "url": "https://bradgarropy.com/blog/stuff-coming-soon",
            "title": "🔜 stuff coming soon",
            "date_modified": "2018-08-03T00:00:00.000Z",
            "date_published": "2018-08-03T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "styled-components-open-source-contribution",
            "content_html": "<p>It's been a while since I've contributed to open source, but recently I was going through the <a href=\"https://advancedreact.com/\" rel=\"noopener noreferrer\" target=\"_blank\">Advanced React</a> course by <a href=\"https://twitter.com/wesbos\" rel=\"noopener noreferrer\" target=\"_blank\">Wes Bos</a> and I hit a snag while writing a <a href=\"https://www.styled-components.com/\" rel=\"noopener noreferrer\" target=\"_blank\">styled-components</a> theme.</p>\n<h2>issue</h2>\n<p>Even after reading the <a href=\"https://www.styled-components.com/docs/advanced#theming\" rel=\"noopener noreferrer\" target=\"_blank\">documentation</a>, it took me too long to figure out that <code>&#x3C;ThemeProvider></code> is required to return a single child node.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"jsx\" data-theme=\"Shades of Purple\"><code data-language=\"jsx\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#9EFFFF\">&#x3C;</span><span style=\"color:#80FFBB\">ThemeProvider</span><span style=\"color:#FAD000;font-style:italic\"> theme</span><span style=\"color:#FF9D00\">=</span><span style=\"color:#E1EFFF\">{</span><span style=\"color:#9EFFFF\">theme</span><span style=\"color:#E1EFFF\">}</span><span style=\"color:#9EFFFF\">></span></span>\n<span data-line=\"\" data-highlighted-line=\"\"><span style=\"color:#9EFFFF\">    &#x3C;</span><span style=\"color:#80FFBB\">React.Fragment</span><span style=\"color:#9EFFFF\">></span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">        &#x3C;</span><span style=\"color:#80FFBB\">GlobalStyle</span><span style=\"color:#9EFFFF\"> /></span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">        &#x3C;</span><span style=\"color:#80FFBB\">StyledPage</span><span style=\"color:#9EFFFF\">></span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">            &#x3C;</span><span style=\"color:#80FFBB\">Meta</span><span style=\"color:#9EFFFF\"> /></span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">            &#x3C;</span><span style=\"color:#80FFBB\">Header</span><span style=\"color:#9EFFFF\"> /></span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">            &#x3C;</span><span style=\"color:#80FFBB\">Container</span><span style=\"color:#9EFFFF\">></span><span style=\"color:#E1EFFF\">{</span><span style=\"color:#FB94FF\">this</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FFEE80\">props</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">children</span><span style=\"color:#E1EFFF\">}</span><span style=\"color:#9EFFFF\">&#x3C;/</span><span style=\"color:#80FFBB\">Container</span><span style=\"color:#9EFFFF\">></span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">        &#x3C;/</span><span style=\"color:#80FFBB\">StyledPage</span><span style=\"color:#9EFFFF\">></span></span>\n<span data-line=\"\" data-highlighted-line=\"\"><span style=\"color:#9EFFFF\">    &#x3C;/</span><span style=\"color:#80FFBB\">React.Fragment</span><span style=\"color:#9EFFFF\">></span></span>\n<span data-line=\"\"><span style=\"color:#9EFFFF\">&#x3C;/</span><span style=\"color:#80FFBB\">ThemeProvider</span><span style=\"color:#9EFFFF\">></span></span></code></pre></figure>\n<h2>discuss</h2>\n<p>I thought there was some room for improvement in the documentation to call this out more clearly, so I headed to the styled-components <a href=\"https://spectrum.chat/styled-components\" rel=\"noopener noreferrer\" target=\"_blank\">Spectrum</a> community to talk about my situation.</p>\n<p>I started a new thread and it turns out that I wasn't the only one confused by this. <a href=\"https://twitter.com/mxstbr\" rel=\"noopener noreferrer\" target=\"_blank\">Max Stoiber</a>, one of the maintainers, was very supportive!</p>\n<h2>enhance</h2>\n<p>The change was simple, I added a little blurb to the theming documentation calling out the single child node requirement and offering a bit of explanation.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/theming-documentation.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/theming-documentation.png\" alt=\"Theming Documenation\" width=\"2389\" height=\"313\"></a>\n<p>I made a <a href=\"https://github.com/styled-components/styled-components-website/pull/410\" rel=\"noopener noreferrer\" target=\"_blank\">pull request</a> containing the changes and Max approved and merged it within eight hours. The changes are <a href=\"https://www.styled-components.com/docs/advanced#theming\" rel=\"noopener noreferrer\" target=\"_blank\">live</a> right now!</p>\n<h2>contribute!</h2>\n<p>The entire open source process was very easy thanks to the styled-components contribution documentation, Spectrum community, and maintainers.</p>\n<p>🖤 Thank you to all who helped me!</p>\n<p>Hopefully this goes to show you that all open source contributions are valued, even minor documentation updates. It's not as difficult as you think, so I encourage you to go out and contribute!</p>",
            "url": "https://bradgarropy.com/blog/styled-components-open-source-contribution",
            "title": "💅🏼 styled-components open source contribution",
            "date_modified": "2018-12-28T00:00:00.000Z",
            "date_published": "2018-12-28T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "syntax-highlighting-in-gatsby",
            "content_html": "<p>After I posted about how I set up the <a href=\"https://bradgarropy.com/contentful-preview-api-with-gatsby-netlify\" rel=\"noopener noreferrer\" target=\"_blank\">👀 contentful preview api with gatsby + netlify</a>, I got some positive feedback and some questions about the syntax highlighting on my blog. Luckily I was already working on a post to discuss exactly that, so I'll walk you through how I set it up.</p>\n<h2>gatsby-remark-prismjs</h2>\n<p>I really had no clue where to start. So a quick search for gatsby syntax highlighting pulled up <a href=\"https://prismjs.com/\" rel=\"noopener noreferrer\" target=\"_blank\">Prism</a>. It turned out <a href=\"https://www.gatsbyjs.org/\" rel=\"noopener noreferrer\" target=\"_blank\">Gatsby</a> already had a <a href=\"https://www.gatsbyjs.org/packages/gatsby-remark-prismjs\" rel=\"noopener noreferrer\" target=\"_blank\">plugin</a> for that! I installed the package with <code>npm i gatsby-remark-prismjs</code>, then added an option under the <a href=\"https://www.gatsbyjs.org/packages/gatsby-transformer-remark\" rel=\"noopener noreferrer\" target=\"_blank\">remark</a> plugin that I already had installed.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"javascript\" data-theme=\"Shades of Purple\"><code data-language=\"javascript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#B362FF;font-style:italic\">// gatsby-config.js</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">{</span></span>\n<span data-line=\"\"><span style=\"color:#FAD000\">    resolve</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">gatsby-transformer-remark</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\" data-highlighted-line=\"\"><span style=\"color:#FAD000\">    options</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\" data-highlighted-line=\"\"><span style=\"color:#FAD000\">        plugins</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#E1EFFF\"> [</span></span>\n<span data-line=\"\" data-highlighted-line=\"\"><span style=\"color:#E1EFFF\">              {</span></span>\n<span data-line=\"\" data-highlighted-line=\"\"><span style=\"color:#80FFBB\">                  resolve</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">gatsby-remark-prismjs</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\" data-highlighted-line=\"\"><span style=\"color:#E1EFFF\">              },</span></span>\n<span data-line=\"\" data-highlighted-line=\"\"><span style=\"color:#E1EFFF\">        ],</span></span>\n<span data-line=\"\" data-highlighted-line=\"\"><span style=\"color:#E1EFFF\">    },</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">},</span></span></code></pre></figure>\n<p>Next I had to actually style the code. So I browsed Prism's <a href=\"https://github.com/PrismJS/prism/tree/master/themes\" rel=\"noopener noreferrer\" target=\"_blank\">themes</a> and picked out <a href=\"https://github.com/PrismJS/prism/blob/master/themes/prism-funky.css\" rel=\"noopener noreferrer\" target=\"_blank\">prism-funky</a>. I copied the file into my project and made some <a href=\"https://github.com/bradgarropy/bradgarropy.com/blob/main/src/scss/PrismFunky.scss\" rel=\"noopener noreferrer\" target=\"_blank\">modifications</a> to the colors and background. In order for Prism to pick up the styles, I had to import the CSS file anywhere code would be displayed, like in my <code>&#x3C;PostBody/></code> component.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"javascript\" data-theme=\"Shades of Purple\"><code data-language=\"javascript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#B362FF;font-style:italic\">// components/PostBody.jsx</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B362FF;font-style:italic\">// styles</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">import</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">../scss/PostBody.scss</span><span style=\"color:#92FC79\">\"</span></span>\n<span data-line=\"\" data-highlighted-line=\"\"><span style=\"color:#FF9D00\">import</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">../scss/PrismFunky.scss</span><span style=\"color:#92FC79\">\"</span></span></code></pre></figure>\n<p>And that was it, just a few lines of code changes to produce the awesome code blocks you're seeing now!</p>\n<h2>not sexy enough</h2>\n<p>I'm still missing one key feature when it comes to syntax highlighting, line numbers. My attempts to get that working in conjuction with line highlighting have been unsuccessful so far, but I'll figure it out eventually.</p>\n<p>While my current syntax highlighting theme is pretty sweet, it's not sexy enough. I've got plans to create my own theme for <a href=\"https://code.visualstudio.com/\" rel=\"noopener noreferrer\" target=\"_blank\">Visual Studio Code</a> and use the same colors on this blog. When I get around to working on it, you can find it <a href=\"https://github.com/bradgarropy/vscode-theme\" rel=\"noopener noreferrer\" target=\"_blank\">here</a>.</p>\n<p>Thanks for following along and tweet me your themes <a href=\"https://twitter.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">@bradgarropy</a>!</p>",
            "url": "https://bradgarropy.com/blog/syntax-highlighting-in-gatsby",
            "title": "💄 syntax highlighting in gatsby",
            "date_modified": "2018-10-08T00:00:00.000Z",
            "date_published": "2018-10-08T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "syntax-live",
            "content_html": "<p>My all time favorite web development podcast is <a href=\"https://syntax.fm\" rel=\"noopener noreferrer\" target=\"_blank\">Syntax</a>, hosted by <a href=\"https://twitter.com/stolinski\" rel=\"noopener noreferrer\" target=\"_blank\">Scott Tolinski</a> and <a href=\"https://twitter.com/wesbos\" rel=\"noopener noreferrer\" target=\"_blank\">Wes Bos</a>. They put on a <a href=\"https://syntax.fm/show/300/300th-live-show-spectacular\" rel=\"noopener noreferrer\" target=\"_blank\">300th episode spectacular</a> where listeners were invited onto the show to participate!</p>\n<p>And lucky me I got to go first! Scott remembered how to pronounce my name and I impressed Wes with my preparedness. So other than a minor audio glitch, things kicked off well. I chose to do three of the four segments: Potluck Question, Sick Pick, Shameless Plug.</p>\n<iframe class=\"aspect-video w-full rounded my-8\" title=\"W7y03fsqHJw\" src=\"https://www.youtube-nocookie.com/embed/W7y03fsqHJw?start=2503\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen>\n        </iframe>\n<h2>🥘 Potluck Question</h2>\n<p><em>Is <a href=\"https://github.com/graphql/graphql-playground\" rel=\"noopener noreferrer\" target=\"_blank\">GraphQL Playground</a> in production considered insecure due to introspection?</em></p>\n<p>Scott and Wes both disable GraphQL Playground in production. And as it turns out, <a href=\"https://apollographql.com\" rel=\"noopener noreferrer\" target=\"_blank\">Apollo</a> disables GraphQL Playground in production environments by default. One listener added that their products allows GraphQL Playground only from a VPN. That's essentially how we addressed the issue at <a href=\"https://adobe.com\" rel=\"noopener noreferrer\" target=\"_blank\">Adobe</a>, by creating a new authenticated route for GraphQL Playground to ensure users have authorization first.</p>\n<h2>🤮 Sick Pick</h2>\n<p><em><a href=\"https://roguefitness.com/5-11-tactical-vests\" rel=\"noopener noreferrer\" target=\"_blank\">5.11 TacTec Plate Carrier</a></em></p>\n<p>I knew I wanted to plug <a href=\"https://play.google.com/store/apps/details?id=com.bradgarropy.murphy.twa\" rel=\"noopener noreferrer\" target=\"_blank\">MURPHY</a>, so I sick picked this plate carrier to go along with it. The 5.11 TacTec adds some extra resistance to my pull ups, push ups, and cardio. It also fits like a glove and doesn't restrict movement at all. Although the it's pretty expensive, I use the 5.11 TacTec every day and I'm definitely getting my money's worth.</p>\n<h2>🔌 Shameless Plug</h2>\n<p><em><a href=\"https://play.google.com/store/apps/details?id=com.bradgarropy.murphy.twa\" rel=\"noopener noreferrer\" target=\"_blank\">MURPHY</a></em></p>\n<p>After just releasing MURPHY how could I <em>not</em> plug it?! I gave the back story on why I chose to create it, and shared the tech stack I used to build it. Scott was interested in the process of releasing a <a href=\"https://web.dev/progressive-web-apps\" rel=\"noopener noreferrer\" target=\"_blank\">PWA</a> to the Google Play Store, so I spent a bit time of talking about the process and tools.</p>\n<p>It was great seeing <a href=\"https://twitter.com/stolinski\" rel=\"noopener noreferrer\" target=\"_blank\">Scott</a> and <a href=\"https://twitter.com/wesbos\" rel=\"noopener noreferrer\" target=\"_blank\">Wes</a> again, and I'm honored to have been the first guest on the <a href=\"https://syntax.fm/show/300/300th-live-show-spectacular\" rel=\"noopener noreferrer\" target=\"_blank\">live show</a>! Thank y'all so much for doing <a href=\"https://syntax.fm\" rel=\"noopener noreferrer\" target=\"_blank\">Syntax</a>, it not only educates me and keeps me up to date with web development, but it's also super entertaining. You've built an incredible community that I'm proud to be a part of!</p>",
            "url": "https://bradgarropy.com/blog/syntax-live",
            "title": "🎥 syntax live",
            "date_modified": "2020-11-11T00:00:00.000Z",
            "date_published": "2020-11-11T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "thats-my-jamstack-podcast",
            "content_html": "<p>A few months ago, myself and <a href=\"https://twitter.com/brob\" rel=\"noopener noreferrer\" target=\"_blank\">Bryan Robinson</a> were both interviewing for a developer relations position at <a href=\"https://sanity.io\" rel=\"noopener noreferrer\" target=\"_blank\">Sanity</a>. After Bryan deservingly got the job, I asked him to chat about his interview process, and his past experiences in developer relations.</p>\n<p>After our informal conversation, I saw that Bryan was looking for guests on the <a href=\"https://thatsmyjamstack.com\" rel=\"noopener noreferrer\" target=\"_blank\">That's My Jamstack</a> podcast, so I volunteered!</p>\n<a href=\"https://thatsmyjamstack.com/posts/brad-garropy\" rel=\"noopener noreferrer\" target=\"_blank\"></a><a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/thats-my-jamstack.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/thats-my-jamstack.png\" alt=\"S02E06\" width=\"1200\" height=\"675\"></a>\n<p>This was my first ever podcast, so I was a bit nervous. But <a href=\"https://thatsmyjamstack.com\" rel=\"noopener noreferrer\" target=\"_blank\">That's My Jamstack</a> episodes follow a formula, so I knew exactly what to expect. I even prepared notes and sent them to Bryan 🤣</p>\n<p>The episode turned out great! We talked about my side project (<a href=\"https://murphy.bradgarropy.com\" rel=\"noopener noreferrer\" target=\"_blank\">MURPHY</a>), cloud databases like <a href=\"https://fauna.com\" rel=\"noopener noreferrer\" target=\"_blank\">FaunaDB</a>, and how APIs play a crucial role in the <a href=\"https://jamstack.org\" rel=\"noopener noreferrer\" target=\"_blank\">Jamstack</a>. I especially loved how Bryan allowed me to plug my <a href=\"https://twitch.tv/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">Twitch</a> channel and <a href=\"https://bradgarropy.com/discord\" rel=\"noopener noreferrer\" target=\"_blank\">Discord</a> server.</p>\n<p>As I got to speak with Bryan more, I couldn't help but think about creating my own podcast. What do y'all think? Should I add it to the to do list?</p>",
            "url": "https://bradgarropy.com/blog/thats-my-jamstack-podcast",
            "title": "🍓 that's my jamstack podcast",
            "date_modified": "2020-10-06T00:00:00.000Z",
            "date_published": "2020-10-06T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "the-boredom-motivation-correlation",
            "content_html": "<p>What happens at work often affects my ability to get things done outside of work. If I don't have enough to do, if there are too many meetings, or if I'm not being challenged at the right level, my brain turns to mush. While in this state, it becomes difficult to maintain focus and find the willpower to make progress on anything. I call this phenomenon <strong>The Boredom / Motivation Correlation</strong>.</p>\n<blockquote>\n<p>Human beings, it seems, are at their best when immersed in something deeply challenging.<br>\n- <a href=\"https://twitter.com/JamesClear\" rel=\"noopener noreferrer\" target=\"_blank\">James Clear</a> | <a href=\"https://www.amazon.com/Atomic-Habits-Proven-Build-Break/dp/0735211299?tag=bradgarropy00-20\" rel=\"noopener noreferrer\" target=\"_blank\">Atomic Habits</a></p>\n</blockquote>\n<p>In my experience, boredom has a direct negative effect on motivation. It happens in a linear fashion: as boredom increases, motivation decreases. I find myself in these situations when I'm not getting enough focus time or there isn't enough work to keep my productivity as high as I like.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/boredom-linear.jpg\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/boredom-linear.jpg\" alt=\"boredom linear\" width=\"251\" height=\"271\"></a>\n<p>But there is a breaking point. Eventually, I become so bored and unmotivated that I find inspiration and create a project for myself to invest in, and my motivation shoots back up. Typically these projects are personal projects, not work related projects. We can adjust the graph to look something like this.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/boredom-spike.jpg\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/boredom-spike.jpg\" alt=\"boredom spike\" width=\"251\" height=\"315\"></a>\n<p>My motivation can also be affected by being too busy at work, which would be the opposite of boredom. In my case, being busy decreases my motivation slower than boredom. I'm still getting things done and feeling productive, but it comes with a high mental cost. Work feels overwhelming, but I'm also knocking out side projects in my free time. This high rate of productivity on work and personal projects eventually leads to burnout. With this in mind, now we can see the whole picture.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/boredom-full.jpg\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/boredom-full.jpg\" alt=\"boredom full\" width=\"701\" height=\"336\"></a>\n<p><strong>The Boredom / Motivation Correlation</strong> is a spectrum that shifts every day for me. Some days I'm super productive and highly motivated because I've got the right balance of challenging work. Other days I don't have a full task list or I have too many meetings and all I want to do is mentally check out and play video games. On the days where I do feel unmotivated, I lift weights or go for a run to shake off that feeling, and then spend time with my family to re-energize myself.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/boredom-constant.jpg\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/boredom-constant.jpg\" alt=\"boredom constant\" width=\"251\" height=\"271\"></a>\n<p>Ideally, boredom and busyness would not have any effect on motivation, and the graph would look something like the one above. If you have mastered your motivation levels and broken the correlation, <a href=\"https://twitter.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">tweet at me</a> and share your tips on how you did it!</p>",
            "url": "https://bradgarropy.com/blog/the-boredom-motivation-correlation",
            "title": "🥱 the boredom / motivation correlation",
            "date_modified": "2022-05-26T00:00:00.000Z",
            "date_published": "2022-05-26T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "think-bigger",
            "content_html": "<p>Recently, I've had two separate conversations with other developers that made realize I need to think bigger.</p>\n<p>The first was a conversation with <a href=\"https://twitter.com/james_r_perkins\" rel=\"noopener noreferrer\" target=\"_blank\">James Perkins</a>. We were talking about his next project, <em>Am I In A Meeting</em>, a service that will change the color of a <a href=\"https://www.philips-hue.com\" rel=\"noopener noreferrer\" target=\"_blank\">Hue</a> light based on your calendar availability. I told him that I was impressed that he was already diving into another SaaS project so quickly after <a href=\"https://rollyourtweet.com\" rel=\"noopener noreferrer\" target=\"_blank\">Roll Your Tweet</a>. In his response, he contrasted his projects with my open source library releases, and it got me thinking.</p>\n<p>The second conversation took place with Corbin Crutchley, better known as <a href=\"https://twitter.com/crutchcorn\" rel=\"noopener noreferrer\" target=\"_blank\">crutchorn</a> online. He is wrapping up a <a href=\"https://gatsbyjs.org\" rel=\"noopener noreferrer\" target=\"_blank\">Gatsby</a> to <a href=\"https://nextjs.org\" rel=\"noopener noreferrer\" target=\"_blank\">Next.js</a> conversion and was walking me through some of the tough parts. Corbin shared that he dove deep into the code on this project, and created a bunch of small libraries to help himself out, and he pointed out how that was similar to the packages I've been publishing.</p>\n<p>Now, the purpose of me pointing out these conversations is not to throw shade at any of these guys, <em>James and Corbin are my buds</em>!</p>\n<p>But their comments made me realize that I'm focusing too much on the meta. I tend to create free and open source libraries that solve relatively minor problems. While these libraries make developers' lives a little bit easier, it's incredibly difficult to generate income from open source projects.</p>\n<p>If I want to begin making money online, I need to think bigger. I need to create SaaS products that solve larger problems, or at least problems large enough that people are willing to pay for solutions.</p>\n<p>I'll be including this newfound resolve to think bigger in my New Year's Resolutions. Stay tuned for that post, along with my <em>2021 in review</em>.</p>",
            "url": "https://bradgarropy.com/blog/think-bigger",
            "title": "💡 think bigger",
            "date_modified": "2021-12-05T00:00:00.000Z",
            "date_published": "2021-12-05T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "vscode-test-current-file-task",
            "content_html": "<p>While setting up a new project at <a href=\"https://www.atlassian.com\" rel=\"noopener noreferrer\" target=\"_blank\">Atlassian</a>, I decided to dive into some <code>vscode</code> workspace settings to see how I could improve the developer experience. I found the <a href=\"https://code.visualstudio.com/docs/editor/tasks\" rel=\"noopener noreferrer\" target=\"_blank\">task</a> system to be pretty interesting and extensible, so I created a custom task to run tests against the currently open file.</p>\n<p>Custom task definitions are placed in <code>.vscode/tasks.json</code>. Most of the fields are straightforward, but the <code>command</code> property has some interesting bits. There are all sorts of <a href=\"https://code.visualstudio.com/docs/editor/tasks#_variable-substitution\" rel=\"noopener noreferrer\" target=\"_blank\">variables</a> you can use to get information about the current file and directory you're in. You can also do things like run a task when a workspace is opened with the <code>runOn</code> property. Here's what my task definition looked like.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"json\" data-theme=\"Shades of Purple\"><code data-language=\"json\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#E1EFFF\">{</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    \"</span><span style=\"color:#FAD000\">version</span><span style=\"color:#E1EFFF\">\"</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#92FC79\"> \"2.0.0\"</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    \"</span><span style=\"color:#FAD000\">tasks</span><span style=\"color:#E1EFFF\">\"</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#E1EFFF\"> [</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">            \"</span><span style=\"color:#FAD000\">label</span><span style=\"color:#E1EFFF\">\"</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#92FC79\"> \"test current file\"</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">            \"</span><span style=\"color:#FAD000\">type</span><span style=\"color:#E1EFFF\">\"</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#92FC79\"> \"shell\"</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">            \"</span><span style=\"color:#FAD000\">command</span><span style=\"color:#E1EFFF\">\"</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#92FC79\"> \"npm run test ${fileBasenameNoExtension}.test${fileExtname}\"</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">            \"</span><span style=\"color:#FAD000\">group</span><span style=\"color:#E1EFFF\">\"</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#92FC79\"> \"test\"</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">            \"</span><span style=\"color:#FAD000\">presentation</span><span style=\"color:#E1EFFF\">\"</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">                \"</span><span style=\"color:#FAD000\">clear</span><span style=\"color:#E1EFFF\">\"</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#FF628C\"> true</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">                \"</span><span style=\"color:#FAD000\">close</span><span style=\"color:#E1EFFF\">\"</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#FF628C\"> false</span><span style=\"color:#E1EFFF\">,</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">                \"</span><span style=\"color:#FAD000\">panel</span><span style=\"color:#E1EFFF\">\"</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#92FC79\"> \"dedicated\"</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">            }</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">    ]</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span></span></code></pre></figure>\n<p>To run this task, open up the command palette by pressing <code>Cmd+P</code>. Then select <code>Tasks: Run Tasks</code> to view a list of custom tasks. Finally, choose the <code>test current file</code> task from the list. If you ask me, this is a much better workflow than executing <code>npm run test</code> and then entering in the exact file path you're looking for.</p>",
            "url": "https://bradgarropy.com/blog/vscode-test-current-file-task",
            "title": "🧪 vscode test current file task",
            "date_modified": "2023-04-03T00:00:00.000Z",
            "date_published": "2023-04-03T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "web-scraping-with-puppeteer",
            "content_html": "<p><a href=\"https://pptr.dev\" rel=\"noopener noreferrer\" target=\"_blank\">Puppeteer</a> is a great way to automate tasks on the web if an API isn't available or doesn't provide what you're looking for. Puppeteer runs on <code>node</code>, and can be started in full or headless mode. Let's go through an example where we search for this article on <a href=\"https://bradgarropy.com\" rel=\"noopener noreferrer\" target=\"_blank\">bradgarropy.com</a>.</p>\n<p>First we install <a href=\"https://pptr.dev\" rel=\"noopener noreferrer\" target=\"_blank\">Puppeteer</a> into our project.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"zsh\" data-theme=\"Shades of Purple\"><code data-language=\"zsh\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FAD000\">npm</span><span style=\"color:#A5FF90\"> install</span><span style=\"color:#A5FF90\"> puppeteer</span></span></code></pre></figure>\n<p>Then we can import <code>puppeteer</code> and scaffold out our automation script. Puppeteer is based on <code>promises</code>, so we'll have to set up a top level <code>async</code> function to call. The <code>findPost</code> function creates a new <a href=\"https://pptr.dev/#?product=Puppeteer&#x26;version=v5.5.0&#x26;show=api-class-browser\" rel=\"noopener noreferrer\" target=\"_blank\">browser</a>, opens a blank <a href=\"https://pptr.dev/#?product=Puppeteer&#x26;version=v5.5.0&#x26;show=api-class-page\" rel=\"noopener noreferrer\" target=\"_blank\">page</a>, and then closes the browser.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"javascript\" data-theme=\"Shades of Purple\"><code data-language=\"javascript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FF9D00\">const</span><span style=\"color:#9EFFFF\"> puppeteer </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#FAD000\"> require</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">puppeteer</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">)</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">const</span><span style=\"color:#FAD000\"> findPost</span><span style=\"color:#FF9D00\"> =</span><span style=\"color:#FF9D00;font-style:italic\"> async</span><span style=\"color:#E1EFFF\"> ()</span><span style=\"color:#FAD000\"> =></span><span style=\"color:#E1EFFF\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    const</span><span style=\"color:#9EFFFF\"> browser </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#FF9D00\"> await</span><span style=\"color:#9EFFFF\"> puppeteer</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">launch</span><span style=\"color:#E1EFFF\">()</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    const</span><span style=\"color:#9EFFFF\"> page </span><span style=\"color:#FF9D00\">=</span><span style=\"color:#FF9D00\"> await</span><span style=\"color:#9EFFFF\"> browser</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">newPage</span><span style=\"color:#E1EFFF\">()</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#B362FF;font-style:italic\">    // script goes here</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">    await</span><span style=\"color:#9EFFFF\"> browser</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">close</span><span style=\"color:#E1EFFF\">()</span></span>\n<span data-line=\"\"><span style=\"color:#E1EFFF\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FAD000\">findPost</span><span style=\"color:#E1EFFF\">()</span></span></code></pre></figure>\n<p>Next we use the <code>page</code> object to navigate to the website. If we need to wait for additional content to load after navigation, like client side data fetching, we could provide the <code>waitUntil</code> option.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"javascript\" data-theme=\"Shades of Purple\"><code data-language=\"javascript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FF9D00\">await</span><span style=\"color:#9EFFFF\"> page</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">goto</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">https://bradgarropy.com/blog</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">)</span></span></code></pre></figure>\n<p>Now it's time to type into the search bar. Because the search bar updates results <code>onChange</code>, I've opted for the <a href=\"https://pptr.dev/#?product=Puppeteer&#x26;version=v5.5.0&#x26;show=api-class-keyboard\" rel=\"noopener noreferrer\" target=\"_blank\">keyboard</a> <code>type</code> method.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"javascript\" data-theme=\"Shades of Purple\"><code data-language=\"javascript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FF9D00\">await</span><span style=\"color:#9EFFFF\"> page</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">focus</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#92FC79\">'</span><span style=\"color:#A5FF90\">input[placeholder=\"search blog\"]</span><span style=\"color:#92FC79\">'</span><span style=\"color:#E1EFFF\">)</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">await</span><span style=\"color:#9EFFFF\"> page</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FFEE80\">keyboard</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">type</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">web scraping with puppeteer</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">)</span></span></code></pre></figure>\n<p>If instead we simply needed to fill an <code>input</code> and submit the value, we could use <code>page.$eval()</code> to directly set the input's <code>value</code>.</p>\n<p>At this point we should be seeing a filtered list of posts. Let's click on the first result, wait for that page to load, and take a screenshot.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Shades of Purple\" style=\"background-color:#2D2B55;color:#FFFFFF\" tabindex=\"0\" data-language=\"javascript\" data-theme=\"Shades of Purple\"><code data-language=\"javascript\" data-theme=\"Shades of Purple\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FF9D00\">await</span><span style=\"color:#9EFFFF\"> page</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">click</span><span style=\"color:#E1EFFF\">(</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#A5FF90\">section h1 a</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">)</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">await</span><span style=\"color:#9EFFFF\"> page</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">waitForNavigation</span><span style=\"color:#E1EFFF\">()</span></span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">await</span><span style=\"color:#9EFFFF\"> page</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">screenshot</span><span style=\"color:#E1EFFF\">({</span><span style=\"color:#80FFBB\">path</span><span style=\"color:#E1EFFF\">:</span><span style=\"color:#92FC79\"> \"</span><span style=\"color:#A5FF90\">screenshot.png</span><span style=\"color:#92FC79\">\"</span><span style=\"color:#E1EFFF\">})</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#FF9D00\">await</span><span style=\"color:#9EFFFF\"> browser</span><span style=\"color:#E1EFFF\">.</span><span style=\"color:#FAD000\">close</span><span style=\"color:#E1EFFF\">()</span></span></code></pre></figure>\n<p>Screenshots will come in handy while developing your automation script, as running a headless browser doesn't provide much visibility.</p>\n<a href=\"https://res.cloudinary.com/bradgarropy/image/upload/bradgarropy.com/posts/screenshot.png\"><img src=\"https://res.cloudinary.com/bradgarropy/image/upload/f_auto,q_auto,w_660,c_limit/bradgarropy.com/posts/screenshot.png\" alt=\"web scraping with puppeteer\" width=\"800\" height=\"600\"></a>\n<p>The last tip I'll leave you with is to be considerate of where you are placing <code>console.log()</code> statements. Remember that much of <a href=\"https://pptr.dev\" rel=\"noopener noreferrer\" target=\"_blank\">Puppeteer</a> is run in the context of the headless browser, so some of your log statements won't show up in the <code>node</code> console where your script is running.</p>\n<p>Now you can go script whatever you'd like! For instance, I automated the process of retrieving what user liked a particular tweet of mine. Share what you've automated with me on <a href=\"https://twitter.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">Twitter</a>.</p>",
            "url": "https://bradgarropy.com/blog/web-scraping-with-puppeteer",
            "title": "🧶 web scraping with puppeteer",
            "date_modified": "2020-12-05T00:00:00.000Z",
            "date_published": "2020-12-05T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "working-on-side-projects-livestream",
            "content_html": "<p><a href=\"https://twitter.com/jamesqquick\" rel=\"noopener noreferrer\" target=\"_blank\">James Quick</a> needed a last minute guest for his <a href=\"https://www.twitch.tv/jamesqquick\" rel=\"noopener noreferrer\" target=\"_blank\">Twitch</a> stream and I came in clutch to fill the spot! I've been working on a new side project lately called <a href=\"https://murphee.netlify.app\" rel=\"noopener noreferrer\" target=\"_blank\">MURPHY</a>, and talking a lot about it in the <a href=\"https://discord.gg/HcjwaTj\" rel=\"noopener noreferrer\" target=\"_blank\">Learn Build Teach</a> Discord.</p>\n<iframe class=\"aspect-video w-full rounded my-8\" title=\"iIxk8ebUC_g\" src=\"https://www.youtube-nocookie.com/embed/iIxk8ebUC_g\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen>\n        </iframe>\n<p>The project started as a simple tool to help me time the <a href=\"https://themurphchallenge.com\" rel=\"noopener noreferrer\" target=\"_blank\">murph</a> workout, but quickly turned into an excuse to learn a bunch of new technologies. I decided to build a fullstack application with <a href=\"https://svelte.dev\" rel=\"noopener noreferrer\" target=\"_blank\">Svelte</a>, <a href=\"http://tailwindcss.com\" rel=\"noopener noreferrer\" target=\"_blank\">Tailwind</a>, <a href=\"https://stripe.com\" rel=\"noopener noreferrer\" target=\"_blank\">Stripe</a>, <a href=\"https://fauna.com\" rel=\"noopener noreferrer\" target=\"_blank\">FaunaDB</a>, and <a href=\"https://docs.netlify.com/visitor-access/identity\" rel=\"noopener noreferrer\" target=\"_blank\">Netlify Identity</a>.</p>\n<p>During the stream I give a walkthrough of the application in it's current state, and share my thoughts about each of the technologies I used. I definitely hit some walls and experienced some frustration while developing this side project, but it helped to push my boundaries and grow my skills. <a href=\"https://murphee.netlify.app\" rel=\"noopener noreferrer\" target=\"_blank\">MURPHY</a> isn't finished yet, but you can watch all of my progress on <a href=\"https://twitch.tv/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">Twitch</a>!</p>",
            "url": "https://bradgarropy.com/blog/working-on-side-projects-livestream",
            "title": "🌃 working on side projects livestream",
            "date_modified": "2020-08-20T00:00:00.000Z",
            "date_published": "2020-08-20T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        },
        {
            "id": "youtube-vs-twitch",
            "content_html": "<p>Lately I've been watching more developers on <a href=\"https://twitch.tv\" rel=\"noopener noreferrer\" target=\"_blank\">Twitch</a>. Guys like <a href=\"https://twitch.tv/jlengstorf\" rel=\"noopener noreferrer\" target=\"_blank\">Jason Lengstorf</a>, <a href=\"https://twitch.tv/chrisoncode\" rel=\"noopener noreferrer\" target=\"_blank\">Chris on Code</a>, and <a href=\"https://twitch.tv/jamesqquick\" rel=\"noopener noreferrer\" target=\"_blank\">James Quick</a> all have some great content! I've <a href=\"https://youtube.com/playlist?list=PL6Mu1AMmTL-uMkwOvZ5_Ytbu9qQ5SQSrc\" rel=\"noopener noreferrer\" target=\"_blank\">streamed</a> quite a bit in the past on <a href=\"https://youtube.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">YouTube</a>, but I wasn't totally satisifed with the platform.</p>\n<p>But now that I've decided to devote more time to streaming, it's time to revisit which streaming service is king. I broke this comparison down into two main parts, one for the <a href=\"#-viewers\">viewers</a> and another for the <a href=\"#-creators\">creators</a>.</p>\n<div class=\"grid justify-center\">\n            <blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Put together a great <a href=\"https://twitter.com/NotionHQ?ref_src=twsrc%5Etfw\" rel=\"noopener noreferrer\" target=\"_blank\">@NotionHQ</a> document tonight comparing <a href=\"https://twitter.com/YouTube?ref_src=twsrc%5Etfw\" rel=\"noopener noreferrer\" target=\"_blank\">@youtube</a> to <a href=\"https://twitter.com/Twitch?ref_src=twsrc%5Etfw\" rel=\"noopener noreferrer\" target=\"_blank\">@twitch</a>.<br><br>I'll be turning this into a full blog post soon. <a href=\"https://t.co/wcWk3qMfRU\" rel=\"noopener noreferrer\" target=\"_blank\">pic.twitter.com/wcWk3qMfRU</a></p>— Brad Garropy (@bradgarropy) <a href=\"https://twitter.com/bradgarropy/status/1253899865114935296?ref_src=twsrc%5Etfw\" rel=\"noopener noreferrer\" target=\"_blank\">April 25, 2020</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n\n        </div>\n<h2>👀 viewers</h2>\n<p>Viewers want a platform that's easy to use, and sense of community to keep them connected to the content creators. YouTube and Twitch are easy to use on both desktop and mobile, and can be cast to a TV from the mobile app. Both platforms also have a subscription and notification system, so viewers stay informed about the latest streams.</p>\n<p>But Twitch takes the lead when it comes to creating a sense of community with their more advanced chat features. Having the ability to define custom commands, like <code>!uses</code> or <code>!dotfiles</code>, can allow viewers to ask questions and get answers immediately, without interrupting the stream. Twitch also improves discoverability by enabling viewers to search by topic or by team (a group of streamers).</p>\n<h2>💻 creators</h2>\n<p>For creators, there's a lot to take into consideration when choosing a streaming platform. Things like software integration, stream scheduling, and community building features should all be factored into the decision. Both platforms are capable of streaming from the two most popular applications, <a href=\"https://obsproject.com\" rel=\"noopener noreferrer\" target=\"_blank\">OBS</a> and <a href=\"https://streamlabs.com\" rel=\"noopener noreferrer\" target=\"_blank\">Streamlabs</a>, but YouTube comes with a cost.</p>\n<p>YouTube's chat url is unique for every video, which must be updated in your streaming software's chat widget before every stream. Even worse, YouTube consistently has at least a 5 second chat latency until you see it in your streaming software, making it difficult to have real time conversations with your audience. Twitch works exactly how you would expect right out of the box, minimal chat latency with no setup required.</p>\n<p>As for organizating your content, YouTube and Twitch allow you to create playlists. Twitch takes this one step further and allows you and your viewers to create clips and highlights to showcase your best moments. The downside is that content on Twitch will be removed from your channel after two weeks, although you can export it to YouTube. YouTube takes a different approach, and automatically publishes your livestreams to your channel. However I found that streams don't get many views in comparison to more focused 10 minute videos.</p>\n<p>Finally, Twitch really pulls ahead again with the community features for creators. Once a stream is finished, a creator can move their audience over to another channel, which is called raiding. So if you have any connections with larger audiences on Twitch, you can possibly benefit from them. Another interesting growth feature is hosting other creators on your channel. While you're offline, you can share other streams on your channel, which can help increase their following.</p>\n<h2>📊 results</h2>\n<p>At the end of the day, Twitch wins this battle due to its enhanced community features and stream extensions. While I do have a small following on <a href=\"https://youtube.com/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">YouTube</a> (shoutout to my 127 followers 👋🏼), it's not enough to keep me streaming there. Luckily I know <a href=\"https://twitch.tv/jamesqquick\" rel=\"noopener noreferrer\" target=\"_blank\">James Quick</a> on Twitch who might be able to help me grow, and there's a much better <a href=\"https://twitch.tv/team/livecoders\" rel=\"noopener noreferrer\" target=\"_blank\">developer community</a> there as well.</p>\n<p>With that being said, I've completely revamped my branding and created a Twitch channel, so come <a href=\"https://twitch.tv/bradgarropy\" rel=\"noopener noreferrer\" target=\"_blank\">hangout in my stream</a>!</p>",
            "url": "https://bradgarropy.com/blog/youtube-vs-twitch",
            "title": "📺 youtube vs. twitch",
            "date_modified": "2020-04-29T00:00:00.000Z",
            "date_published": "2020-04-29T00:00:00.000Z",
            "author": {
                "name": "Brad Garropy",
                "url": "https://twitter.com/bradgarropy"
            }
        }
    ]
}
